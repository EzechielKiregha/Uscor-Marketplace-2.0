
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `StripeCustomer` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model StripeCustomer
 * 
 */
export type StripeCustomerModel = runtime.Types.Result.DefaultSelection<Prisma.$StripeCustomerPayload>

export type AggregateStripeCustomer = {
  _count: StripeCustomerCountAggregateOutputType | null
  _min: StripeCustomerMinAggregateOutputType | null
  _max: StripeCustomerMaxAggregateOutputType | null
}

export type StripeCustomerMinAggregateOutputType = {
  id: string | null
  userId: string | null
  striperCustomerId: string | null
  createAt: Date | null
  updatedAt: Date | null
}

export type StripeCustomerMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  striperCustomerId: string | null
  createAt: Date | null
  updatedAt: Date | null
}

export type StripeCustomerCountAggregateOutputType = {
  id: number
  userId: number
  striperCustomerId: number
  createAt: number
  updatedAt: number
  _all: number
}


export type StripeCustomerMinAggregateInputType = {
  id?: true
  userId?: true
  striperCustomerId?: true
  createAt?: true
  updatedAt?: true
}

export type StripeCustomerMaxAggregateInputType = {
  id?: true
  userId?: true
  striperCustomerId?: true
  createAt?: true
  updatedAt?: true
}

export type StripeCustomerCountAggregateInputType = {
  id?: true
  userId?: true
  striperCustomerId?: true
  createAt?: true
  updatedAt?: true
  _all?: true
}

export type StripeCustomerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StripeCustomer to aggregate.
   */
  where?: Prisma.StripeCustomerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StripeCustomers to fetch.
   */
  orderBy?: Prisma.StripeCustomerOrderByWithRelationInput | Prisma.StripeCustomerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.StripeCustomerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StripeCustomers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StripeCustomers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned StripeCustomers
  **/
  _count?: true | StripeCustomerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: StripeCustomerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: StripeCustomerMaxAggregateInputType
}

export type GetStripeCustomerAggregateType<T extends StripeCustomerAggregateArgs> = {
      [P in keyof T & keyof AggregateStripeCustomer]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateStripeCustomer[P]>
    : Prisma.GetScalarType<T[P], AggregateStripeCustomer[P]>
}




export type StripeCustomerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StripeCustomerWhereInput
  orderBy?: Prisma.StripeCustomerOrderByWithAggregationInput | Prisma.StripeCustomerOrderByWithAggregationInput[]
  by: Prisma.StripeCustomerScalarFieldEnum[] | Prisma.StripeCustomerScalarFieldEnum
  having?: Prisma.StripeCustomerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: StripeCustomerCountAggregateInputType | true
  _min?: StripeCustomerMinAggregateInputType
  _max?: StripeCustomerMaxAggregateInputType
}

export type StripeCustomerGroupByOutputType = {
  id: string
  userId: string
  striperCustomerId: string
  createAt: Date
  updatedAt: Date
  _count: StripeCustomerCountAggregateOutputType | null
  _min: StripeCustomerMinAggregateOutputType | null
  _max: StripeCustomerMaxAggregateOutputType | null
}

type GetStripeCustomerGroupByPayload<T extends StripeCustomerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<StripeCustomerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof StripeCustomerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], StripeCustomerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], StripeCustomerGroupByOutputType[P]>
      }
    >
  >



export type StripeCustomerWhereInput = {
  AND?: Prisma.StripeCustomerWhereInput | Prisma.StripeCustomerWhereInput[]
  OR?: Prisma.StripeCustomerWhereInput[]
  NOT?: Prisma.StripeCustomerWhereInput | Prisma.StripeCustomerWhereInput[]
  id?: Prisma.StringFilter<"StripeCustomer"> | string
  userId?: Prisma.StringFilter<"StripeCustomer"> | string
  striperCustomerId?: Prisma.StringFilter<"StripeCustomer"> | string
  createAt?: Prisma.DateTimeFilter<"StripeCustomer"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"StripeCustomer"> | Date | string
}

export type StripeCustomerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  striperCustomerId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StripeCustomerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  striperCustomerId?: string
  AND?: Prisma.StripeCustomerWhereInput | Prisma.StripeCustomerWhereInput[]
  OR?: Prisma.StripeCustomerWhereInput[]
  NOT?: Prisma.StripeCustomerWhereInput | Prisma.StripeCustomerWhereInput[]
  createAt?: Prisma.DateTimeFilter<"StripeCustomer"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"StripeCustomer"> | Date | string
}, "id" | "userId" | "striperCustomerId">

export type StripeCustomerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  striperCustomerId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.StripeCustomerCountOrderByAggregateInput
  _max?: Prisma.StripeCustomerMaxOrderByAggregateInput
  _min?: Prisma.StripeCustomerMinOrderByAggregateInput
}

export type StripeCustomerScalarWhereWithAggregatesInput = {
  AND?: Prisma.StripeCustomerScalarWhereWithAggregatesInput | Prisma.StripeCustomerScalarWhereWithAggregatesInput[]
  OR?: Prisma.StripeCustomerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.StripeCustomerScalarWhereWithAggregatesInput | Prisma.StripeCustomerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"StripeCustomer"> | string
  userId?: Prisma.StringWithAggregatesFilter<"StripeCustomer"> | string
  striperCustomerId?: Prisma.StringWithAggregatesFilter<"StripeCustomer"> | string
  createAt?: Prisma.DateTimeWithAggregatesFilter<"StripeCustomer"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"StripeCustomer"> | Date | string
}

export type StripeCustomerCreateInput = {
  id?: string
  userId: string
  striperCustomerId: string
  createAt?: Date | string
  updatedAt?: Date | string
}

export type StripeCustomerUncheckedCreateInput = {
  id?: string
  userId: string
  striperCustomerId: string
  createAt?: Date | string
  updatedAt?: Date | string
}

export type StripeCustomerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  striperCustomerId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StripeCustomerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  striperCustomerId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StripeCustomerCreateManyInput = {
  id?: string
  userId: string
  striperCustomerId: string
  createAt?: Date | string
  updatedAt?: Date | string
}

export type StripeCustomerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  striperCustomerId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StripeCustomerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  striperCustomerId?: Prisma.StringFieldUpdateOperationsInput | string
  createAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type StripeCustomerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  striperCustomerId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StripeCustomerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  striperCustomerId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StripeCustomerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  striperCustomerId?: Prisma.SortOrder
  createAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type StripeCustomerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  striperCustomerId?: boolean
  createAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["stripeCustomer"]>

export type StripeCustomerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  striperCustomerId?: boolean
  createAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["stripeCustomer"]>

export type StripeCustomerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  striperCustomerId?: boolean
  createAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["stripeCustomer"]>

export type StripeCustomerSelectScalar = {
  id?: boolean
  userId?: boolean
  striperCustomerId?: boolean
  createAt?: boolean
  updatedAt?: boolean
}

export type StripeCustomerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "striperCustomerId" | "createAt" | "updatedAt", ExtArgs["result"]["stripeCustomer"]>

export type $StripeCustomerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "StripeCustomer"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    striperCustomerId: string
    createAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["stripeCustomer"]>
  composites: {}
}

export type StripeCustomerGetPayload<S extends boolean | null | undefined | StripeCustomerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload, S>

export type StripeCustomerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<StripeCustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: StripeCustomerCountAggregateInputType | true
  }

export interface StripeCustomerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StripeCustomer'], meta: { name: 'StripeCustomer' } }
  /**
   * Find zero or one StripeCustomer that matches the filter.
   * @param {StripeCustomerFindUniqueArgs} args - Arguments to find a StripeCustomer
   * @example
   * // Get one StripeCustomer
   * const stripeCustomer = await prisma.stripeCustomer.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends StripeCustomerFindUniqueArgs>(args: Prisma.SelectSubset<T, StripeCustomerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__StripeCustomerClient<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one StripeCustomer that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {StripeCustomerFindUniqueOrThrowArgs} args - Arguments to find a StripeCustomer
   * @example
   * // Get one StripeCustomer
   * const stripeCustomer = await prisma.stripeCustomer.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends StripeCustomerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, StripeCustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__StripeCustomerClient<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StripeCustomer that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StripeCustomerFindFirstArgs} args - Arguments to find a StripeCustomer
   * @example
   * // Get one StripeCustomer
   * const stripeCustomer = await prisma.stripeCustomer.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends StripeCustomerFindFirstArgs>(args?: Prisma.SelectSubset<T, StripeCustomerFindFirstArgs<ExtArgs>>): Prisma.Prisma__StripeCustomerClient<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first StripeCustomer that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StripeCustomerFindFirstOrThrowArgs} args - Arguments to find a StripeCustomer
   * @example
   * // Get one StripeCustomer
   * const stripeCustomer = await prisma.stripeCustomer.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends StripeCustomerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, StripeCustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__StripeCustomerClient<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more StripeCustomers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StripeCustomerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all StripeCustomers
   * const stripeCustomers = await prisma.stripeCustomer.findMany()
   * 
   * // Get first 10 StripeCustomers
   * const stripeCustomers = await prisma.stripeCustomer.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const stripeCustomerWithIdOnly = await prisma.stripeCustomer.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends StripeCustomerFindManyArgs>(args?: Prisma.SelectSubset<T, StripeCustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a StripeCustomer.
   * @param {StripeCustomerCreateArgs} args - Arguments to create a StripeCustomer.
   * @example
   * // Create one StripeCustomer
   * const StripeCustomer = await prisma.stripeCustomer.create({
   *   data: {
   *     // ... data to create a StripeCustomer
   *   }
   * })
   * 
   */
  create<T extends StripeCustomerCreateArgs>(args: Prisma.SelectSubset<T, StripeCustomerCreateArgs<ExtArgs>>): Prisma.Prisma__StripeCustomerClient<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many StripeCustomers.
   * @param {StripeCustomerCreateManyArgs} args - Arguments to create many StripeCustomers.
   * @example
   * // Create many StripeCustomers
   * const stripeCustomer = await prisma.stripeCustomer.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends StripeCustomerCreateManyArgs>(args?: Prisma.SelectSubset<T, StripeCustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many StripeCustomers and returns the data saved in the database.
   * @param {StripeCustomerCreateManyAndReturnArgs} args - Arguments to create many StripeCustomers.
   * @example
   * // Create many StripeCustomers
   * const stripeCustomer = await prisma.stripeCustomer.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many StripeCustomers and only return the `id`
   * const stripeCustomerWithIdOnly = await prisma.stripeCustomer.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends StripeCustomerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, StripeCustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a StripeCustomer.
   * @param {StripeCustomerDeleteArgs} args - Arguments to delete one StripeCustomer.
   * @example
   * // Delete one StripeCustomer
   * const StripeCustomer = await prisma.stripeCustomer.delete({
   *   where: {
   *     // ... filter to delete one StripeCustomer
   *   }
   * })
   * 
   */
  delete<T extends StripeCustomerDeleteArgs>(args: Prisma.SelectSubset<T, StripeCustomerDeleteArgs<ExtArgs>>): Prisma.Prisma__StripeCustomerClient<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one StripeCustomer.
   * @param {StripeCustomerUpdateArgs} args - Arguments to update one StripeCustomer.
   * @example
   * // Update one StripeCustomer
   * const stripeCustomer = await prisma.stripeCustomer.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends StripeCustomerUpdateArgs>(args: Prisma.SelectSubset<T, StripeCustomerUpdateArgs<ExtArgs>>): Prisma.Prisma__StripeCustomerClient<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more StripeCustomers.
   * @param {StripeCustomerDeleteManyArgs} args - Arguments to filter StripeCustomers to delete.
   * @example
   * // Delete a few StripeCustomers
   * const { count } = await prisma.stripeCustomer.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends StripeCustomerDeleteManyArgs>(args?: Prisma.SelectSubset<T, StripeCustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StripeCustomers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StripeCustomerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many StripeCustomers
   * const stripeCustomer = await prisma.stripeCustomer.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends StripeCustomerUpdateManyArgs>(args: Prisma.SelectSubset<T, StripeCustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more StripeCustomers and returns the data updated in the database.
   * @param {StripeCustomerUpdateManyAndReturnArgs} args - Arguments to update many StripeCustomers.
   * @example
   * // Update many StripeCustomers
   * const stripeCustomer = await prisma.stripeCustomer.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more StripeCustomers and only return the `id`
   * const stripeCustomerWithIdOnly = await prisma.stripeCustomer.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends StripeCustomerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, StripeCustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one StripeCustomer.
   * @param {StripeCustomerUpsertArgs} args - Arguments to update or create a StripeCustomer.
   * @example
   * // Update or create a StripeCustomer
   * const stripeCustomer = await prisma.stripeCustomer.upsert({
   *   create: {
   *     // ... data to create a StripeCustomer
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the StripeCustomer we want to update
   *   }
   * })
   */
  upsert<T extends StripeCustomerUpsertArgs>(args: Prisma.SelectSubset<T, StripeCustomerUpsertArgs<ExtArgs>>): Prisma.Prisma__StripeCustomerClient<runtime.Types.Result.GetResult<Prisma.$StripeCustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of StripeCustomers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StripeCustomerCountArgs} args - Arguments to filter StripeCustomers to count.
   * @example
   * // Count the number of StripeCustomers
   * const count = await prisma.stripeCustomer.count({
   *   where: {
   *     // ... the filter for the StripeCustomers we want to count
   *   }
   * })
  **/
  count<T extends StripeCustomerCountArgs>(
    args?: Prisma.Subset<T, StripeCustomerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], StripeCustomerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a StripeCustomer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StripeCustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends StripeCustomerAggregateArgs>(args: Prisma.Subset<T, StripeCustomerAggregateArgs>): Prisma.PrismaPromise<GetStripeCustomerAggregateType<T>>

  /**
   * Group by StripeCustomer.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {StripeCustomerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends StripeCustomerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: StripeCustomerGroupByArgs['orderBy'] }
      : { orderBy?: StripeCustomerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, StripeCustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStripeCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the StripeCustomer model
 */
readonly fields: StripeCustomerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for StripeCustomer.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__StripeCustomerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the StripeCustomer model
 */
export interface StripeCustomerFieldRefs {
  readonly id: Prisma.FieldRef<"StripeCustomer", 'String'>
  readonly userId: Prisma.FieldRef<"StripeCustomer", 'String'>
  readonly striperCustomerId: Prisma.FieldRef<"StripeCustomer", 'String'>
  readonly createAt: Prisma.FieldRef<"StripeCustomer", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"StripeCustomer", 'DateTime'>
}
    

// Custom InputTypes
/**
 * StripeCustomer findUnique
 */
export type StripeCustomerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * Filter, which StripeCustomer to fetch.
   */
  where: Prisma.StripeCustomerWhereUniqueInput
}

/**
 * StripeCustomer findUniqueOrThrow
 */
export type StripeCustomerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * Filter, which StripeCustomer to fetch.
   */
  where: Prisma.StripeCustomerWhereUniqueInput
}

/**
 * StripeCustomer findFirst
 */
export type StripeCustomerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * Filter, which StripeCustomer to fetch.
   */
  where?: Prisma.StripeCustomerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StripeCustomers to fetch.
   */
  orderBy?: Prisma.StripeCustomerOrderByWithRelationInput | Prisma.StripeCustomerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StripeCustomers.
   */
  cursor?: Prisma.StripeCustomerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StripeCustomers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StripeCustomers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StripeCustomers.
   */
  distinct?: Prisma.StripeCustomerScalarFieldEnum | Prisma.StripeCustomerScalarFieldEnum[]
}

/**
 * StripeCustomer findFirstOrThrow
 */
export type StripeCustomerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * Filter, which StripeCustomer to fetch.
   */
  where?: Prisma.StripeCustomerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StripeCustomers to fetch.
   */
  orderBy?: Prisma.StripeCustomerOrderByWithRelationInput | Prisma.StripeCustomerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for StripeCustomers.
   */
  cursor?: Prisma.StripeCustomerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StripeCustomers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StripeCustomers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of StripeCustomers.
   */
  distinct?: Prisma.StripeCustomerScalarFieldEnum | Prisma.StripeCustomerScalarFieldEnum[]
}

/**
 * StripeCustomer findMany
 */
export type StripeCustomerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * Filter, which StripeCustomers to fetch.
   */
  where?: Prisma.StripeCustomerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of StripeCustomers to fetch.
   */
  orderBy?: Prisma.StripeCustomerOrderByWithRelationInput | Prisma.StripeCustomerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing StripeCustomers.
   */
  cursor?: Prisma.StripeCustomerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` StripeCustomers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` StripeCustomers.
   */
  skip?: number
  distinct?: Prisma.StripeCustomerScalarFieldEnum | Prisma.StripeCustomerScalarFieldEnum[]
}

/**
 * StripeCustomer create
 */
export type StripeCustomerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * The data needed to create a StripeCustomer.
   */
  data: Prisma.XOR<Prisma.StripeCustomerCreateInput, Prisma.StripeCustomerUncheckedCreateInput>
}

/**
 * StripeCustomer createMany
 */
export type StripeCustomerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many StripeCustomers.
   */
  data: Prisma.StripeCustomerCreateManyInput | Prisma.StripeCustomerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StripeCustomer createManyAndReturn
 */
export type StripeCustomerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * The data used to create many StripeCustomers.
   */
  data: Prisma.StripeCustomerCreateManyInput | Prisma.StripeCustomerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * StripeCustomer update
 */
export type StripeCustomerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * The data needed to update a StripeCustomer.
   */
  data: Prisma.XOR<Prisma.StripeCustomerUpdateInput, Prisma.StripeCustomerUncheckedUpdateInput>
  /**
   * Choose, which StripeCustomer to update.
   */
  where: Prisma.StripeCustomerWhereUniqueInput
}

/**
 * StripeCustomer updateMany
 */
export type StripeCustomerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update StripeCustomers.
   */
  data: Prisma.XOR<Prisma.StripeCustomerUpdateManyMutationInput, Prisma.StripeCustomerUncheckedUpdateManyInput>
  /**
   * Filter which StripeCustomers to update
   */
  where?: Prisma.StripeCustomerWhereInput
  /**
   * Limit how many StripeCustomers to update.
   */
  limit?: number
}

/**
 * StripeCustomer updateManyAndReturn
 */
export type StripeCustomerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * The data used to update StripeCustomers.
   */
  data: Prisma.XOR<Prisma.StripeCustomerUpdateManyMutationInput, Prisma.StripeCustomerUncheckedUpdateManyInput>
  /**
   * Filter which StripeCustomers to update
   */
  where?: Prisma.StripeCustomerWhereInput
  /**
   * Limit how many StripeCustomers to update.
   */
  limit?: number
}

/**
 * StripeCustomer upsert
 */
export type StripeCustomerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * The filter to search for the StripeCustomer to update in case it exists.
   */
  where: Prisma.StripeCustomerWhereUniqueInput
  /**
   * In case the StripeCustomer found by the `where` argument doesn't exist, create a new StripeCustomer with this data.
   */
  create: Prisma.XOR<Prisma.StripeCustomerCreateInput, Prisma.StripeCustomerUncheckedCreateInput>
  /**
   * In case the StripeCustomer was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.StripeCustomerUpdateInput, Prisma.StripeCustomerUncheckedUpdateInput>
}

/**
 * StripeCustomer delete
 */
export type StripeCustomerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
  /**
   * Filter which StripeCustomer to delete.
   */
  where: Prisma.StripeCustomerWhereUniqueInput
}

/**
 * StripeCustomer deleteMany
 */
export type StripeCustomerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which StripeCustomers to delete
   */
  where?: Prisma.StripeCustomerWhereInput
  /**
   * Limit how many StripeCustomers to delete.
   */
  limit?: number
}

/**
 * StripeCustomer without action
 */
export type StripeCustomerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the StripeCustomer
   */
  select?: Prisma.StripeCustomerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the StripeCustomer
   */
  omit?: Prisma.StripeCustomerOmit<ExtArgs> | null
}
