
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PricingPlan` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PricingPlan
 * 
 */
export type PricingPlanModel = runtime.Types.Result.DefaultSelection<Prisma.$PricingPlanPayload>

export type AggregatePricingPlan = {
  _count: PricingPlanCountAggregateOutputType | null
  _avg: PricingPlanAvgAggregateOutputType | null
  _sum: PricingPlanSumAggregateOutputType | null
  _min: PricingPlanMinAggregateOutputType | null
  _max: PricingPlanMaxAggregateOutputType | null
}

export type PricingPlanAvgAggregateOutputType = {
  price: number | null
}

export type PricingPlanSumAggregateOutputType = {
  price: number | null
}

export type PricingPlanMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  price: number | null
  isCurrentPlan: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PricingPlanMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  price: number | null
  isCurrentPlan: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PricingPlanCountAggregateOutputType = {
  id: number
  name: number
  description: number
  price: number
  isCurrentPlan: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PricingPlanAvgAggregateInputType = {
  price?: true
}

export type PricingPlanSumAggregateInputType = {
  price?: true
}

export type PricingPlanMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  isCurrentPlan?: true
  createdAt?: true
  updatedAt?: true
}

export type PricingPlanMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  isCurrentPlan?: true
  createdAt?: true
  updatedAt?: true
}

export type PricingPlanCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  isCurrentPlan?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PricingPlanAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PricingPlan to aggregate.
   */
  where?: Prisma.PricingPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PricingPlans to fetch.
   */
  orderBy?: Prisma.PricingPlanOrderByWithRelationInput | Prisma.PricingPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PricingPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PricingPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PricingPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PricingPlans
  **/
  _count?: true | PricingPlanCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PricingPlanAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PricingPlanSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PricingPlanMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PricingPlanMaxAggregateInputType
}

export type GetPricingPlanAggregateType<T extends PricingPlanAggregateArgs> = {
      [P in keyof T & keyof AggregatePricingPlan]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePricingPlan[P]>
    : Prisma.GetScalarType<T[P], AggregatePricingPlan[P]>
}




export type PricingPlanGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PricingPlanWhereInput
  orderBy?: Prisma.PricingPlanOrderByWithAggregationInput | Prisma.PricingPlanOrderByWithAggregationInput[]
  by: Prisma.PricingPlanScalarFieldEnum[] | Prisma.PricingPlanScalarFieldEnum
  having?: Prisma.PricingPlanScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PricingPlanCountAggregateInputType | true
  _avg?: PricingPlanAvgAggregateInputType
  _sum?: PricingPlanSumAggregateInputType
  _min?: PricingPlanMinAggregateInputType
  _max?: PricingPlanMaxAggregateInputType
}

export type PricingPlanGroupByOutputType = {
  id: string
  name: string
  description: string | null
  price: number
  isCurrentPlan: boolean
  createdAt: Date
  updatedAt: Date
  _count: PricingPlanCountAggregateOutputType | null
  _avg: PricingPlanAvgAggregateOutputType | null
  _sum: PricingPlanSumAggregateOutputType | null
  _min: PricingPlanMinAggregateOutputType | null
  _max: PricingPlanMaxAggregateOutputType | null
}

type GetPricingPlanGroupByPayload<T extends PricingPlanGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PricingPlanGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PricingPlanGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PricingPlanGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PricingPlanGroupByOutputType[P]>
      }
    >
  >



export type PricingPlanWhereInput = {
  AND?: Prisma.PricingPlanWhereInput | Prisma.PricingPlanWhereInput[]
  OR?: Prisma.PricingPlanWhereInput[]
  NOT?: Prisma.PricingPlanWhereInput | Prisma.PricingPlanWhereInput[]
  id?: Prisma.StringFilter<"PricingPlan"> | string
  name?: Prisma.StringFilter<"PricingPlan"> | string
  description?: Prisma.StringNullableFilter<"PricingPlan"> | string | null
  price?: Prisma.FloatFilter<"PricingPlan"> | number
  isCurrentPlan?: Prisma.BoolFilter<"PricingPlan"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PricingPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PricingPlan"> | Date | string
  features?: Prisma.PricingFeatureListRelationFilter
}

export type PricingPlanOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrder
  isCurrentPlan?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  features?: Prisma.PricingFeatureOrderByRelationAggregateInput
}

export type PricingPlanWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PricingPlanWhereInput | Prisma.PricingPlanWhereInput[]
  OR?: Prisma.PricingPlanWhereInput[]
  NOT?: Prisma.PricingPlanWhereInput | Prisma.PricingPlanWhereInput[]
  name?: Prisma.StringFilter<"PricingPlan"> | string
  description?: Prisma.StringNullableFilter<"PricingPlan"> | string | null
  price?: Prisma.FloatFilter<"PricingPlan"> | number
  isCurrentPlan?: Prisma.BoolFilter<"PricingPlan"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PricingPlan"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PricingPlan"> | Date | string
  features?: Prisma.PricingFeatureListRelationFilter
}, "id">

export type PricingPlanOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrder
  isCurrentPlan?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PricingPlanCountOrderByAggregateInput
  _avg?: Prisma.PricingPlanAvgOrderByAggregateInput
  _max?: Prisma.PricingPlanMaxOrderByAggregateInput
  _min?: Prisma.PricingPlanMinOrderByAggregateInput
  _sum?: Prisma.PricingPlanSumOrderByAggregateInput
}

export type PricingPlanScalarWhereWithAggregatesInput = {
  AND?: Prisma.PricingPlanScalarWhereWithAggregatesInput | Prisma.PricingPlanScalarWhereWithAggregatesInput[]
  OR?: Prisma.PricingPlanScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PricingPlanScalarWhereWithAggregatesInput | Prisma.PricingPlanScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PricingPlan"> | string
  name?: Prisma.StringWithAggregatesFilter<"PricingPlan"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"PricingPlan"> | string | null
  price?: Prisma.FloatWithAggregatesFilter<"PricingPlan"> | number
  isCurrentPlan?: Prisma.BoolWithAggregatesFilter<"PricingPlan"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PricingPlan"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PricingPlan"> | Date | string
}

export type PricingPlanCreateInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  isCurrentPlan?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  features?: Prisma.PricingFeatureCreateNestedManyWithoutPlanInput
}

export type PricingPlanUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  isCurrentPlan?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  features?: Prisma.PricingFeatureUncheckedCreateNestedManyWithoutPlanInput
}

export type PricingPlanUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  isCurrentPlan?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  features?: Prisma.PricingFeatureUpdateManyWithoutPlanNestedInput
}

export type PricingPlanUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  isCurrentPlan?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  features?: Prisma.PricingFeatureUncheckedUpdateManyWithoutPlanNestedInput
}

export type PricingPlanCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  isCurrentPlan?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PricingPlanUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  isCurrentPlan?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PricingPlanUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  isCurrentPlan?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PricingPlanCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  isCurrentPlan?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PricingPlanAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
}

export type PricingPlanMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  isCurrentPlan?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PricingPlanMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  isCurrentPlan?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PricingPlanSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
}

export type PricingPlanScalarRelationFilter = {
  is?: Prisma.PricingPlanWhereInput
  isNot?: Prisma.PricingPlanWhereInput
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type PricingPlanCreateNestedOneWithoutFeaturesInput = {
  create?: Prisma.XOR<Prisma.PricingPlanCreateWithoutFeaturesInput, Prisma.PricingPlanUncheckedCreateWithoutFeaturesInput>
  connectOrCreate?: Prisma.PricingPlanCreateOrConnectWithoutFeaturesInput
  connect?: Prisma.PricingPlanWhereUniqueInput
}

export type PricingPlanUpdateOneRequiredWithoutFeaturesNestedInput = {
  create?: Prisma.XOR<Prisma.PricingPlanCreateWithoutFeaturesInput, Prisma.PricingPlanUncheckedCreateWithoutFeaturesInput>
  connectOrCreate?: Prisma.PricingPlanCreateOrConnectWithoutFeaturesInput
  upsert?: Prisma.PricingPlanUpsertWithoutFeaturesInput
  connect?: Prisma.PricingPlanWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PricingPlanUpdateToOneWithWhereWithoutFeaturesInput, Prisma.PricingPlanUpdateWithoutFeaturesInput>, Prisma.PricingPlanUncheckedUpdateWithoutFeaturesInput>
}

export type PricingPlanCreateWithoutFeaturesInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  isCurrentPlan?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PricingPlanUncheckedCreateWithoutFeaturesInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  isCurrentPlan?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PricingPlanCreateOrConnectWithoutFeaturesInput = {
  where: Prisma.PricingPlanWhereUniqueInput
  create: Prisma.XOR<Prisma.PricingPlanCreateWithoutFeaturesInput, Prisma.PricingPlanUncheckedCreateWithoutFeaturesInput>
}

export type PricingPlanUpsertWithoutFeaturesInput = {
  update: Prisma.XOR<Prisma.PricingPlanUpdateWithoutFeaturesInput, Prisma.PricingPlanUncheckedUpdateWithoutFeaturesInput>
  create: Prisma.XOR<Prisma.PricingPlanCreateWithoutFeaturesInput, Prisma.PricingPlanUncheckedCreateWithoutFeaturesInput>
  where?: Prisma.PricingPlanWhereInput
}

export type PricingPlanUpdateToOneWithWhereWithoutFeaturesInput = {
  where?: Prisma.PricingPlanWhereInput
  data: Prisma.XOR<Prisma.PricingPlanUpdateWithoutFeaturesInput, Prisma.PricingPlanUncheckedUpdateWithoutFeaturesInput>
}

export type PricingPlanUpdateWithoutFeaturesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  isCurrentPlan?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PricingPlanUncheckedUpdateWithoutFeaturesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  isCurrentPlan?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PricingPlanCountOutputType
 */

export type PricingPlanCountOutputType = {
  features: number
}

export type PricingPlanCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  features?: boolean | PricingPlanCountOutputTypeCountFeaturesArgs
}

/**
 * PricingPlanCountOutputType without action
 */
export type PricingPlanCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlanCountOutputType
   */
  select?: Prisma.PricingPlanCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PricingPlanCountOutputType without action
 */
export type PricingPlanCountOutputTypeCountFeaturesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PricingFeatureWhereInput
}


export type PricingPlanSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  isCurrentPlan?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  features?: boolean | Prisma.PricingPlan$featuresArgs<ExtArgs>
  _count?: boolean | Prisma.PricingPlanCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pricingPlan"]>

export type PricingPlanSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  isCurrentPlan?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pricingPlan"]>

export type PricingPlanSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  isCurrentPlan?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["pricingPlan"]>

export type PricingPlanSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  isCurrentPlan?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PricingPlanOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "price" | "isCurrentPlan" | "createdAt" | "updatedAt", ExtArgs["result"]["pricingPlan"]>
export type PricingPlanInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  features?: boolean | Prisma.PricingPlan$featuresArgs<ExtArgs>
  _count?: boolean | Prisma.PricingPlanCountOutputTypeDefaultArgs<ExtArgs>
}
export type PricingPlanIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PricingPlanIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PricingPlanPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PricingPlan"
  objects: {
    features: Prisma.$PricingFeaturePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    price: number
    isCurrentPlan: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["pricingPlan"]>
  composites: {}
}

export type PricingPlanGetPayload<S extends boolean | null | undefined | PricingPlanDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload, S>

export type PricingPlanCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PricingPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PricingPlanCountAggregateInputType | true
  }

export interface PricingPlanDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PricingPlan'], meta: { name: 'PricingPlan' } }
  /**
   * Find zero or one PricingPlan that matches the filter.
   * @param {PricingPlanFindUniqueArgs} args - Arguments to find a PricingPlan
   * @example
   * // Get one PricingPlan
   * const pricingPlan = await prisma.pricingPlan.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PricingPlanFindUniqueArgs>(args: Prisma.SelectSubset<T, PricingPlanFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PricingPlan that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PricingPlanFindUniqueOrThrowArgs} args - Arguments to find a PricingPlan
   * @example
   * // Get one PricingPlan
   * const pricingPlan = await prisma.pricingPlan.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PricingPlanFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PricingPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PricingPlan that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingPlanFindFirstArgs} args - Arguments to find a PricingPlan
   * @example
   * // Get one PricingPlan
   * const pricingPlan = await prisma.pricingPlan.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PricingPlanFindFirstArgs>(args?: Prisma.SelectSubset<T, PricingPlanFindFirstArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PricingPlan that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingPlanFindFirstOrThrowArgs} args - Arguments to find a PricingPlan
   * @example
   * // Get one PricingPlan
   * const pricingPlan = await prisma.pricingPlan.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PricingPlanFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PricingPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PricingPlans that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingPlanFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PricingPlans
   * const pricingPlans = await prisma.pricingPlan.findMany()
   * 
   * // Get first 10 PricingPlans
   * const pricingPlans = await prisma.pricingPlan.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pricingPlanWithIdOnly = await prisma.pricingPlan.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PricingPlanFindManyArgs>(args?: Prisma.SelectSubset<T, PricingPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PricingPlan.
   * @param {PricingPlanCreateArgs} args - Arguments to create a PricingPlan.
   * @example
   * // Create one PricingPlan
   * const PricingPlan = await prisma.pricingPlan.create({
   *   data: {
   *     // ... data to create a PricingPlan
   *   }
   * })
   * 
   */
  create<T extends PricingPlanCreateArgs>(args: Prisma.SelectSubset<T, PricingPlanCreateArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PricingPlans.
   * @param {PricingPlanCreateManyArgs} args - Arguments to create many PricingPlans.
   * @example
   * // Create many PricingPlans
   * const pricingPlan = await prisma.pricingPlan.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PricingPlanCreateManyArgs>(args?: Prisma.SelectSubset<T, PricingPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PricingPlans and returns the data saved in the database.
   * @param {PricingPlanCreateManyAndReturnArgs} args - Arguments to create many PricingPlans.
   * @example
   * // Create many PricingPlans
   * const pricingPlan = await prisma.pricingPlan.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PricingPlans and only return the `id`
   * const pricingPlanWithIdOnly = await prisma.pricingPlan.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PricingPlanCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PricingPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PricingPlan.
   * @param {PricingPlanDeleteArgs} args - Arguments to delete one PricingPlan.
   * @example
   * // Delete one PricingPlan
   * const PricingPlan = await prisma.pricingPlan.delete({
   *   where: {
   *     // ... filter to delete one PricingPlan
   *   }
   * })
   * 
   */
  delete<T extends PricingPlanDeleteArgs>(args: Prisma.SelectSubset<T, PricingPlanDeleteArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PricingPlan.
   * @param {PricingPlanUpdateArgs} args - Arguments to update one PricingPlan.
   * @example
   * // Update one PricingPlan
   * const pricingPlan = await prisma.pricingPlan.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PricingPlanUpdateArgs>(args: Prisma.SelectSubset<T, PricingPlanUpdateArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PricingPlans.
   * @param {PricingPlanDeleteManyArgs} args - Arguments to filter PricingPlans to delete.
   * @example
   * // Delete a few PricingPlans
   * const { count } = await prisma.pricingPlan.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PricingPlanDeleteManyArgs>(args?: Prisma.SelectSubset<T, PricingPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PricingPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingPlanUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PricingPlans
   * const pricingPlan = await prisma.pricingPlan.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PricingPlanUpdateManyArgs>(args: Prisma.SelectSubset<T, PricingPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PricingPlans and returns the data updated in the database.
   * @param {PricingPlanUpdateManyAndReturnArgs} args - Arguments to update many PricingPlans.
   * @example
   * // Update many PricingPlans
   * const pricingPlan = await prisma.pricingPlan.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PricingPlans and only return the `id`
   * const pricingPlanWithIdOnly = await prisma.pricingPlan.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PricingPlanUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PricingPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PricingPlan.
   * @param {PricingPlanUpsertArgs} args - Arguments to update or create a PricingPlan.
   * @example
   * // Update or create a PricingPlan
   * const pricingPlan = await prisma.pricingPlan.upsert({
   *   create: {
   *     // ... data to create a PricingPlan
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PricingPlan we want to update
   *   }
   * })
   */
  upsert<T extends PricingPlanUpsertArgs>(args: Prisma.SelectSubset<T, PricingPlanUpsertArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PricingPlans.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingPlanCountArgs} args - Arguments to filter PricingPlans to count.
   * @example
   * // Count the number of PricingPlans
   * const count = await prisma.pricingPlan.count({
   *   where: {
   *     // ... the filter for the PricingPlans we want to count
   *   }
   * })
  **/
  count<T extends PricingPlanCountArgs>(
    args?: Prisma.Subset<T, PricingPlanCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PricingPlanCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PricingPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PricingPlanAggregateArgs>(args: Prisma.Subset<T, PricingPlanAggregateArgs>): Prisma.PrismaPromise<GetPricingPlanAggregateType<T>>

  /**
   * Group by PricingPlan.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingPlanGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PricingPlanGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PricingPlanGroupByArgs['orderBy'] }
      : { orderBy?: PricingPlanGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PricingPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPricingPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PricingPlan model
 */
readonly fields: PricingPlanFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PricingPlan.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PricingPlanClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  features<T extends Prisma.PricingPlan$featuresArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PricingPlan$featuresArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PricingPlan model
 */
export interface PricingPlanFieldRefs {
  readonly id: Prisma.FieldRef<"PricingPlan", 'String'>
  readonly name: Prisma.FieldRef<"PricingPlan", 'String'>
  readonly description: Prisma.FieldRef<"PricingPlan", 'String'>
  readonly price: Prisma.FieldRef<"PricingPlan", 'Float'>
  readonly isCurrentPlan: Prisma.FieldRef<"PricingPlan", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"PricingPlan", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PricingPlan", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PricingPlan findUnique
 */
export type PricingPlanFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * Filter, which PricingPlan to fetch.
   */
  where: Prisma.PricingPlanWhereUniqueInput
}

/**
 * PricingPlan findUniqueOrThrow
 */
export type PricingPlanFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * Filter, which PricingPlan to fetch.
   */
  where: Prisma.PricingPlanWhereUniqueInput
}

/**
 * PricingPlan findFirst
 */
export type PricingPlanFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * Filter, which PricingPlan to fetch.
   */
  where?: Prisma.PricingPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PricingPlans to fetch.
   */
  orderBy?: Prisma.PricingPlanOrderByWithRelationInput | Prisma.PricingPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PricingPlans.
   */
  cursor?: Prisma.PricingPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PricingPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PricingPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PricingPlans.
   */
  distinct?: Prisma.PricingPlanScalarFieldEnum | Prisma.PricingPlanScalarFieldEnum[]
}

/**
 * PricingPlan findFirstOrThrow
 */
export type PricingPlanFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * Filter, which PricingPlan to fetch.
   */
  where?: Prisma.PricingPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PricingPlans to fetch.
   */
  orderBy?: Prisma.PricingPlanOrderByWithRelationInput | Prisma.PricingPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PricingPlans.
   */
  cursor?: Prisma.PricingPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PricingPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PricingPlans.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PricingPlans.
   */
  distinct?: Prisma.PricingPlanScalarFieldEnum | Prisma.PricingPlanScalarFieldEnum[]
}

/**
 * PricingPlan findMany
 */
export type PricingPlanFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * Filter, which PricingPlans to fetch.
   */
  where?: Prisma.PricingPlanWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PricingPlans to fetch.
   */
  orderBy?: Prisma.PricingPlanOrderByWithRelationInput | Prisma.PricingPlanOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PricingPlans.
   */
  cursor?: Prisma.PricingPlanWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PricingPlans from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PricingPlans.
   */
  skip?: number
  distinct?: Prisma.PricingPlanScalarFieldEnum | Prisma.PricingPlanScalarFieldEnum[]
}

/**
 * PricingPlan create
 */
export type PricingPlanCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * The data needed to create a PricingPlan.
   */
  data: Prisma.XOR<Prisma.PricingPlanCreateInput, Prisma.PricingPlanUncheckedCreateInput>
}

/**
 * PricingPlan createMany
 */
export type PricingPlanCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PricingPlans.
   */
  data: Prisma.PricingPlanCreateManyInput | Prisma.PricingPlanCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PricingPlan createManyAndReturn
 */
export type PricingPlanCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * The data used to create many PricingPlans.
   */
  data: Prisma.PricingPlanCreateManyInput | Prisma.PricingPlanCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PricingPlan update
 */
export type PricingPlanUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * The data needed to update a PricingPlan.
   */
  data: Prisma.XOR<Prisma.PricingPlanUpdateInput, Prisma.PricingPlanUncheckedUpdateInput>
  /**
   * Choose, which PricingPlan to update.
   */
  where: Prisma.PricingPlanWhereUniqueInput
}

/**
 * PricingPlan updateMany
 */
export type PricingPlanUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PricingPlans.
   */
  data: Prisma.XOR<Prisma.PricingPlanUpdateManyMutationInput, Prisma.PricingPlanUncheckedUpdateManyInput>
  /**
   * Filter which PricingPlans to update
   */
  where?: Prisma.PricingPlanWhereInput
  /**
   * Limit how many PricingPlans to update.
   */
  limit?: number
}

/**
 * PricingPlan updateManyAndReturn
 */
export type PricingPlanUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * The data used to update PricingPlans.
   */
  data: Prisma.XOR<Prisma.PricingPlanUpdateManyMutationInput, Prisma.PricingPlanUncheckedUpdateManyInput>
  /**
   * Filter which PricingPlans to update
   */
  where?: Prisma.PricingPlanWhereInput
  /**
   * Limit how many PricingPlans to update.
   */
  limit?: number
}

/**
 * PricingPlan upsert
 */
export type PricingPlanUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * The filter to search for the PricingPlan to update in case it exists.
   */
  where: Prisma.PricingPlanWhereUniqueInput
  /**
   * In case the PricingPlan found by the `where` argument doesn't exist, create a new PricingPlan with this data.
   */
  create: Prisma.XOR<Prisma.PricingPlanCreateInput, Prisma.PricingPlanUncheckedCreateInput>
  /**
   * In case the PricingPlan was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PricingPlanUpdateInput, Prisma.PricingPlanUncheckedUpdateInput>
}

/**
 * PricingPlan delete
 */
export type PricingPlanDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
  /**
   * Filter which PricingPlan to delete.
   */
  where: Prisma.PricingPlanWhereUniqueInput
}

/**
 * PricingPlan deleteMany
 */
export type PricingPlanDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PricingPlans to delete
   */
  where?: Prisma.PricingPlanWhereInput
  /**
   * Limit how many PricingPlans to delete.
   */
  limit?: number
}

/**
 * PricingPlan.features
 */
export type PricingPlan$featuresArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  where?: Prisma.PricingFeatureWhereInput
  orderBy?: Prisma.PricingFeatureOrderByWithRelationInput | Prisma.PricingFeatureOrderByWithRelationInput[]
  cursor?: Prisma.PricingFeatureWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PricingFeatureScalarFieldEnum | Prisma.PricingFeatureScalarFieldEnum[]
}

/**
 * PricingPlan without action
 */
export type PricingPlanDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingPlan
   */
  select?: Prisma.PricingPlanSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingPlan
   */
  omit?: Prisma.PricingPlanOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingPlanInclude<ExtArgs> | null
}
