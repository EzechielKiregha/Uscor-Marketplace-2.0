
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `HardwareConfig` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model HardwareConfig
 * 
 */
export type HardwareConfigModel = runtime.Types.Result.DefaultSelection<Prisma.$HardwareConfigPayload>

export type AggregateHardwareConfig = {
  _count: HardwareConfigCountAggregateOutputType | null
  _min: HardwareConfigMinAggregateOutputType | null
  _max: HardwareConfigMaxAggregateOutputType | null
}

export type HardwareConfigMinAggregateOutputType = {
  id: string | null
  businessId: string | null
  receiptPrinter: string | null
  barcodeScanner: string | null
  cashDrawer: string | null
  cardReader: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HardwareConfigMaxAggregateOutputType = {
  id: string | null
  businessId: string | null
  receiptPrinter: string | null
  barcodeScanner: string | null
  cashDrawer: string | null
  cardReader: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HardwareConfigCountAggregateOutputType = {
  id: number
  businessId: number
  receiptPrinter: number
  barcodeScanner: number
  cashDrawer: number
  cardReader: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type HardwareConfigMinAggregateInputType = {
  id?: true
  businessId?: true
  receiptPrinter?: true
  barcodeScanner?: true
  cashDrawer?: true
  cardReader?: true
  createdAt?: true
  updatedAt?: true
}

export type HardwareConfigMaxAggregateInputType = {
  id?: true
  businessId?: true
  receiptPrinter?: true
  barcodeScanner?: true
  cashDrawer?: true
  cardReader?: true
  createdAt?: true
  updatedAt?: true
}

export type HardwareConfigCountAggregateInputType = {
  id?: true
  businessId?: true
  receiptPrinter?: true
  barcodeScanner?: true
  cashDrawer?: true
  cardReader?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type HardwareConfigAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which HardwareConfig to aggregate.
   */
  where?: Prisma.HardwareConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HardwareConfigs to fetch.
   */
  orderBy?: Prisma.HardwareConfigOrderByWithRelationInput | Prisma.HardwareConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.HardwareConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HardwareConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HardwareConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned HardwareConfigs
  **/
  _count?: true | HardwareConfigCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HardwareConfigMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HardwareConfigMaxAggregateInputType
}

export type GetHardwareConfigAggregateType<T extends HardwareConfigAggregateArgs> = {
      [P in keyof T & keyof AggregateHardwareConfig]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHardwareConfig[P]>
    : Prisma.GetScalarType<T[P], AggregateHardwareConfig[P]>
}




export type HardwareConfigGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HardwareConfigWhereInput
  orderBy?: Prisma.HardwareConfigOrderByWithAggregationInput | Prisma.HardwareConfigOrderByWithAggregationInput[]
  by: Prisma.HardwareConfigScalarFieldEnum[] | Prisma.HardwareConfigScalarFieldEnum
  having?: Prisma.HardwareConfigScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HardwareConfigCountAggregateInputType | true
  _min?: HardwareConfigMinAggregateInputType
  _max?: HardwareConfigMaxAggregateInputType
}

export type HardwareConfigGroupByOutputType = {
  id: string
  businessId: string
  receiptPrinter: string | null
  barcodeScanner: string | null
  cashDrawer: string | null
  cardReader: string | null
  createdAt: Date
  updatedAt: Date
  _count: HardwareConfigCountAggregateOutputType | null
  _min: HardwareConfigMinAggregateOutputType | null
  _max: HardwareConfigMaxAggregateOutputType | null
}

type GetHardwareConfigGroupByPayload<T extends HardwareConfigGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HardwareConfigGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HardwareConfigGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HardwareConfigGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HardwareConfigGroupByOutputType[P]>
      }
    >
  >



export type HardwareConfigWhereInput = {
  AND?: Prisma.HardwareConfigWhereInput | Prisma.HardwareConfigWhereInput[]
  OR?: Prisma.HardwareConfigWhereInput[]
  NOT?: Prisma.HardwareConfigWhereInput | Prisma.HardwareConfigWhereInput[]
  id?: Prisma.StringFilter<"HardwareConfig"> | string
  businessId?: Prisma.StringFilter<"HardwareConfig"> | string
  receiptPrinter?: Prisma.StringNullableFilter<"HardwareConfig"> | string | null
  barcodeScanner?: Prisma.StringNullableFilter<"HardwareConfig"> | string | null
  cashDrawer?: Prisma.StringNullableFilter<"HardwareConfig"> | string | null
  cardReader?: Prisma.StringNullableFilter<"HardwareConfig"> | string | null
  createdAt?: Prisma.DateTimeFilter<"HardwareConfig"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"HardwareConfig"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
}

export type HardwareConfigOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  receiptPrinter?: Prisma.SortOrderInput | Prisma.SortOrder
  barcodeScanner?: Prisma.SortOrderInput | Prisma.SortOrder
  cashDrawer?: Prisma.SortOrderInput | Prisma.SortOrder
  cardReader?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
}

export type HardwareConfigWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  businessId?: string
  AND?: Prisma.HardwareConfigWhereInput | Prisma.HardwareConfigWhereInput[]
  OR?: Prisma.HardwareConfigWhereInput[]
  NOT?: Prisma.HardwareConfigWhereInput | Prisma.HardwareConfigWhereInput[]
  receiptPrinter?: Prisma.StringNullableFilter<"HardwareConfig"> | string | null
  barcodeScanner?: Prisma.StringNullableFilter<"HardwareConfig"> | string | null
  cashDrawer?: Prisma.StringNullableFilter<"HardwareConfig"> | string | null
  cardReader?: Prisma.StringNullableFilter<"HardwareConfig"> | string | null
  createdAt?: Prisma.DateTimeFilter<"HardwareConfig"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"HardwareConfig"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
}, "id" | "businessId">

export type HardwareConfigOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  receiptPrinter?: Prisma.SortOrderInput | Prisma.SortOrder
  barcodeScanner?: Prisma.SortOrderInput | Prisma.SortOrder
  cashDrawer?: Prisma.SortOrderInput | Prisma.SortOrder
  cardReader?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.HardwareConfigCountOrderByAggregateInput
  _max?: Prisma.HardwareConfigMaxOrderByAggregateInput
  _min?: Prisma.HardwareConfigMinOrderByAggregateInput
}

export type HardwareConfigScalarWhereWithAggregatesInput = {
  AND?: Prisma.HardwareConfigScalarWhereWithAggregatesInput | Prisma.HardwareConfigScalarWhereWithAggregatesInput[]
  OR?: Prisma.HardwareConfigScalarWhereWithAggregatesInput[]
  NOT?: Prisma.HardwareConfigScalarWhereWithAggregatesInput | Prisma.HardwareConfigScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"HardwareConfig"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"HardwareConfig"> | string
  receiptPrinter?: Prisma.StringNullableWithAggregatesFilter<"HardwareConfig"> | string | null
  barcodeScanner?: Prisma.StringNullableWithAggregatesFilter<"HardwareConfig"> | string | null
  cashDrawer?: Prisma.StringNullableWithAggregatesFilter<"HardwareConfig"> | string | null
  cardReader?: Prisma.StringNullableWithAggregatesFilter<"HardwareConfig"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"HardwareConfig"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"HardwareConfig"> | Date | string
}

export type HardwareConfigCreateInput = {
  id?: string
  receiptPrinter?: string | null
  barcodeScanner?: string | null
  cashDrawer?: string | null
  cardReader?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutHardwareConfigInput
}

export type HardwareConfigUncheckedCreateInput = {
  id?: string
  businessId: string
  receiptPrinter?: string | null
  barcodeScanner?: string | null
  cashDrawer?: string | null
  cardReader?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HardwareConfigUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receiptPrinter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcodeScanner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cashDrawer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cardReader?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutHardwareConfigNestedInput
}

export type HardwareConfigUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  receiptPrinter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcodeScanner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cashDrawer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cardReader?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HardwareConfigCreateManyInput = {
  id?: string
  businessId: string
  receiptPrinter?: string | null
  barcodeScanner?: string | null
  cashDrawer?: string | null
  cardReader?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HardwareConfigUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receiptPrinter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcodeScanner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cashDrawer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cardReader?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HardwareConfigUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  receiptPrinter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcodeScanner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cashDrawer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cardReader?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HardwareConfigNullableScalarRelationFilter = {
  is?: Prisma.HardwareConfigWhereInput | null
  isNot?: Prisma.HardwareConfigWhereInput | null
}

export type HardwareConfigCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  receiptPrinter?: Prisma.SortOrder
  barcodeScanner?: Prisma.SortOrder
  cashDrawer?: Prisma.SortOrder
  cardReader?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HardwareConfigMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  receiptPrinter?: Prisma.SortOrder
  barcodeScanner?: Prisma.SortOrder
  cashDrawer?: Prisma.SortOrder
  cardReader?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HardwareConfigMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  receiptPrinter?: Prisma.SortOrder
  barcodeScanner?: Prisma.SortOrder
  cashDrawer?: Prisma.SortOrder
  cardReader?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HardwareConfigCreateNestedOneWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.HardwareConfigCreateWithoutBusinessInput, Prisma.HardwareConfigUncheckedCreateWithoutBusinessInput>
  connectOrCreate?: Prisma.HardwareConfigCreateOrConnectWithoutBusinessInput
  connect?: Prisma.HardwareConfigWhereUniqueInput
}

export type HardwareConfigUncheckedCreateNestedOneWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.HardwareConfigCreateWithoutBusinessInput, Prisma.HardwareConfigUncheckedCreateWithoutBusinessInput>
  connectOrCreate?: Prisma.HardwareConfigCreateOrConnectWithoutBusinessInput
  connect?: Prisma.HardwareConfigWhereUniqueInput
}

export type HardwareConfigUpdateOneWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.HardwareConfigCreateWithoutBusinessInput, Prisma.HardwareConfigUncheckedCreateWithoutBusinessInput>
  connectOrCreate?: Prisma.HardwareConfigCreateOrConnectWithoutBusinessInput
  upsert?: Prisma.HardwareConfigUpsertWithoutBusinessInput
  disconnect?: Prisma.HardwareConfigWhereInput | boolean
  delete?: Prisma.HardwareConfigWhereInput | boolean
  connect?: Prisma.HardwareConfigWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.HardwareConfigUpdateToOneWithWhereWithoutBusinessInput, Prisma.HardwareConfigUpdateWithoutBusinessInput>, Prisma.HardwareConfigUncheckedUpdateWithoutBusinessInput>
}

export type HardwareConfigUncheckedUpdateOneWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.HardwareConfigCreateWithoutBusinessInput, Prisma.HardwareConfigUncheckedCreateWithoutBusinessInput>
  connectOrCreate?: Prisma.HardwareConfigCreateOrConnectWithoutBusinessInput
  upsert?: Prisma.HardwareConfigUpsertWithoutBusinessInput
  disconnect?: Prisma.HardwareConfigWhereInput | boolean
  delete?: Prisma.HardwareConfigWhereInput | boolean
  connect?: Prisma.HardwareConfigWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.HardwareConfigUpdateToOneWithWhereWithoutBusinessInput, Prisma.HardwareConfigUpdateWithoutBusinessInput>, Prisma.HardwareConfigUncheckedUpdateWithoutBusinessInput>
}

export type HardwareConfigCreateWithoutBusinessInput = {
  id?: string
  receiptPrinter?: string | null
  barcodeScanner?: string | null
  cashDrawer?: string | null
  cardReader?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HardwareConfigUncheckedCreateWithoutBusinessInput = {
  id?: string
  receiptPrinter?: string | null
  barcodeScanner?: string | null
  cashDrawer?: string | null
  cardReader?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HardwareConfigCreateOrConnectWithoutBusinessInput = {
  where: Prisma.HardwareConfigWhereUniqueInput
  create: Prisma.XOR<Prisma.HardwareConfigCreateWithoutBusinessInput, Prisma.HardwareConfigUncheckedCreateWithoutBusinessInput>
}

export type HardwareConfigUpsertWithoutBusinessInput = {
  update: Prisma.XOR<Prisma.HardwareConfigUpdateWithoutBusinessInput, Prisma.HardwareConfigUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.HardwareConfigCreateWithoutBusinessInput, Prisma.HardwareConfigUncheckedCreateWithoutBusinessInput>
  where?: Prisma.HardwareConfigWhereInput
}

export type HardwareConfigUpdateToOneWithWhereWithoutBusinessInput = {
  where?: Prisma.HardwareConfigWhereInput
  data: Prisma.XOR<Prisma.HardwareConfigUpdateWithoutBusinessInput, Prisma.HardwareConfigUncheckedUpdateWithoutBusinessInput>
}

export type HardwareConfigUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receiptPrinter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcodeScanner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cashDrawer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cardReader?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HardwareConfigUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  receiptPrinter?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  barcodeScanner?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cashDrawer?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cardReader?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type HardwareConfigSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  receiptPrinter?: boolean
  barcodeScanner?: boolean
  cashDrawer?: boolean
  cardReader?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hardwareConfig"]>

export type HardwareConfigSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  receiptPrinter?: boolean
  barcodeScanner?: boolean
  cashDrawer?: boolean
  cardReader?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hardwareConfig"]>

export type HardwareConfigSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  receiptPrinter?: boolean
  barcodeScanner?: boolean
  cashDrawer?: boolean
  cardReader?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["hardwareConfig"]>

export type HardwareConfigSelectScalar = {
  id?: boolean
  businessId?: boolean
  receiptPrinter?: boolean
  barcodeScanner?: boolean
  cashDrawer?: boolean
  cardReader?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type HardwareConfigOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "businessId" | "receiptPrinter" | "barcodeScanner" | "cashDrawer" | "cardReader" | "createdAt" | "updatedAt", ExtArgs["result"]["hardwareConfig"]>
export type HardwareConfigInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type HardwareConfigIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type HardwareConfigIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}

export type $HardwareConfigPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "HardwareConfig"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    businessId: string
    receiptPrinter: string | null
    barcodeScanner: string | null
    cashDrawer: string | null
    cardReader: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["hardwareConfig"]>
  composites: {}
}

export type HardwareConfigGetPayload<S extends boolean | null | undefined | HardwareConfigDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload, S>

export type HardwareConfigCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<HardwareConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HardwareConfigCountAggregateInputType | true
  }

export interface HardwareConfigDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HardwareConfig'], meta: { name: 'HardwareConfig' } }
  /**
   * Find zero or one HardwareConfig that matches the filter.
   * @param {HardwareConfigFindUniqueArgs} args - Arguments to find a HardwareConfig
   * @example
   * // Get one HardwareConfig
   * const hardwareConfig = await prisma.hardwareConfig.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HardwareConfigFindUniqueArgs>(args: Prisma.SelectSubset<T, HardwareConfigFindUniqueArgs<ExtArgs>>): Prisma.Prisma__HardwareConfigClient<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one HardwareConfig that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HardwareConfigFindUniqueOrThrowArgs} args - Arguments to find a HardwareConfig
   * @example
   * // Get one HardwareConfig
   * const hardwareConfig = await prisma.hardwareConfig.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HardwareConfigFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, HardwareConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__HardwareConfigClient<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first HardwareConfig that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HardwareConfigFindFirstArgs} args - Arguments to find a HardwareConfig
   * @example
   * // Get one HardwareConfig
   * const hardwareConfig = await prisma.hardwareConfig.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HardwareConfigFindFirstArgs>(args?: Prisma.SelectSubset<T, HardwareConfigFindFirstArgs<ExtArgs>>): Prisma.Prisma__HardwareConfigClient<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first HardwareConfig that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HardwareConfigFindFirstOrThrowArgs} args - Arguments to find a HardwareConfig
   * @example
   * // Get one HardwareConfig
   * const hardwareConfig = await prisma.hardwareConfig.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HardwareConfigFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, HardwareConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__HardwareConfigClient<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more HardwareConfigs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HardwareConfigFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HardwareConfigs
   * const hardwareConfigs = await prisma.hardwareConfig.findMany()
   * 
   * // Get first 10 HardwareConfigs
   * const hardwareConfigs = await prisma.hardwareConfig.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const hardwareConfigWithIdOnly = await prisma.hardwareConfig.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends HardwareConfigFindManyArgs>(args?: Prisma.SelectSubset<T, HardwareConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a HardwareConfig.
   * @param {HardwareConfigCreateArgs} args - Arguments to create a HardwareConfig.
   * @example
   * // Create one HardwareConfig
   * const HardwareConfig = await prisma.hardwareConfig.create({
   *   data: {
   *     // ... data to create a HardwareConfig
   *   }
   * })
   * 
   */
  create<T extends HardwareConfigCreateArgs>(args: Prisma.SelectSubset<T, HardwareConfigCreateArgs<ExtArgs>>): Prisma.Prisma__HardwareConfigClient<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many HardwareConfigs.
   * @param {HardwareConfigCreateManyArgs} args - Arguments to create many HardwareConfigs.
   * @example
   * // Create many HardwareConfigs
   * const hardwareConfig = await prisma.hardwareConfig.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends HardwareConfigCreateManyArgs>(args?: Prisma.SelectSubset<T, HardwareConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many HardwareConfigs and returns the data saved in the database.
   * @param {HardwareConfigCreateManyAndReturnArgs} args - Arguments to create many HardwareConfigs.
   * @example
   * // Create many HardwareConfigs
   * const hardwareConfig = await prisma.hardwareConfig.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many HardwareConfigs and only return the `id`
   * const hardwareConfigWithIdOnly = await prisma.hardwareConfig.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends HardwareConfigCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, HardwareConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a HardwareConfig.
   * @param {HardwareConfigDeleteArgs} args - Arguments to delete one HardwareConfig.
   * @example
   * // Delete one HardwareConfig
   * const HardwareConfig = await prisma.hardwareConfig.delete({
   *   where: {
   *     // ... filter to delete one HardwareConfig
   *   }
   * })
   * 
   */
  delete<T extends HardwareConfigDeleteArgs>(args: Prisma.SelectSubset<T, HardwareConfigDeleteArgs<ExtArgs>>): Prisma.Prisma__HardwareConfigClient<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one HardwareConfig.
   * @param {HardwareConfigUpdateArgs} args - Arguments to update one HardwareConfig.
   * @example
   * // Update one HardwareConfig
   * const hardwareConfig = await prisma.hardwareConfig.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends HardwareConfigUpdateArgs>(args: Prisma.SelectSubset<T, HardwareConfigUpdateArgs<ExtArgs>>): Prisma.Prisma__HardwareConfigClient<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more HardwareConfigs.
   * @param {HardwareConfigDeleteManyArgs} args - Arguments to filter HardwareConfigs to delete.
   * @example
   * // Delete a few HardwareConfigs
   * const { count } = await prisma.hardwareConfig.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends HardwareConfigDeleteManyArgs>(args?: Prisma.SelectSubset<T, HardwareConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more HardwareConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HardwareConfigUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HardwareConfigs
   * const hardwareConfig = await prisma.hardwareConfig.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends HardwareConfigUpdateManyArgs>(args: Prisma.SelectSubset<T, HardwareConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more HardwareConfigs and returns the data updated in the database.
   * @param {HardwareConfigUpdateManyAndReturnArgs} args - Arguments to update many HardwareConfigs.
   * @example
   * // Update many HardwareConfigs
   * const hardwareConfig = await prisma.hardwareConfig.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more HardwareConfigs and only return the `id`
   * const hardwareConfigWithIdOnly = await prisma.hardwareConfig.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends HardwareConfigUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, HardwareConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one HardwareConfig.
   * @param {HardwareConfigUpsertArgs} args - Arguments to update or create a HardwareConfig.
   * @example
   * // Update or create a HardwareConfig
   * const hardwareConfig = await prisma.hardwareConfig.upsert({
   *   create: {
   *     // ... data to create a HardwareConfig
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HardwareConfig we want to update
   *   }
   * })
   */
  upsert<T extends HardwareConfigUpsertArgs>(args: Prisma.SelectSubset<T, HardwareConfigUpsertArgs<ExtArgs>>): Prisma.Prisma__HardwareConfigClient<runtime.Types.Result.GetResult<Prisma.$HardwareConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of HardwareConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HardwareConfigCountArgs} args - Arguments to filter HardwareConfigs to count.
   * @example
   * // Count the number of HardwareConfigs
   * const count = await prisma.hardwareConfig.count({
   *   where: {
   *     // ... the filter for the HardwareConfigs we want to count
   *   }
   * })
  **/
  count<T extends HardwareConfigCountArgs>(
    args?: Prisma.Subset<T, HardwareConfigCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HardwareConfigCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a HardwareConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HardwareConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HardwareConfigAggregateArgs>(args: Prisma.Subset<T, HardwareConfigAggregateArgs>): Prisma.PrismaPromise<GetHardwareConfigAggregateType<T>>

  /**
   * Group by HardwareConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HardwareConfigGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends HardwareConfigGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HardwareConfigGroupByArgs['orderBy'] }
      : { orderBy?: HardwareConfigGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, HardwareConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHardwareConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the HardwareConfig model
 */
readonly fields: HardwareConfigFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HardwareConfig.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HardwareConfigClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the HardwareConfig model
 */
export interface HardwareConfigFieldRefs {
  readonly id: Prisma.FieldRef<"HardwareConfig", 'String'>
  readonly businessId: Prisma.FieldRef<"HardwareConfig", 'String'>
  readonly receiptPrinter: Prisma.FieldRef<"HardwareConfig", 'String'>
  readonly barcodeScanner: Prisma.FieldRef<"HardwareConfig", 'String'>
  readonly cashDrawer: Prisma.FieldRef<"HardwareConfig", 'String'>
  readonly cardReader: Prisma.FieldRef<"HardwareConfig", 'String'>
  readonly createdAt: Prisma.FieldRef<"HardwareConfig", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"HardwareConfig", 'DateTime'>
}
    

// Custom InputTypes
/**
 * HardwareConfig findUnique
 */
export type HardwareConfigFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * Filter, which HardwareConfig to fetch.
   */
  where: Prisma.HardwareConfigWhereUniqueInput
}

/**
 * HardwareConfig findUniqueOrThrow
 */
export type HardwareConfigFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * Filter, which HardwareConfig to fetch.
   */
  where: Prisma.HardwareConfigWhereUniqueInput
}

/**
 * HardwareConfig findFirst
 */
export type HardwareConfigFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * Filter, which HardwareConfig to fetch.
   */
  where?: Prisma.HardwareConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HardwareConfigs to fetch.
   */
  orderBy?: Prisma.HardwareConfigOrderByWithRelationInput | Prisma.HardwareConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for HardwareConfigs.
   */
  cursor?: Prisma.HardwareConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HardwareConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HardwareConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of HardwareConfigs.
   */
  distinct?: Prisma.HardwareConfigScalarFieldEnum | Prisma.HardwareConfigScalarFieldEnum[]
}

/**
 * HardwareConfig findFirstOrThrow
 */
export type HardwareConfigFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * Filter, which HardwareConfig to fetch.
   */
  where?: Prisma.HardwareConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HardwareConfigs to fetch.
   */
  orderBy?: Prisma.HardwareConfigOrderByWithRelationInput | Prisma.HardwareConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for HardwareConfigs.
   */
  cursor?: Prisma.HardwareConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HardwareConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HardwareConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of HardwareConfigs.
   */
  distinct?: Prisma.HardwareConfigScalarFieldEnum | Prisma.HardwareConfigScalarFieldEnum[]
}

/**
 * HardwareConfig findMany
 */
export type HardwareConfigFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * Filter, which HardwareConfigs to fetch.
   */
  where?: Prisma.HardwareConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HardwareConfigs to fetch.
   */
  orderBy?: Prisma.HardwareConfigOrderByWithRelationInput | Prisma.HardwareConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing HardwareConfigs.
   */
  cursor?: Prisma.HardwareConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HardwareConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HardwareConfigs.
   */
  skip?: number
  distinct?: Prisma.HardwareConfigScalarFieldEnum | Prisma.HardwareConfigScalarFieldEnum[]
}

/**
 * HardwareConfig create
 */
export type HardwareConfigCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * The data needed to create a HardwareConfig.
   */
  data: Prisma.XOR<Prisma.HardwareConfigCreateInput, Prisma.HardwareConfigUncheckedCreateInput>
}

/**
 * HardwareConfig createMany
 */
export type HardwareConfigCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many HardwareConfigs.
   */
  data: Prisma.HardwareConfigCreateManyInput | Prisma.HardwareConfigCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * HardwareConfig createManyAndReturn
 */
export type HardwareConfigCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * The data used to create many HardwareConfigs.
   */
  data: Prisma.HardwareConfigCreateManyInput | Prisma.HardwareConfigCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * HardwareConfig update
 */
export type HardwareConfigUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * The data needed to update a HardwareConfig.
   */
  data: Prisma.XOR<Prisma.HardwareConfigUpdateInput, Prisma.HardwareConfigUncheckedUpdateInput>
  /**
   * Choose, which HardwareConfig to update.
   */
  where: Prisma.HardwareConfigWhereUniqueInput
}

/**
 * HardwareConfig updateMany
 */
export type HardwareConfigUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update HardwareConfigs.
   */
  data: Prisma.XOR<Prisma.HardwareConfigUpdateManyMutationInput, Prisma.HardwareConfigUncheckedUpdateManyInput>
  /**
   * Filter which HardwareConfigs to update
   */
  where?: Prisma.HardwareConfigWhereInput
  /**
   * Limit how many HardwareConfigs to update.
   */
  limit?: number
}

/**
 * HardwareConfig updateManyAndReturn
 */
export type HardwareConfigUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * The data used to update HardwareConfigs.
   */
  data: Prisma.XOR<Prisma.HardwareConfigUpdateManyMutationInput, Prisma.HardwareConfigUncheckedUpdateManyInput>
  /**
   * Filter which HardwareConfigs to update
   */
  where?: Prisma.HardwareConfigWhereInput
  /**
   * Limit how many HardwareConfigs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * HardwareConfig upsert
 */
export type HardwareConfigUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * The filter to search for the HardwareConfig to update in case it exists.
   */
  where: Prisma.HardwareConfigWhereUniqueInput
  /**
   * In case the HardwareConfig found by the `where` argument doesn't exist, create a new HardwareConfig with this data.
   */
  create: Prisma.XOR<Prisma.HardwareConfigCreateInput, Prisma.HardwareConfigUncheckedCreateInput>
  /**
   * In case the HardwareConfig was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HardwareConfigUpdateInput, Prisma.HardwareConfigUncheckedUpdateInput>
}

/**
 * HardwareConfig delete
 */
export type HardwareConfigDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
  /**
   * Filter which HardwareConfig to delete.
   */
  where: Prisma.HardwareConfigWhereUniqueInput
}

/**
 * HardwareConfig deleteMany
 */
export type HardwareConfigDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which HardwareConfigs to delete
   */
  where?: Prisma.HardwareConfigWhereInput
  /**
   * Limit how many HardwareConfigs to delete.
   */
  limit?: number
}

/**
 * HardwareConfig without action
 */
export type HardwareConfigDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HardwareConfig
   */
  select?: Prisma.HardwareConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HardwareConfig
   */
  omit?: Prisma.HardwareConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HardwareConfigInclude<ExtArgs> | null
}
