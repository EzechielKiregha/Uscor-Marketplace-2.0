
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PricingFeature` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PricingFeature
 * 
 */
export type PricingFeatureModel = runtime.Types.Result.DefaultSelection<Prisma.$PricingFeaturePayload>

export type AggregatePricingFeature = {
  _count: PricingFeatureCountAggregateOutputType | null
  _min: PricingFeatureMinAggregateOutputType | null
  _max: PricingFeatureMaxAggregateOutputType | null
}

export type PricingFeatureMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  planId: string | null
}

export type PricingFeatureMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  planId: string | null
}

export type PricingFeatureCountAggregateOutputType = {
  id: number
  name: number
  description: number
  planId: number
  _all: number
}


export type PricingFeatureMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  planId?: true
}

export type PricingFeatureMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  planId?: true
}

export type PricingFeatureCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  planId?: true
  _all?: true
}

export type PricingFeatureAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PricingFeature to aggregate.
   */
  where?: Prisma.PricingFeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PricingFeatures to fetch.
   */
  orderBy?: Prisma.PricingFeatureOrderByWithRelationInput | Prisma.PricingFeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PricingFeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PricingFeatures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PricingFeatures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PricingFeatures
  **/
  _count?: true | PricingFeatureCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PricingFeatureMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PricingFeatureMaxAggregateInputType
}

export type GetPricingFeatureAggregateType<T extends PricingFeatureAggregateArgs> = {
      [P in keyof T & keyof AggregatePricingFeature]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePricingFeature[P]>
    : Prisma.GetScalarType<T[P], AggregatePricingFeature[P]>
}




export type PricingFeatureGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PricingFeatureWhereInput
  orderBy?: Prisma.PricingFeatureOrderByWithAggregationInput | Prisma.PricingFeatureOrderByWithAggregationInput[]
  by: Prisma.PricingFeatureScalarFieldEnum[] | Prisma.PricingFeatureScalarFieldEnum
  having?: Prisma.PricingFeatureScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PricingFeatureCountAggregateInputType | true
  _min?: PricingFeatureMinAggregateInputType
  _max?: PricingFeatureMaxAggregateInputType
}

export type PricingFeatureGroupByOutputType = {
  id: string
  name: string
  description: string | null
  planId: string
  _count: PricingFeatureCountAggregateOutputType | null
  _min: PricingFeatureMinAggregateOutputType | null
  _max: PricingFeatureMaxAggregateOutputType | null
}

type GetPricingFeatureGroupByPayload<T extends PricingFeatureGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PricingFeatureGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PricingFeatureGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PricingFeatureGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PricingFeatureGroupByOutputType[P]>
      }
    >
  >



export type PricingFeatureWhereInput = {
  AND?: Prisma.PricingFeatureWhereInput | Prisma.PricingFeatureWhereInput[]
  OR?: Prisma.PricingFeatureWhereInput[]
  NOT?: Prisma.PricingFeatureWhereInput | Prisma.PricingFeatureWhereInput[]
  id?: Prisma.StringFilter<"PricingFeature"> | string
  name?: Prisma.StringFilter<"PricingFeature"> | string
  description?: Prisma.StringNullableFilter<"PricingFeature"> | string | null
  planId?: Prisma.StringFilter<"PricingFeature"> | string
  plan?: Prisma.XOR<Prisma.PricingPlanScalarRelationFilter, Prisma.PricingPlanWhereInput>
}

export type PricingFeatureOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  planId?: Prisma.SortOrder
  plan?: Prisma.PricingPlanOrderByWithRelationInput
}

export type PricingFeatureWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PricingFeatureWhereInput | Prisma.PricingFeatureWhereInput[]
  OR?: Prisma.PricingFeatureWhereInput[]
  NOT?: Prisma.PricingFeatureWhereInput | Prisma.PricingFeatureWhereInput[]
  name?: Prisma.StringFilter<"PricingFeature"> | string
  description?: Prisma.StringNullableFilter<"PricingFeature"> | string | null
  planId?: Prisma.StringFilter<"PricingFeature"> | string
  plan?: Prisma.XOR<Prisma.PricingPlanScalarRelationFilter, Prisma.PricingPlanWhereInput>
}, "id">

export type PricingFeatureOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  planId?: Prisma.SortOrder
  _count?: Prisma.PricingFeatureCountOrderByAggregateInput
  _max?: Prisma.PricingFeatureMaxOrderByAggregateInput
  _min?: Prisma.PricingFeatureMinOrderByAggregateInput
}

export type PricingFeatureScalarWhereWithAggregatesInput = {
  AND?: Prisma.PricingFeatureScalarWhereWithAggregatesInput | Prisma.PricingFeatureScalarWhereWithAggregatesInput[]
  OR?: Prisma.PricingFeatureScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PricingFeatureScalarWhereWithAggregatesInput | Prisma.PricingFeatureScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PricingFeature"> | string
  name?: Prisma.StringWithAggregatesFilter<"PricingFeature"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"PricingFeature"> | string | null
  planId?: Prisma.StringWithAggregatesFilter<"PricingFeature"> | string
}

export type PricingFeatureCreateInput = {
  id?: string
  name: string
  description?: string | null
  plan: Prisma.PricingPlanCreateNestedOneWithoutFeaturesInput
}

export type PricingFeatureUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  planId: string
}

export type PricingFeatureUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  plan?: Prisma.PricingPlanUpdateOneRequiredWithoutFeaturesNestedInput
}

export type PricingFeatureUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  planId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PricingFeatureCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  planId: string
}

export type PricingFeatureUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PricingFeatureUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  planId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PricingFeatureListRelationFilter = {
  every?: Prisma.PricingFeatureWhereInput
  some?: Prisma.PricingFeatureWhereInput
  none?: Prisma.PricingFeatureWhereInput
}

export type PricingFeatureOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PricingFeatureCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  planId?: Prisma.SortOrder
}

export type PricingFeatureMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  planId?: Prisma.SortOrder
}

export type PricingFeatureMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  planId?: Prisma.SortOrder
}

export type PricingFeatureCreateNestedManyWithoutPlanInput = {
  create?: Prisma.XOR<Prisma.PricingFeatureCreateWithoutPlanInput, Prisma.PricingFeatureUncheckedCreateWithoutPlanInput> | Prisma.PricingFeatureCreateWithoutPlanInput[] | Prisma.PricingFeatureUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.PricingFeatureCreateOrConnectWithoutPlanInput | Prisma.PricingFeatureCreateOrConnectWithoutPlanInput[]
  createMany?: Prisma.PricingFeatureCreateManyPlanInputEnvelope
  connect?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
}

export type PricingFeatureUncheckedCreateNestedManyWithoutPlanInput = {
  create?: Prisma.XOR<Prisma.PricingFeatureCreateWithoutPlanInput, Prisma.PricingFeatureUncheckedCreateWithoutPlanInput> | Prisma.PricingFeatureCreateWithoutPlanInput[] | Prisma.PricingFeatureUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.PricingFeatureCreateOrConnectWithoutPlanInput | Prisma.PricingFeatureCreateOrConnectWithoutPlanInput[]
  createMany?: Prisma.PricingFeatureCreateManyPlanInputEnvelope
  connect?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
}

export type PricingFeatureUpdateManyWithoutPlanNestedInput = {
  create?: Prisma.XOR<Prisma.PricingFeatureCreateWithoutPlanInput, Prisma.PricingFeatureUncheckedCreateWithoutPlanInput> | Prisma.PricingFeatureCreateWithoutPlanInput[] | Prisma.PricingFeatureUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.PricingFeatureCreateOrConnectWithoutPlanInput | Prisma.PricingFeatureCreateOrConnectWithoutPlanInput[]
  upsert?: Prisma.PricingFeatureUpsertWithWhereUniqueWithoutPlanInput | Prisma.PricingFeatureUpsertWithWhereUniqueWithoutPlanInput[]
  createMany?: Prisma.PricingFeatureCreateManyPlanInputEnvelope
  set?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
  disconnect?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
  delete?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
  connect?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
  update?: Prisma.PricingFeatureUpdateWithWhereUniqueWithoutPlanInput | Prisma.PricingFeatureUpdateWithWhereUniqueWithoutPlanInput[]
  updateMany?: Prisma.PricingFeatureUpdateManyWithWhereWithoutPlanInput | Prisma.PricingFeatureUpdateManyWithWhereWithoutPlanInput[]
  deleteMany?: Prisma.PricingFeatureScalarWhereInput | Prisma.PricingFeatureScalarWhereInput[]
}

export type PricingFeatureUncheckedUpdateManyWithoutPlanNestedInput = {
  create?: Prisma.XOR<Prisma.PricingFeatureCreateWithoutPlanInput, Prisma.PricingFeatureUncheckedCreateWithoutPlanInput> | Prisma.PricingFeatureCreateWithoutPlanInput[] | Prisma.PricingFeatureUncheckedCreateWithoutPlanInput[]
  connectOrCreate?: Prisma.PricingFeatureCreateOrConnectWithoutPlanInput | Prisma.PricingFeatureCreateOrConnectWithoutPlanInput[]
  upsert?: Prisma.PricingFeatureUpsertWithWhereUniqueWithoutPlanInput | Prisma.PricingFeatureUpsertWithWhereUniqueWithoutPlanInput[]
  createMany?: Prisma.PricingFeatureCreateManyPlanInputEnvelope
  set?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
  disconnect?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
  delete?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
  connect?: Prisma.PricingFeatureWhereUniqueInput | Prisma.PricingFeatureWhereUniqueInput[]
  update?: Prisma.PricingFeatureUpdateWithWhereUniqueWithoutPlanInput | Prisma.PricingFeatureUpdateWithWhereUniqueWithoutPlanInput[]
  updateMany?: Prisma.PricingFeatureUpdateManyWithWhereWithoutPlanInput | Prisma.PricingFeatureUpdateManyWithWhereWithoutPlanInput[]
  deleteMany?: Prisma.PricingFeatureScalarWhereInput | Prisma.PricingFeatureScalarWhereInput[]
}

export type PricingFeatureCreateWithoutPlanInput = {
  id?: string
  name: string
  description?: string | null
}

export type PricingFeatureUncheckedCreateWithoutPlanInput = {
  id?: string
  name: string
  description?: string | null
}

export type PricingFeatureCreateOrConnectWithoutPlanInput = {
  where: Prisma.PricingFeatureWhereUniqueInput
  create: Prisma.XOR<Prisma.PricingFeatureCreateWithoutPlanInput, Prisma.PricingFeatureUncheckedCreateWithoutPlanInput>
}

export type PricingFeatureCreateManyPlanInputEnvelope = {
  data: Prisma.PricingFeatureCreateManyPlanInput | Prisma.PricingFeatureCreateManyPlanInput[]
  skipDuplicates?: boolean
}

export type PricingFeatureUpsertWithWhereUniqueWithoutPlanInput = {
  where: Prisma.PricingFeatureWhereUniqueInput
  update: Prisma.XOR<Prisma.PricingFeatureUpdateWithoutPlanInput, Prisma.PricingFeatureUncheckedUpdateWithoutPlanInput>
  create: Prisma.XOR<Prisma.PricingFeatureCreateWithoutPlanInput, Prisma.PricingFeatureUncheckedCreateWithoutPlanInput>
}

export type PricingFeatureUpdateWithWhereUniqueWithoutPlanInput = {
  where: Prisma.PricingFeatureWhereUniqueInput
  data: Prisma.XOR<Prisma.PricingFeatureUpdateWithoutPlanInput, Prisma.PricingFeatureUncheckedUpdateWithoutPlanInput>
}

export type PricingFeatureUpdateManyWithWhereWithoutPlanInput = {
  where: Prisma.PricingFeatureScalarWhereInput
  data: Prisma.XOR<Prisma.PricingFeatureUpdateManyMutationInput, Prisma.PricingFeatureUncheckedUpdateManyWithoutPlanInput>
}

export type PricingFeatureScalarWhereInput = {
  AND?: Prisma.PricingFeatureScalarWhereInput | Prisma.PricingFeatureScalarWhereInput[]
  OR?: Prisma.PricingFeatureScalarWhereInput[]
  NOT?: Prisma.PricingFeatureScalarWhereInput | Prisma.PricingFeatureScalarWhereInput[]
  id?: Prisma.StringFilter<"PricingFeature"> | string
  name?: Prisma.StringFilter<"PricingFeature"> | string
  description?: Prisma.StringNullableFilter<"PricingFeature"> | string | null
  planId?: Prisma.StringFilter<"PricingFeature"> | string
}

export type PricingFeatureCreateManyPlanInput = {
  id?: string
  name: string
  description?: string | null
}

export type PricingFeatureUpdateWithoutPlanInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PricingFeatureUncheckedUpdateWithoutPlanInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PricingFeatureUncheckedUpdateManyWithoutPlanInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type PricingFeatureSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  planId?: boolean
  plan?: boolean | Prisma.PricingPlanDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pricingFeature"]>

export type PricingFeatureSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  planId?: boolean
  plan?: boolean | Prisma.PricingPlanDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pricingFeature"]>

export type PricingFeatureSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  planId?: boolean
  plan?: boolean | Prisma.PricingPlanDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pricingFeature"]>

export type PricingFeatureSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  planId?: boolean
}

export type PricingFeatureOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "planId", ExtArgs["result"]["pricingFeature"]>
export type PricingFeatureInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plan?: boolean | Prisma.PricingPlanDefaultArgs<ExtArgs>
}
export type PricingFeatureIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plan?: boolean | Prisma.PricingPlanDefaultArgs<ExtArgs>
}
export type PricingFeatureIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  plan?: boolean | Prisma.PricingPlanDefaultArgs<ExtArgs>
}

export type $PricingFeaturePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PricingFeature"
  objects: {
    plan: Prisma.$PricingPlanPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    planId: string
  }, ExtArgs["result"]["pricingFeature"]>
  composites: {}
}

export type PricingFeatureGetPayload<S extends boolean | null | undefined | PricingFeatureDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload, S>

export type PricingFeatureCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PricingFeatureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PricingFeatureCountAggregateInputType | true
  }

export interface PricingFeatureDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PricingFeature'], meta: { name: 'PricingFeature' } }
  /**
   * Find zero or one PricingFeature that matches the filter.
   * @param {PricingFeatureFindUniqueArgs} args - Arguments to find a PricingFeature
   * @example
   * // Get one PricingFeature
   * const pricingFeature = await prisma.pricingFeature.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PricingFeatureFindUniqueArgs>(args: Prisma.SelectSubset<T, PricingFeatureFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PricingFeatureClient<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PricingFeature that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PricingFeatureFindUniqueOrThrowArgs} args - Arguments to find a PricingFeature
   * @example
   * // Get one PricingFeature
   * const pricingFeature = await prisma.pricingFeature.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PricingFeatureFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PricingFeatureFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PricingFeatureClient<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PricingFeature that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingFeatureFindFirstArgs} args - Arguments to find a PricingFeature
   * @example
   * // Get one PricingFeature
   * const pricingFeature = await prisma.pricingFeature.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PricingFeatureFindFirstArgs>(args?: Prisma.SelectSubset<T, PricingFeatureFindFirstArgs<ExtArgs>>): Prisma.Prisma__PricingFeatureClient<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PricingFeature that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingFeatureFindFirstOrThrowArgs} args - Arguments to find a PricingFeature
   * @example
   * // Get one PricingFeature
   * const pricingFeature = await prisma.pricingFeature.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PricingFeatureFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PricingFeatureFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PricingFeatureClient<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PricingFeatures that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingFeatureFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PricingFeatures
   * const pricingFeatures = await prisma.pricingFeature.findMany()
   * 
   * // Get first 10 PricingFeatures
   * const pricingFeatures = await prisma.pricingFeature.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pricingFeatureWithIdOnly = await prisma.pricingFeature.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PricingFeatureFindManyArgs>(args?: Prisma.SelectSubset<T, PricingFeatureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PricingFeature.
   * @param {PricingFeatureCreateArgs} args - Arguments to create a PricingFeature.
   * @example
   * // Create one PricingFeature
   * const PricingFeature = await prisma.pricingFeature.create({
   *   data: {
   *     // ... data to create a PricingFeature
   *   }
   * })
   * 
   */
  create<T extends PricingFeatureCreateArgs>(args: Prisma.SelectSubset<T, PricingFeatureCreateArgs<ExtArgs>>): Prisma.Prisma__PricingFeatureClient<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PricingFeatures.
   * @param {PricingFeatureCreateManyArgs} args - Arguments to create many PricingFeatures.
   * @example
   * // Create many PricingFeatures
   * const pricingFeature = await prisma.pricingFeature.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PricingFeatureCreateManyArgs>(args?: Prisma.SelectSubset<T, PricingFeatureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PricingFeatures and returns the data saved in the database.
   * @param {PricingFeatureCreateManyAndReturnArgs} args - Arguments to create many PricingFeatures.
   * @example
   * // Create many PricingFeatures
   * const pricingFeature = await prisma.pricingFeature.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PricingFeatures and only return the `id`
   * const pricingFeatureWithIdOnly = await prisma.pricingFeature.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PricingFeatureCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PricingFeatureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PricingFeature.
   * @param {PricingFeatureDeleteArgs} args - Arguments to delete one PricingFeature.
   * @example
   * // Delete one PricingFeature
   * const PricingFeature = await prisma.pricingFeature.delete({
   *   where: {
   *     // ... filter to delete one PricingFeature
   *   }
   * })
   * 
   */
  delete<T extends PricingFeatureDeleteArgs>(args: Prisma.SelectSubset<T, PricingFeatureDeleteArgs<ExtArgs>>): Prisma.Prisma__PricingFeatureClient<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PricingFeature.
   * @param {PricingFeatureUpdateArgs} args - Arguments to update one PricingFeature.
   * @example
   * // Update one PricingFeature
   * const pricingFeature = await prisma.pricingFeature.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PricingFeatureUpdateArgs>(args: Prisma.SelectSubset<T, PricingFeatureUpdateArgs<ExtArgs>>): Prisma.Prisma__PricingFeatureClient<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PricingFeatures.
   * @param {PricingFeatureDeleteManyArgs} args - Arguments to filter PricingFeatures to delete.
   * @example
   * // Delete a few PricingFeatures
   * const { count } = await prisma.pricingFeature.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PricingFeatureDeleteManyArgs>(args?: Prisma.SelectSubset<T, PricingFeatureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PricingFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingFeatureUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PricingFeatures
   * const pricingFeature = await prisma.pricingFeature.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PricingFeatureUpdateManyArgs>(args: Prisma.SelectSubset<T, PricingFeatureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PricingFeatures and returns the data updated in the database.
   * @param {PricingFeatureUpdateManyAndReturnArgs} args - Arguments to update many PricingFeatures.
   * @example
   * // Update many PricingFeatures
   * const pricingFeature = await prisma.pricingFeature.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PricingFeatures and only return the `id`
   * const pricingFeatureWithIdOnly = await prisma.pricingFeature.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PricingFeatureUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PricingFeatureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PricingFeature.
   * @param {PricingFeatureUpsertArgs} args - Arguments to update or create a PricingFeature.
   * @example
   * // Update or create a PricingFeature
   * const pricingFeature = await prisma.pricingFeature.upsert({
   *   create: {
   *     // ... data to create a PricingFeature
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PricingFeature we want to update
   *   }
   * })
   */
  upsert<T extends PricingFeatureUpsertArgs>(args: Prisma.SelectSubset<T, PricingFeatureUpsertArgs<ExtArgs>>): Prisma.Prisma__PricingFeatureClient<runtime.Types.Result.GetResult<Prisma.$PricingFeaturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PricingFeatures.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingFeatureCountArgs} args - Arguments to filter PricingFeatures to count.
   * @example
   * // Count the number of PricingFeatures
   * const count = await prisma.pricingFeature.count({
   *   where: {
   *     // ... the filter for the PricingFeatures we want to count
   *   }
   * })
  **/
  count<T extends PricingFeatureCountArgs>(
    args?: Prisma.Subset<T, PricingFeatureCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PricingFeatureCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PricingFeature.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingFeatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PricingFeatureAggregateArgs>(args: Prisma.Subset<T, PricingFeatureAggregateArgs>): Prisma.PrismaPromise<GetPricingFeatureAggregateType<T>>

  /**
   * Group by PricingFeature.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PricingFeatureGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PricingFeatureGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PricingFeatureGroupByArgs['orderBy'] }
      : { orderBy?: PricingFeatureGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PricingFeatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPricingFeatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PricingFeature model
 */
readonly fields: PricingFeatureFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PricingFeature.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PricingFeatureClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  plan<T extends Prisma.PricingPlanDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PricingPlanDefaultArgs<ExtArgs>>): Prisma.Prisma__PricingPlanClient<runtime.Types.Result.GetResult<Prisma.$PricingPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PricingFeature model
 */
export interface PricingFeatureFieldRefs {
  readonly id: Prisma.FieldRef<"PricingFeature", 'String'>
  readonly name: Prisma.FieldRef<"PricingFeature", 'String'>
  readonly description: Prisma.FieldRef<"PricingFeature", 'String'>
  readonly planId: Prisma.FieldRef<"PricingFeature", 'String'>
}
    

// Custom InputTypes
/**
 * PricingFeature findUnique
 */
export type PricingFeatureFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * Filter, which PricingFeature to fetch.
   */
  where: Prisma.PricingFeatureWhereUniqueInput
}

/**
 * PricingFeature findUniqueOrThrow
 */
export type PricingFeatureFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * Filter, which PricingFeature to fetch.
   */
  where: Prisma.PricingFeatureWhereUniqueInput
}

/**
 * PricingFeature findFirst
 */
export type PricingFeatureFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * Filter, which PricingFeature to fetch.
   */
  where?: Prisma.PricingFeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PricingFeatures to fetch.
   */
  orderBy?: Prisma.PricingFeatureOrderByWithRelationInput | Prisma.PricingFeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PricingFeatures.
   */
  cursor?: Prisma.PricingFeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PricingFeatures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PricingFeatures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PricingFeatures.
   */
  distinct?: Prisma.PricingFeatureScalarFieldEnum | Prisma.PricingFeatureScalarFieldEnum[]
}

/**
 * PricingFeature findFirstOrThrow
 */
export type PricingFeatureFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * Filter, which PricingFeature to fetch.
   */
  where?: Prisma.PricingFeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PricingFeatures to fetch.
   */
  orderBy?: Prisma.PricingFeatureOrderByWithRelationInput | Prisma.PricingFeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PricingFeatures.
   */
  cursor?: Prisma.PricingFeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PricingFeatures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PricingFeatures.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PricingFeatures.
   */
  distinct?: Prisma.PricingFeatureScalarFieldEnum | Prisma.PricingFeatureScalarFieldEnum[]
}

/**
 * PricingFeature findMany
 */
export type PricingFeatureFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * Filter, which PricingFeatures to fetch.
   */
  where?: Prisma.PricingFeatureWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PricingFeatures to fetch.
   */
  orderBy?: Prisma.PricingFeatureOrderByWithRelationInput | Prisma.PricingFeatureOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PricingFeatures.
   */
  cursor?: Prisma.PricingFeatureWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PricingFeatures from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PricingFeatures.
   */
  skip?: number
  distinct?: Prisma.PricingFeatureScalarFieldEnum | Prisma.PricingFeatureScalarFieldEnum[]
}

/**
 * PricingFeature create
 */
export type PricingFeatureCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * The data needed to create a PricingFeature.
   */
  data: Prisma.XOR<Prisma.PricingFeatureCreateInput, Prisma.PricingFeatureUncheckedCreateInput>
}

/**
 * PricingFeature createMany
 */
export type PricingFeatureCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PricingFeatures.
   */
  data: Prisma.PricingFeatureCreateManyInput | Prisma.PricingFeatureCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PricingFeature createManyAndReturn
 */
export type PricingFeatureCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * The data used to create many PricingFeatures.
   */
  data: Prisma.PricingFeatureCreateManyInput | Prisma.PricingFeatureCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PricingFeature update
 */
export type PricingFeatureUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * The data needed to update a PricingFeature.
   */
  data: Prisma.XOR<Prisma.PricingFeatureUpdateInput, Prisma.PricingFeatureUncheckedUpdateInput>
  /**
   * Choose, which PricingFeature to update.
   */
  where: Prisma.PricingFeatureWhereUniqueInput
}

/**
 * PricingFeature updateMany
 */
export type PricingFeatureUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PricingFeatures.
   */
  data: Prisma.XOR<Prisma.PricingFeatureUpdateManyMutationInput, Prisma.PricingFeatureUncheckedUpdateManyInput>
  /**
   * Filter which PricingFeatures to update
   */
  where?: Prisma.PricingFeatureWhereInput
  /**
   * Limit how many PricingFeatures to update.
   */
  limit?: number
}

/**
 * PricingFeature updateManyAndReturn
 */
export type PricingFeatureUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * The data used to update PricingFeatures.
   */
  data: Prisma.XOR<Prisma.PricingFeatureUpdateManyMutationInput, Prisma.PricingFeatureUncheckedUpdateManyInput>
  /**
   * Filter which PricingFeatures to update
   */
  where?: Prisma.PricingFeatureWhereInput
  /**
   * Limit how many PricingFeatures to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PricingFeature upsert
 */
export type PricingFeatureUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * The filter to search for the PricingFeature to update in case it exists.
   */
  where: Prisma.PricingFeatureWhereUniqueInput
  /**
   * In case the PricingFeature found by the `where` argument doesn't exist, create a new PricingFeature with this data.
   */
  create: Prisma.XOR<Prisma.PricingFeatureCreateInput, Prisma.PricingFeatureUncheckedCreateInput>
  /**
   * In case the PricingFeature was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PricingFeatureUpdateInput, Prisma.PricingFeatureUncheckedUpdateInput>
}

/**
 * PricingFeature delete
 */
export type PricingFeatureDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
  /**
   * Filter which PricingFeature to delete.
   */
  where: Prisma.PricingFeatureWhereUniqueInput
}

/**
 * PricingFeature deleteMany
 */
export type PricingFeatureDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PricingFeatures to delete
   */
  where?: Prisma.PricingFeatureWhereInput
  /**
   * Limit how many PricingFeatures to delete.
   */
  limit?: number
}

/**
 * PricingFeature without action
 */
export type PricingFeatureDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PricingFeature
   */
  select?: Prisma.PricingFeatureSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PricingFeature
   */
  omit?: Prisma.PricingFeatureOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PricingFeatureInclude<ExtArgs> | null
}
