
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `BusinessType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model BusinessType
 * 
 */
export type BusinessTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$BusinessTypePayload>

export type AggregateBusinessType = {
  _count: BusinessTypeCountAggregateOutputType | null
  _min: BusinessTypeMinAggregateOutputType | null
  _max: BusinessTypeMaxAggregateOutputType | null
}

export type BusinessTypeMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  icon: string | null
}

export type BusinessTypeMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  icon: string | null
}

export type BusinessTypeCountAggregateOutputType = {
  id: number
  name: number
  description: number
  icon: number
  _all: number
}


export type BusinessTypeMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  icon?: true
}

export type BusinessTypeMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  icon?: true
}

export type BusinessTypeCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  icon?: true
  _all?: true
}

export type BusinessTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BusinessType to aggregate.
   */
  where?: Prisma.BusinessTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BusinessTypes to fetch.
   */
  orderBy?: Prisma.BusinessTypeOrderByWithRelationInput | Prisma.BusinessTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BusinessTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BusinessTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BusinessTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BusinessTypes
  **/
  _count?: true | BusinessTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BusinessTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BusinessTypeMaxAggregateInputType
}

export type GetBusinessTypeAggregateType<T extends BusinessTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateBusinessType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBusinessType[P]>
    : Prisma.GetScalarType<T[P], AggregateBusinessType[P]>
}




export type BusinessTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BusinessTypeWhereInput
  orderBy?: Prisma.BusinessTypeOrderByWithAggregationInput | Prisma.BusinessTypeOrderByWithAggregationInput[]
  by: Prisma.BusinessTypeScalarFieldEnum[] | Prisma.BusinessTypeScalarFieldEnum
  having?: Prisma.BusinessTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BusinessTypeCountAggregateInputType | true
  _min?: BusinessTypeMinAggregateInputType
  _max?: BusinessTypeMaxAggregateInputType
}

export type BusinessTypeGroupByOutputType = {
  id: string
  name: string
  description: string | null
  icon: string | null
  _count: BusinessTypeCountAggregateOutputType | null
  _min: BusinessTypeMinAggregateOutputType | null
  _max: BusinessTypeMaxAggregateOutputType | null
}

type GetBusinessTypeGroupByPayload<T extends BusinessTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BusinessTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BusinessTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BusinessTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BusinessTypeGroupByOutputType[P]>
      }
    >
  >



export type BusinessTypeWhereInput = {
  AND?: Prisma.BusinessTypeWhereInput | Prisma.BusinessTypeWhereInput[]
  OR?: Prisma.BusinessTypeWhereInput[]
  NOT?: Prisma.BusinessTypeWhereInput | Prisma.BusinessTypeWhereInput[]
  id?: Prisma.StringFilter<"BusinessType"> | string
  name?: Prisma.StringFilter<"BusinessType"> | string
  description?: Prisma.StringNullableFilter<"BusinessType"> | string | null
  icon?: Prisma.StringNullableFilter<"BusinessType"> | string | null
}

export type BusinessTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  icon?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type BusinessTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.BusinessTypeWhereInput | Prisma.BusinessTypeWhereInput[]
  OR?: Prisma.BusinessTypeWhereInput[]
  NOT?: Prisma.BusinessTypeWhereInput | Prisma.BusinessTypeWhereInput[]
  name?: Prisma.StringFilter<"BusinessType"> | string
  description?: Prisma.StringNullableFilter<"BusinessType"> | string | null
  icon?: Prisma.StringNullableFilter<"BusinessType"> | string | null
}, "id">

export type BusinessTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  icon?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.BusinessTypeCountOrderByAggregateInput
  _max?: Prisma.BusinessTypeMaxOrderByAggregateInput
  _min?: Prisma.BusinessTypeMinOrderByAggregateInput
}

export type BusinessTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.BusinessTypeScalarWhereWithAggregatesInput | Prisma.BusinessTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.BusinessTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BusinessTypeScalarWhereWithAggregatesInput | Prisma.BusinessTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"BusinessType"> | string
  name?: Prisma.StringWithAggregatesFilter<"BusinessType"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"BusinessType"> | string | null
  icon?: Prisma.StringNullableWithAggregatesFilter<"BusinessType"> | string | null
}

export type BusinessTypeCreateInput = {
  id?: string
  name: string
  description?: string | null
  icon?: string | null
}

export type BusinessTypeUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  icon?: string | null
}

export type BusinessTypeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type BusinessTypeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type BusinessTypeCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  icon?: string | null
}

export type BusinessTypeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type BusinessTypeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type BusinessTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
}

export type BusinessTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
}

export type BusinessTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  icon?: Prisma.SortOrder
}



export type BusinessTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  icon?: boolean
}, ExtArgs["result"]["businessType"]>

export type BusinessTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  icon?: boolean
}, ExtArgs["result"]["businessType"]>

export type BusinessTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  icon?: boolean
}, ExtArgs["result"]["businessType"]>

export type BusinessTypeSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  icon?: boolean
}

export type BusinessTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "icon", ExtArgs["result"]["businessType"]>

export type $BusinessTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BusinessType"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    icon: string | null
  }, ExtArgs["result"]["businessType"]>
  composites: {}
}

export type BusinessTypeGetPayload<S extends boolean | null | undefined | BusinessTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload, S>

export type BusinessTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BusinessTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BusinessTypeCountAggregateInputType | true
  }

export interface BusinessTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessType'], meta: { name: 'BusinessType' } }
  /**
   * Find zero or one BusinessType that matches the filter.
   * @param {BusinessTypeFindUniqueArgs} args - Arguments to find a BusinessType
   * @example
   * // Get one BusinessType
   * const businessType = await prisma.businessType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BusinessTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, BusinessTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BusinessTypeClient<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BusinessType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BusinessTypeFindUniqueOrThrowArgs} args - Arguments to find a BusinessType
   * @example
   * // Get one BusinessType
   * const businessType = await prisma.businessType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BusinessTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BusinessTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BusinessTypeClient<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BusinessType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessTypeFindFirstArgs} args - Arguments to find a BusinessType
   * @example
   * // Get one BusinessType
   * const businessType = await prisma.businessType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BusinessTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, BusinessTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__BusinessTypeClient<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BusinessType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessTypeFindFirstOrThrowArgs} args - Arguments to find a BusinessType
   * @example
   * // Get one BusinessType
   * const businessType = await prisma.businessType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BusinessTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BusinessTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BusinessTypeClient<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BusinessTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BusinessTypes
   * const businessTypes = await prisma.businessType.findMany()
   * 
   * // Get first 10 BusinessTypes
   * const businessTypes = await prisma.businessType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const businessTypeWithIdOnly = await prisma.businessType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BusinessTypeFindManyArgs>(args?: Prisma.SelectSubset<T, BusinessTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BusinessType.
   * @param {BusinessTypeCreateArgs} args - Arguments to create a BusinessType.
   * @example
   * // Create one BusinessType
   * const BusinessType = await prisma.businessType.create({
   *   data: {
   *     // ... data to create a BusinessType
   *   }
   * })
   * 
   */
  create<T extends BusinessTypeCreateArgs>(args: Prisma.SelectSubset<T, BusinessTypeCreateArgs<ExtArgs>>): Prisma.Prisma__BusinessTypeClient<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BusinessTypes.
   * @param {BusinessTypeCreateManyArgs} args - Arguments to create many BusinessTypes.
   * @example
   * // Create many BusinessTypes
   * const businessType = await prisma.businessType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BusinessTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, BusinessTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BusinessTypes and returns the data saved in the database.
   * @param {BusinessTypeCreateManyAndReturnArgs} args - Arguments to create many BusinessTypes.
   * @example
   * // Create many BusinessTypes
   * const businessType = await prisma.businessType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BusinessTypes and only return the `id`
   * const businessTypeWithIdOnly = await prisma.businessType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BusinessTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BusinessTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BusinessType.
   * @param {BusinessTypeDeleteArgs} args - Arguments to delete one BusinessType.
   * @example
   * // Delete one BusinessType
   * const BusinessType = await prisma.businessType.delete({
   *   where: {
   *     // ... filter to delete one BusinessType
   *   }
   * })
   * 
   */
  delete<T extends BusinessTypeDeleteArgs>(args: Prisma.SelectSubset<T, BusinessTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__BusinessTypeClient<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BusinessType.
   * @param {BusinessTypeUpdateArgs} args - Arguments to update one BusinessType.
   * @example
   * // Update one BusinessType
   * const businessType = await prisma.businessType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BusinessTypeUpdateArgs>(args: Prisma.SelectSubset<T, BusinessTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__BusinessTypeClient<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BusinessTypes.
   * @param {BusinessTypeDeleteManyArgs} args - Arguments to filter BusinessTypes to delete.
   * @example
   * // Delete a few BusinessTypes
   * const { count } = await prisma.businessType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BusinessTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, BusinessTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BusinessTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BusinessTypes
   * const businessType = await prisma.businessType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BusinessTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, BusinessTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BusinessTypes and returns the data updated in the database.
   * @param {BusinessTypeUpdateManyAndReturnArgs} args - Arguments to update many BusinessTypes.
   * @example
   * // Update many BusinessTypes
   * const businessType = await prisma.businessType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BusinessTypes and only return the `id`
   * const businessTypeWithIdOnly = await prisma.businessType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BusinessTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BusinessTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BusinessType.
   * @param {BusinessTypeUpsertArgs} args - Arguments to update or create a BusinessType.
   * @example
   * // Update or create a BusinessType
   * const businessType = await prisma.businessType.upsert({
   *   create: {
   *     // ... data to create a BusinessType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BusinessType we want to update
   *   }
   * })
   */
  upsert<T extends BusinessTypeUpsertArgs>(args: Prisma.SelectSubset<T, BusinessTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__BusinessTypeClient<runtime.Types.Result.GetResult<Prisma.$BusinessTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BusinessTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessTypeCountArgs} args - Arguments to filter BusinessTypes to count.
   * @example
   * // Count the number of BusinessTypes
   * const count = await prisma.businessType.count({
   *   where: {
   *     // ... the filter for the BusinessTypes we want to count
   *   }
   * })
  **/
  count<T extends BusinessTypeCountArgs>(
    args?: Prisma.Subset<T, BusinessTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BusinessTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BusinessType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BusinessTypeAggregateArgs>(args: Prisma.Subset<T, BusinessTypeAggregateArgs>): Prisma.PrismaPromise<GetBusinessTypeAggregateType<T>>

  /**
   * Group by BusinessType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BusinessTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BusinessTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BusinessTypeGroupByArgs['orderBy'] }
      : { orderBy?: BusinessTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BusinessTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BusinessType model
 */
readonly fields: BusinessTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BusinessType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BusinessTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BusinessType model
 */
export interface BusinessTypeFieldRefs {
  readonly id: Prisma.FieldRef<"BusinessType", 'String'>
  readonly name: Prisma.FieldRef<"BusinessType", 'String'>
  readonly description: Prisma.FieldRef<"BusinessType", 'String'>
  readonly icon: Prisma.FieldRef<"BusinessType", 'String'>
}
    

// Custom InputTypes
/**
 * BusinessType findUnique
 */
export type BusinessTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * Filter, which BusinessType to fetch.
   */
  where: Prisma.BusinessTypeWhereUniqueInput
}

/**
 * BusinessType findUniqueOrThrow
 */
export type BusinessTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * Filter, which BusinessType to fetch.
   */
  where: Prisma.BusinessTypeWhereUniqueInput
}

/**
 * BusinessType findFirst
 */
export type BusinessTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * Filter, which BusinessType to fetch.
   */
  where?: Prisma.BusinessTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BusinessTypes to fetch.
   */
  orderBy?: Prisma.BusinessTypeOrderByWithRelationInput | Prisma.BusinessTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BusinessTypes.
   */
  cursor?: Prisma.BusinessTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BusinessTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BusinessTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BusinessTypes.
   */
  distinct?: Prisma.BusinessTypeScalarFieldEnum | Prisma.BusinessTypeScalarFieldEnum[]
}

/**
 * BusinessType findFirstOrThrow
 */
export type BusinessTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * Filter, which BusinessType to fetch.
   */
  where?: Prisma.BusinessTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BusinessTypes to fetch.
   */
  orderBy?: Prisma.BusinessTypeOrderByWithRelationInput | Prisma.BusinessTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BusinessTypes.
   */
  cursor?: Prisma.BusinessTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BusinessTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BusinessTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BusinessTypes.
   */
  distinct?: Prisma.BusinessTypeScalarFieldEnum | Prisma.BusinessTypeScalarFieldEnum[]
}

/**
 * BusinessType findMany
 */
export type BusinessTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * Filter, which BusinessTypes to fetch.
   */
  where?: Prisma.BusinessTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BusinessTypes to fetch.
   */
  orderBy?: Prisma.BusinessTypeOrderByWithRelationInput | Prisma.BusinessTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BusinessTypes.
   */
  cursor?: Prisma.BusinessTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BusinessTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BusinessTypes.
   */
  skip?: number
  distinct?: Prisma.BusinessTypeScalarFieldEnum | Prisma.BusinessTypeScalarFieldEnum[]
}

/**
 * BusinessType create
 */
export type BusinessTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * The data needed to create a BusinessType.
   */
  data: Prisma.XOR<Prisma.BusinessTypeCreateInput, Prisma.BusinessTypeUncheckedCreateInput>
}

/**
 * BusinessType createMany
 */
export type BusinessTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BusinessTypes.
   */
  data: Prisma.BusinessTypeCreateManyInput | Prisma.BusinessTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BusinessType createManyAndReturn
 */
export type BusinessTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * The data used to create many BusinessTypes.
   */
  data: Prisma.BusinessTypeCreateManyInput | Prisma.BusinessTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * BusinessType update
 */
export type BusinessTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * The data needed to update a BusinessType.
   */
  data: Prisma.XOR<Prisma.BusinessTypeUpdateInput, Prisma.BusinessTypeUncheckedUpdateInput>
  /**
   * Choose, which BusinessType to update.
   */
  where: Prisma.BusinessTypeWhereUniqueInput
}

/**
 * BusinessType updateMany
 */
export type BusinessTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BusinessTypes.
   */
  data: Prisma.XOR<Prisma.BusinessTypeUpdateManyMutationInput, Prisma.BusinessTypeUncheckedUpdateManyInput>
  /**
   * Filter which BusinessTypes to update
   */
  where?: Prisma.BusinessTypeWhereInput
  /**
   * Limit how many BusinessTypes to update.
   */
  limit?: number
}

/**
 * BusinessType updateManyAndReturn
 */
export type BusinessTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * The data used to update BusinessTypes.
   */
  data: Prisma.XOR<Prisma.BusinessTypeUpdateManyMutationInput, Prisma.BusinessTypeUncheckedUpdateManyInput>
  /**
   * Filter which BusinessTypes to update
   */
  where?: Prisma.BusinessTypeWhereInput
  /**
   * Limit how many BusinessTypes to update.
   */
  limit?: number
}

/**
 * BusinessType upsert
 */
export type BusinessTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * The filter to search for the BusinessType to update in case it exists.
   */
  where: Prisma.BusinessTypeWhereUniqueInput
  /**
   * In case the BusinessType found by the `where` argument doesn't exist, create a new BusinessType with this data.
   */
  create: Prisma.XOR<Prisma.BusinessTypeCreateInput, Prisma.BusinessTypeUncheckedCreateInput>
  /**
   * In case the BusinessType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BusinessTypeUpdateInput, Prisma.BusinessTypeUncheckedUpdateInput>
}

/**
 * BusinessType delete
 */
export type BusinessTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
  /**
   * Filter which BusinessType to delete.
   */
  where: Prisma.BusinessTypeWhereUniqueInput
}

/**
 * BusinessType deleteMany
 */
export type BusinessTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BusinessTypes to delete
   */
  where?: Prisma.BusinessTypeWhereInput
  /**
   * Limit how many BusinessTypes to delete.
   */
  limit?: number
}

/**
 * BusinessType without action
 */
export type BusinessTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BusinessType
   */
  select?: Prisma.BusinessTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BusinessType
   */
  omit?: Prisma.BusinessTypeOmit<ExtArgs> | null
}
