
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `KycDocument` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model KycDocument
 * 
 */
export type KycDocumentModel = runtime.Types.Result.DefaultSelection<Prisma.$KycDocumentPayload>

export type AggregateKycDocument = {
  _count: KycDocumentCountAggregateOutputType | null
  _min: KycDocumentMinAggregateOutputType | null
  _max: KycDocumentMaxAggregateOutputType | null
}

export type KycDocumentMinAggregateOutputType = {
  id: string | null
  businessId: string | null
  documentType: string | null
  documentUrl: string | null
  status: $Enums.KycStatus | null
  rejectionReason: string | null
  submittedAt: Date | null
  verifiedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type KycDocumentMaxAggregateOutputType = {
  id: string | null
  businessId: string | null
  documentType: string | null
  documentUrl: string | null
  status: $Enums.KycStatus | null
  rejectionReason: string | null
  submittedAt: Date | null
  verifiedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type KycDocumentCountAggregateOutputType = {
  id: number
  businessId: number
  documentType: number
  documentUrl: number
  status: number
  rejectionReason: number
  submittedAt: number
  verifiedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type KycDocumentMinAggregateInputType = {
  id?: true
  businessId?: true
  documentType?: true
  documentUrl?: true
  status?: true
  rejectionReason?: true
  submittedAt?: true
  verifiedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type KycDocumentMaxAggregateInputType = {
  id?: true
  businessId?: true
  documentType?: true
  documentUrl?: true
  status?: true
  rejectionReason?: true
  submittedAt?: true
  verifiedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type KycDocumentCountAggregateInputType = {
  id?: true
  businessId?: true
  documentType?: true
  documentUrl?: true
  status?: true
  rejectionReason?: true
  submittedAt?: true
  verifiedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type KycDocumentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which KycDocument to aggregate.
   */
  where?: Prisma.KycDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KycDocuments to fetch.
   */
  orderBy?: Prisma.KycDocumentOrderByWithRelationInput | Prisma.KycDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.KycDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KycDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KycDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned KycDocuments
  **/
  _count?: true | KycDocumentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: KycDocumentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: KycDocumentMaxAggregateInputType
}

export type GetKycDocumentAggregateType<T extends KycDocumentAggregateArgs> = {
      [P in keyof T & keyof AggregateKycDocument]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateKycDocument[P]>
    : Prisma.GetScalarType<T[P], AggregateKycDocument[P]>
}




export type KycDocumentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.KycDocumentWhereInput
  orderBy?: Prisma.KycDocumentOrderByWithAggregationInput | Prisma.KycDocumentOrderByWithAggregationInput[]
  by: Prisma.KycDocumentScalarFieldEnum[] | Prisma.KycDocumentScalarFieldEnum
  having?: Prisma.KycDocumentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: KycDocumentCountAggregateInputType | true
  _min?: KycDocumentMinAggregateInputType
  _max?: KycDocumentMaxAggregateInputType
}

export type KycDocumentGroupByOutputType = {
  id: string
  businessId: string
  documentType: string
  documentUrl: string
  status: $Enums.KycStatus
  rejectionReason: string | null
  submittedAt: Date
  verifiedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: KycDocumentCountAggregateOutputType | null
  _min: KycDocumentMinAggregateOutputType | null
  _max: KycDocumentMaxAggregateOutputType | null
}

type GetKycDocumentGroupByPayload<T extends KycDocumentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<KycDocumentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof KycDocumentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], KycDocumentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], KycDocumentGroupByOutputType[P]>
      }
    >
  >



export type KycDocumentWhereInput = {
  AND?: Prisma.KycDocumentWhereInput | Prisma.KycDocumentWhereInput[]
  OR?: Prisma.KycDocumentWhereInput[]
  NOT?: Prisma.KycDocumentWhereInput | Prisma.KycDocumentWhereInput[]
  id?: Prisma.StringFilter<"KycDocument"> | string
  businessId?: Prisma.StringFilter<"KycDocument"> | string
  documentType?: Prisma.StringFilter<"KycDocument"> | string
  documentUrl?: Prisma.StringFilter<"KycDocument"> | string
  status?: Prisma.EnumKycStatusFilter<"KycDocument"> | $Enums.KycStatus
  rejectionReason?: Prisma.StringNullableFilter<"KycDocument"> | string | null
  submittedAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
  verifiedAt?: Prisma.DateTimeNullableFilter<"KycDocument"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
}

export type KycDocumentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  verifiedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
}

export type KycDocumentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.KycDocumentWhereInput | Prisma.KycDocumentWhereInput[]
  OR?: Prisma.KycDocumentWhereInput[]
  NOT?: Prisma.KycDocumentWhereInput | Prisma.KycDocumentWhereInput[]
  businessId?: Prisma.StringFilter<"KycDocument"> | string
  documentType?: Prisma.StringFilter<"KycDocument"> | string
  documentUrl?: Prisma.StringFilter<"KycDocument"> | string
  status?: Prisma.EnumKycStatusFilter<"KycDocument"> | $Enums.KycStatus
  rejectionReason?: Prisma.StringNullableFilter<"KycDocument"> | string | null
  submittedAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
  verifiedAt?: Prisma.DateTimeNullableFilter<"KycDocument"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
}, "id">

export type KycDocumentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrderInput | Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  verifiedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.KycDocumentCountOrderByAggregateInput
  _max?: Prisma.KycDocumentMaxOrderByAggregateInput
  _min?: Prisma.KycDocumentMinOrderByAggregateInput
}

export type KycDocumentScalarWhereWithAggregatesInput = {
  AND?: Prisma.KycDocumentScalarWhereWithAggregatesInput | Prisma.KycDocumentScalarWhereWithAggregatesInput[]
  OR?: Prisma.KycDocumentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.KycDocumentScalarWhereWithAggregatesInput | Prisma.KycDocumentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"KycDocument"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"KycDocument"> | string
  documentType?: Prisma.StringWithAggregatesFilter<"KycDocument"> | string
  documentUrl?: Prisma.StringWithAggregatesFilter<"KycDocument"> | string
  status?: Prisma.EnumKycStatusWithAggregatesFilter<"KycDocument"> | $Enums.KycStatus
  rejectionReason?: Prisma.StringNullableWithAggregatesFilter<"KycDocument"> | string | null
  submittedAt?: Prisma.DateTimeWithAggregatesFilter<"KycDocument"> | Date | string
  verifiedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"KycDocument"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"KycDocument"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"KycDocument"> | Date | string
}

export type KycDocumentCreateInput = {
  id?: string
  documentType: string
  documentUrl: string
  status?: $Enums.KycStatus
  rejectionReason?: string | null
  submittedAt?: Date | string
  verifiedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutKycDocumentsInput
}

export type KycDocumentUncheckedCreateInput = {
  id?: string
  businessId: string
  documentType: string
  documentUrl: string
  status?: $Enums.KycStatus
  rejectionReason?: string | null
  submittedAt?: Date | string
  verifiedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KycDocumentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutKycDocumentsNestedInput
}

export type KycDocumentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KycDocumentCreateManyInput = {
  id?: string
  businessId: string
  documentType: string
  documentUrl: string
  status?: $Enums.KycStatus
  rejectionReason?: string | null
  submittedAt?: Date | string
  verifiedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KycDocumentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KycDocumentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KycDocumentListRelationFilter = {
  every?: Prisma.KycDocumentWhereInput
  some?: Prisma.KycDocumentWhereInput
  none?: Prisma.KycDocumentWhereInput
}

export type KycDocumentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type KycDocumentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  verifiedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KycDocumentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  verifiedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KycDocumentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  documentType?: Prisma.SortOrder
  documentUrl?: Prisma.SortOrder
  status?: Prisma.SortOrder
  rejectionReason?: Prisma.SortOrder
  submittedAt?: Prisma.SortOrder
  verifiedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KycDocumentCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.KycDocumentCreateWithoutBusinessInput, Prisma.KycDocumentUncheckedCreateWithoutBusinessInput> | Prisma.KycDocumentCreateWithoutBusinessInput[] | Prisma.KycDocumentUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.KycDocumentCreateOrConnectWithoutBusinessInput | Prisma.KycDocumentCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.KycDocumentCreateManyBusinessInputEnvelope
  connect?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
}

export type KycDocumentUncheckedCreateNestedManyWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.KycDocumentCreateWithoutBusinessInput, Prisma.KycDocumentUncheckedCreateWithoutBusinessInput> | Prisma.KycDocumentCreateWithoutBusinessInput[] | Prisma.KycDocumentUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.KycDocumentCreateOrConnectWithoutBusinessInput | Prisma.KycDocumentCreateOrConnectWithoutBusinessInput[]
  createMany?: Prisma.KycDocumentCreateManyBusinessInputEnvelope
  connect?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
}

export type KycDocumentUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.KycDocumentCreateWithoutBusinessInput, Prisma.KycDocumentUncheckedCreateWithoutBusinessInput> | Prisma.KycDocumentCreateWithoutBusinessInput[] | Prisma.KycDocumentUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.KycDocumentCreateOrConnectWithoutBusinessInput | Prisma.KycDocumentCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.KycDocumentUpsertWithWhereUniqueWithoutBusinessInput | Prisma.KycDocumentUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.KycDocumentCreateManyBusinessInputEnvelope
  set?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
  disconnect?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
  delete?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
  connect?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
  update?: Prisma.KycDocumentUpdateWithWhereUniqueWithoutBusinessInput | Prisma.KycDocumentUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.KycDocumentUpdateManyWithWhereWithoutBusinessInput | Prisma.KycDocumentUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.KycDocumentScalarWhereInput | Prisma.KycDocumentScalarWhereInput[]
}

export type KycDocumentUncheckedUpdateManyWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.KycDocumentCreateWithoutBusinessInput, Prisma.KycDocumentUncheckedCreateWithoutBusinessInput> | Prisma.KycDocumentCreateWithoutBusinessInput[] | Prisma.KycDocumentUncheckedCreateWithoutBusinessInput[]
  connectOrCreate?: Prisma.KycDocumentCreateOrConnectWithoutBusinessInput | Prisma.KycDocumentCreateOrConnectWithoutBusinessInput[]
  upsert?: Prisma.KycDocumentUpsertWithWhereUniqueWithoutBusinessInput | Prisma.KycDocumentUpsertWithWhereUniqueWithoutBusinessInput[]
  createMany?: Prisma.KycDocumentCreateManyBusinessInputEnvelope
  set?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
  disconnect?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
  delete?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
  connect?: Prisma.KycDocumentWhereUniqueInput | Prisma.KycDocumentWhereUniqueInput[]
  update?: Prisma.KycDocumentUpdateWithWhereUniqueWithoutBusinessInput | Prisma.KycDocumentUpdateWithWhereUniqueWithoutBusinessInput[]
  updateMany?: Prisma.KycDocumentUpdateManyWithWhereWithoutBusinessInput | Prisma.KycDocumentUpdateManyWithWhereWithoutBusinessInput[]
  deleteMany?: Prisma.KycDocumentScalarWhereInput | Prisma.KycDocumentScalarWhereInput[]
}

export type KycDocumentCreateWithoutBusinessInput = {
  id?: string
  documentType: string
  documentUrl: string
  status?: $Enums.KycStatus
  rejectionReason?: string | null
  submittedAt?: Date | string
  verifiedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KycDocumentUncheckedCreateWithoutBusinessInput = {
  id?: string
  documentType: string
  documentUrl: string
  status?: $Enums.KycStatus
  rejectionReason?: string | null
  submittedAt?: Date | string
  verifiedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KycDocumentCreateOrConnectWithoutBusinessInput = {
  where: Prisma.KycDocumentWhereUniqueInput
  create: Prisma.XOR<Prisma.KycDocumentCreateWithoutBusinessInput, Prisma.KycDocumentUncheckedCreateWithoutBusinessInput>
}

export type KycDocumentCreateManyBusinessInputEnvelope = {
  data: Prisma.KycDocumentCreateManyBusinessInput | Prisma.KycDocumentCreateManyBusinessInput[]
  skipDuplicates?: boolean
}

export type KycDocumentUpsertWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.KycDocumentWhereUniqueInput
  update: Prisma.XOR<Prisma.KycDocumentUpdateWithoutBusinessInput, Prisma.KycDocumentUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.KycDocumentCreateWithoutBusinessInput, Prisma.KycDocumentUncheckedCreateWithoutBusinessInput>
}

export type KycDocumentUpdateWithWhereUniqueWithoutBusinessInput = {
  where: Prisma.KycDocumentWhereUniqueInput
  data: Prisma.XOR<Prisma.KycDocumentUpdateWithoutBusinessInput, Prisma.KycDocumentUncheckedUpdateWithoutBusinessInput>
}

export type KycDocumentUpdateManyWithWhereWithoutBusinessInput = {
  where: Prisma.KycDocumentScalarWhereInput
  data: Prisma.XOR<Prisma.KycDocumentUpdateManyMutationInput, Prisma.KycDocumentUncheckedUpdateManyWithoutBusinessInput>
}

export type KycDocumentScalarWhereInput = {
  AND?: Prisma.KycDocumentScalarWhereInput | Prisma.KycDocumentScalarWhereInput[]
  OR?: Prisma.KycDocumentScalarWhereInput[]
  NOT?: Prisma.KycDocumentScalarWhereInput | Prisma.KycDocumentScalarWhereInput[]
  id?: Prisma.StringFilter<"KycDocument"> | string
  businessId?: Prisma.StringFilter<"KycDocument"> | string
  documentType?: Prisma.StringFilter<"KycDocument"> | string
  documentUrl?: Prisma.StringFilter<"KycDocument"> | string
  status?: Prisma.EnumKycStatusFilter<"KycDocument"> | $Enums.KycStatus
  rejectionReason?: Prisma.StringNullableFilter<"KycDocument"> | string | null
  submittedAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
  verifiedAt?: Prisma.DateTimeNullableFilter<"KycDocument"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"KycDocument"> | Date | string
}

export type KycDocumentCreateManyBusinessInput = {
  id?: string
  documentType: string
  documentUrl: string
  status?: $Enums.KycStatus
  rejectionReason?: string | null
  submittedAt?: Date | string
  verifiedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KycDocumentUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KycDocumentUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KycDocumentUncheckedUpdateManyWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  documentType?: Prisma.StringFieldUpdateOperationsInput | string
  documentUrl?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumKycStatusFieldUpdateOperationsInput | $Enums.KycStatus
  rejectionReason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  submittedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type KycDocumentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  documentType?: boolean
  documentUrl?: boolean
  status?: boolean
  rejectionReason?: boolean
  submittedAt?: boolean
  verifiedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kycDocument"]>

export type KycDocumentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  documentType?: boolean
  documentUrl?: boolean
  status?: boolean
  rejectionReason?: boolean
  submittedAt?: boolean
  verifiedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kycDocument"]>

export type KycDocumentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  documentType?: boolean
  documentUrl?: boolean
  status?: boolean
  rejectionReason?: boolean
  submittedAt?: boolean
  verifiedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kycDocument"]>

export type KycDocumentSelectScalar = {
  id?: boolean
  businessId?: boolean
  documentType?: boolean
  documentUrl?: boolean
  status?: boolean
  rejectionReason?: boolean
  submittedAt?: boolean
  verifiedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type KycDocumentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "businessId" | "documentType" | "documentUrl" | "status" | "rejectionReason" | "submittedAt" | "verifiedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["kycDocument"]>
export type KycDocumentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type KycDocumentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type KycDocumentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}

export type $KycDocumentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "KycDocument"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    businessId: string
    documentType: string
    documentUrl: string
    status: $Enums.KycStatus
    rejectionReason: string | null
    submittedAt: Date
    verifiedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["kycDocument"]>
  composites: {}
}

export type KycDocumentGetPayload<S extends boolean | null | undefined | KycDocumentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload, S>

export type KycDocumentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<KycDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: KycDocumentCountAggregateInputType | true
  }

export interface KycDocumentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KycDocument'], meta: { name: 'KycDocument' } }
  /**
   * Find zero or one KycDocument that matches the filter.
   * @param {KycDocumentFindUniqueArgs} args - Arguments to find a KycDocument
   * @example
   * // Get one KycDocument
   * const kycDocument = await prisma.kycDocument.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends KycDocumentFindUniqueArgs>(args: Prisma.SelectSubset<T, KycDocumentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__KycDocumentClient<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one KycDocument that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {KycDocumentFindUniqueOrThrowArgs} args - Arguments to find a KycDocument
   * @example
   * // Get one KycDocument
   * const kycDocument = await prisma.kycDocument.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends KycDocumentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, KycDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__KycDocumentClient<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first KycDocument that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KycDocumentFindFirstArgs} args - Arguments to find a KycDocument
   * @example
   * // Get one KycDocument
   * const kycDocument = await prisma.kycDocument.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends KycDocumentFindFirstArgs>(args?: Prisma.SelectSubset<T, KycDocumentFindFirstArgs<ExtArgs>>): Prisma.Prisma__KycDocumentClient<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first KycDocument that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KycDocumentFindFirstOrThrowArgs} args - Arguments to find a KycDocument
   * @example
   * // Get one KycDocument
   * const kycDocument = await prisma.kycDocument.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends KycDocumentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, KycDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__KycDocumentClient<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more KycDocuments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KycDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all KycDocuments
   * const kycDocuments = await prisma.kycDocument.findMany()
   * 
   * // Get first 10 KycDocuments
   * const kycDocuments = await prisma.kycDocument.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const kycDocumentWithIdOnly = await prisma.kycDocument.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends KycDocumentFindManyArgs>(args?: Prisma.SelectSubset<T, KycDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a KycDocument.
   * @param {KycDocumentCreateArgs} args - Arguments to create a KycDocument.
   * @example
   * // Create one KycDocument
   * const KycDocument = await prisma.kycDocument.create({
   *   data: {
   *     // ... data to create a KycDocument
   *   }
   * })
   * 
   */
  create<T extends KycDocumentCreateArgs>(args: Prisma.SelectSubset<T, KycDocumentCreateArgs<ExtArgs>>): Prisma.Prisma__KycDocumentClient<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many KycDocuments.
   * @param {KycDocumentCreateManyArgs} args - Arguments to create many KycDocuments.
   * @example
   * // Create many KycDocuments
   * const kycDocument = await prisma.kycDocument.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends KycDocumentCreateManyArgs>(args?: Prisma.SelectSubset<T, KycDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many KycDocuments and returns the data saved in the database.
   * @param {KycDocumentCreateManyAndReturnArgs} args - Arguments to create many KycDocuments.
   * @example
   * // Create many KycDocuments
   * const kycDocument = await prisma.kycDocument.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many KycDocuments and only return the `id`
   * const kycDocumentWithIdOnly = await prisma.kycDocument.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends KycDocumentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, KycDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a KycDocument.
   * @param {KycDocumentDeleteArgs} args - Arguments to delete one KycDocument.
   * @example
   * // Delete one KycDocument
   * const KycDocument = await prisma.kycDocument.delete({
   *   where: {
   *     // ... filter to delete one KycDocument
   *   }
   * })
   * 
   */
  delete<T extends KycDocumentDeleteArgs>(args: Prisma.SelectSubset<T, KycDocumentDeleteArgs<ExtArgs>>): Prisma.Prisma__KycDocumentClient<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one KycDocument.
   * @param {KycDocumentUpdateArgs} args - Arguments to update one KycDocument.
   * @example
   * // Update one KycDocument
   * const kycDocument = await prisma.kycDocument.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends KycDocumentUpdateArgs>(args: Prisma.SelectSubset<T, KycDocumentUpdateArgs<ExtArgs>>): Prisma.Prisma__KycDocumentClient<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more KycDocuments.
   * @param {KycDocumentDeleteManyArgs} args - Arguments to filter KycDocuments to delete.
   * @example
   * // Delete a few KycDocuments
   * const { count } = await prisma.kycDocument.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends KycDocumentDeleteManyArgs>(args?: Prisma.SelectSubset<T, KycDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more KycDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KycDocumentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many KycDocuments
   * const kycDocument = await prisma.kycDocument.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends KycDocumentUpdateManyArgs>(args: Prisma.SelectSubset<T, KycDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more KycDocuments and returns the data updated in the database.
   * @param {KycDocumentUpdateManyAndReturnArgs} args - Arguments to update many KycDocuments.
   * @example
   * // Update many KycDocuments
   * const kycDocument = await prisma.kycDocument.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more KycDocuments and only return the `id`
   * const kycDocumentWithIdOnly = await prisma.kycDocument.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends KycDocumentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, KycDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one KycDocument.
   * @param {KycDocumentUpsertArgs} args - Arguments to update or create a KycDocument.
   * @example
   * // Update or create a KycDocument
   * const kycDocument = await prisma.kycDocument.upsert({
   *   create: {
   *     // ... data to create a KycDocument
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the KycDocument we want to update
   *   }
   * })
   */
  upsert<T extends KycDocumentUpsertArgs>(args: Prisma.SelectSubset<T, KycDocumentUpsertArgs<ExtArgs>>): Prisma.Prisma__KycDocumentClient<runtime.Types.Result.GetResult<Prisma.$KycDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of KycDocuments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KycDocumentCountArgs} args - Arguments to filter KycDocuments to count.
   * @example
   * // Count the number of KycDocuments
   * const count = await prisma.kycDocument.count({
   *   where: {
   *     // ... the filter for the KycDocuments we want to count
   *   }
   * })
  **/
  count<T extends KycDocumentCountArgs>(
    args?: Prisma.Subset<T, KycDocumentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], KycDocumentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a KycDocument.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KycDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends KycDocumentAggregateArgs>(args: Prisma.Subset<T, KycDocumentAggregateArgs>): Prisma.PrismaPromise<GetKycDocumentAggregateType<T>>

  /**
   * Group by KycDocument.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KycDocumentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends KycDocumentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: KycDocumentGroupByArgs['orderBy'] }
      : { orderBy?: KycDocumentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, KycDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKycDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the KycDocument model
 */
readonly fields: KycDocumentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for KycDocument.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__KycDocumentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the KycDocument model
 */
export interface KycDocumentFieldRefs {
  readonly id: Prisma.FieldRef<"KycDocument", 'String'>
  readonly businessId: Prisma.FieldRef<"KycDocument", 'String'>
  readonly documentType: Prisma.FieldRef<"KycDocument", 'String'>
  readonly documentUrl: Prisma.FieldRef<"KycDocument", 'String'>
  readonly status: Prisma.FieldRef<"KycDocument", 'KycStatus'>
  readonly rejectionReason: Prisma.FieldRef<"KycDocument", 'String'>
  readonly submittedAt: Prisma.FieldRef<"KycDocument", 'DateTime'>
  readonly verifiedAt: Prisma.FieldRef<"KycDocument", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"KycDocument", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"KycDocument", 'DateTime'>
}
    

// Custom InputTypes
/**
 * KycDocument findUnique
 */
export type KycDocumentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * Filter, which KycDocument to fetch.
   */
  where: Prisma.KycDocumentWhereUniqueInput
}

/**
 * KycDocument findUniqueOrThrow
 */
export type KycDocumentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * Filter, which KycDocument to fetch.
   */
  where: Prisma.KycDocumentWhereUniqueInput
}

/**
 * KycDocument findFirst
 */
export type KycDocumentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * Filter, which KycDocument to fetch.
   */
  where?: Prisma.KycDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KycDocuments to fetch.
   */
  orderBy?: Prisma.KycDocumentOrderByWithRelationInput | Prisma.KycDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for KycDocuments.
   */
  cursor?: Prisma.KycDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KycDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KycDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of KycDocuments.
   */
  distinct?: Prisma.KycDocumentScalarFieldEnum | Prisma.KycDocumentScalarFieldEnum[]
}

/**
 * KycDocument findFirstOrThrow
 */
export type KycDocumentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * Filter, which KycDocument to fetch.
   */
  where?: Prisma.KycDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KycDocuments to fetch.
   */
  orderBy?: Prisma.KycDocumentOrderByWithRelationInput | Prisma.KycDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for KycDocuments.
   */
  cursor?: Prisma.KycDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KycDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KycDocuments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of KycDocuments.
   */
  distinct?: Prisma.KycDocumentScalarFieldEnum | Prisma.KycDocumentScalarFieldEnum[]
}

/**
 * KycDocument findMany
 */
export type KycDocumentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * Filter, which KycDocuments to fetch.
   */
  where?: Prisma.KycDocumentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of KycDocuments to fetch.
   */
  orderBy?: Prisma.KycDocumentOrderByWithRelationInput | Prisma.KycDocumentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing KycDocuments.
   */
  cursor?: Prisma.KycDocumentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` KycDocuments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` KycDocuments.
   */
  skip?: number
  distinct?: Prisma.KycDocumentScalarFieldEnum | Prisma.KycDocumentScalarFieldEnum[]
}

/**
 * KycDocument create
 */
export type KycDocumentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * The data needed to create a KycDocument.
   */
  data: Prisma.XOR<Prisma.KycDocumentCreateInput, Prisma.KycDocumentUncheckedCreateInput>
}

/**
 * KycDocument createMany
 */
export type KycDocumentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many KycDocuments.
   */
  data: Prisma.KycDocumentCreateManyInput | Prisma.KycDocumentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * KycDocument createManyAndReturn
 */
export type KycDocumentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * The data used to create many KycDocuments.
   */
  data: Prisma.KycDocumentCreateManyInput | Prisma.KycDocumentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * KycDocument update
 */
export type KycDocumentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * The data needed to update a KycDocument.
   */
  data: Prisma.XOR<Prisma.KycDocumentUpdateInput, Prisma.KycDocumentUncheckedUpdateInput>
  /**
   * Choose, which KycDocument to update.
   */
  where: Prisma.KycDocumentWhereUniqueInput
}

/**
 * KycDocument updateMany
 */
export type KycDocumentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update KycDocuments.
   */
  data: Prisma.XOR<Prisma.KycDocumentUpdateManyMutationInput, Prisma.KycDocumentUncheckedUpdateManyInput>
  /**
   * Filter which KycDocuments to update
   */
  where?: Prisma.KycDocumentWhereInput
  /**
   * Limit how many KycDocuments to update.
   */
  limit?: number
}

/**
 * KycDocument updateManyAndReturn
 */
export type KycDocumentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * The data used to update KycDocuments.
   */
  data: Prisma.XOR<Prisma.KycDocumentUpdateManyMutationInput, Prisma.KycDocumentUncheckedUpdateManyInput>
  /**
   * Filter which KycDocuments to update
   */
  where?: Prisma.KycDocumentWhereInput
  /**
   * Limit how many KycDocuments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * KycDocument upsert
 */
export type KycDocumentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * The filter to search for the KycDocument to update in case it exists.
   */
  where: Prisma.KycDocumentWhereUniqueInput
  /**
   * In case the KycDocument found by the `where` argument doesn't exist, create a new KycDocument with this data.
   */
  create: Prisma.XOR<Prisma.KycDocumentCreateInput, Prisma.KycDocumentUncheckedCreateInput>
  /**
   * In case the KycDocument was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.KycDocumentUpdateInput, Prisma.KycDocumentUncheckedUpdateInput>
}

/**
 * KycDocument delete
 */
export type KycDocumentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
  /**
   * Filter which KycDocument to delete.
   */
  where: Prisma.KycDocumentWhereUniqueInput
}

/**
 * KycDocument deleteMany
 */
export type KycDocumentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which KycDocuments to delete
   */
  where?: Prisma.KycDocumentWhereInput
  /**
   * Limit how many KycDocuments to delete.
   */
  limit?: number
}

/**
 * KycDocument without action
 */
export type KycDocumentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KycDocument
   */
  select?: Prisma.KycDocumentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KycDocument
   */
  omit?: Prisma.KycDocumentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KycDocumentInclude<ExtArgs> | null
}
