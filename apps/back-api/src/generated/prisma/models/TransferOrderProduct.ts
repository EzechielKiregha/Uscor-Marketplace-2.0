
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TransferOrderProduct` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TransferOrderProduct
 * 
 */
export type TransferOrderProductModel = runtime.Types.Result.DefaultSelection<Prisma.$TransferOrderProductPayload>

export type AggregateTransferOrderProduct = {
  _count: TransferOrderProductCountAggregateOutputType | null
  _avg: TransferOrderProductAvgAggregateOutputType | null
  _sum: TransferOrderProductSumAggregateOutputType | null
  _min: TransferOrderProductMinAggregateOutputType | null
  _max: TransferOrderProductMaxAggregateOutputType | null
}

export type TransferOrderProductAvgAggregateOutputType = {
  quantity: number | null
}

export type TransferOrderProductSumAggregateOutputType = {
  quantity: number | null
}

export type TransferOrderProductMinAggregateOutputType = {
  id: string | null
  transferOrderId: string | null
  productId: string | null
  quantity: number | null
  createdAt: Date | null
}

export type TransferOrderProductMaxAggregateOutputType = {
  id: string | null
  transferOrderId: string | null
  productId: string | null
  quantity: number | null
  createdAt: Date | null
}

export type TransferOrderProductCountAggregateOutputType = {
  id: number
  transferOrderId: number
  productId: number
  quantity: number
  createdAt: number
  _all: number
}


export type TransferOrderProductAvgAggregateInputType = {
  quantity?: true
}

export type TransferOrderProductSumAggregateInputType = {
  quantity?: true
}

export type TransferOrderProductMinAggregateInputType = {
  id?: true
  transferOrderId?: true
  productId?: true
  quantity?: true
  createdAt?: true
}

export type TransferOrderProductMaxAggregateInputType = {
  id?: true
  transferOrderId?: true
  productId?: true
  quantity?: true
  createdAt?: true
}

export type TransferOrderProductCountAggregateInputType = {
  id?: true
  transferOrderId?: true
  productId?: true
  quantity?: true
  createdAt?: true
  _all?: true
}

export type TransferOrderProductAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransferOrderProduct to aggregate.
   */
  where?: Prisma.TransferOrderProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransferOrderProducts to fetch.
   */
  orderBy?: Prisma.TransferOrderProductOrderByWithRelationInput | Prisma.TransferOrderProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TransferOrderProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransferOrderProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransferOrderProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TransferOrderProducts
  **/
  _count?: true | TransferOrderProductCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TransferOrderProductAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TransferOrderProductSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TransferOrderProductMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TransferOrderProductMaxAggregateInputType
}

export type GetTransferOrderProductAggregateType<T extends TransferOrderProductAggregateArgs> = {
      [P in keyof T & keyof AggregateTransferOrderProduct]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransferOrderProduct[P]>
    : Prisma.GetScalarType<T[P], AggregateTransferOrderProduct[P]>
}




export type TransferOrderProductGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransferOrderProductWhereInput
  orderBy?: Prisma.TransferOrderProductOrderByWithAggregationInput | Prisma.TransferOrderProductOrderByWithAggregationInput[]
  by: Prisma.TransferOrderProductScalarFieldEnum[] | Prisma.TransferOrderProductScalarFieldEnum
  having?: Prisma.TransferOrderProductScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TransferOrderProductCountAggregateInputType | true
  _avg?: TransferOrderProductAvgAggregateInputType
  _sum?: TransferOrderProductSumAggregateInputType
  _min?: TransferOrderProductMinAggregateInputType
  _max?: TransferOrderProductMaxAggregateInputType
}

export type TransferOrderProductGroupByOutputType = {
  id: string
  transferOrderId: string
  productId: string
  quantity: number
  createdAt: Date
  _count: TransferOrderProductCountAggregateOutputType | null
  _avg: TransferOrderProductAvgAggregateOutputType | null
  _sum: TransferOrderProductSumAggregateOutputType | null
  _min: TransferOrderProductMinAggregateOutputType | null
  _max: TransferOrderProductMaxAggregateOutputType | null
}

type GetTransferOrderProductGroupByPayload<T extends TransferOrderProductGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TransferOrderProductGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TransferOrderProductGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransferOrderProductGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransferOrderProductGroupByOutputType[P]>
      }
    >
  > 



export type TransferOrderProductWhereInput = {
  AND?: Prisma.TransferOrderProductWhereInput | Prisma.TransferOrderProductWhereInput[]
  OR?: Prisma.TransferOrderProductWhereInput[]
  NOT?: Prisma.TransferOrderProductWhereInput | Prisma.TransferOrderProductWhereInput[]
  id?: Prisma.StringFilter<"TransferOrderProduct"> | string
  transferOrderId?: Prisma.StringFilter<"TransferOrderProduct"> | string
  productId?: Prisma.StringFilter<"TransferOrderProduct"> | string
  quantity?: Prisma.IntFilter<"TransferOrderProduct"> | number
  createdAt?: Prisma.DateTimeFilter<"TransferOrderProduct"> | Date | string
  transferOrder?: Prisma.XOR<Prisma.TransferOrderScalarRelationFilter, Prisma.TransferOrderWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type TransferOrderProductOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  transferOrderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  transferOrder?: Prisma.TransferOrderOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
}

export type TransferOrderProductWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TransferOrderProductWhereInput | Prisma.TransferOrderProductWhereInput[]
  OR?: Prisma.TransferOrderProductWhereInput[]
  NOT?: Prisma.TransferOrderProductWhereInput | Prisma.TransferOrderProductWhereInput[]
  transferOrderId?: Prisma.StringFilter<"TransferOrderProduct"> | string
  productId?: Prisma.StringFilter<"TransferOrderProduct"> | string
  quantity?: Prisma.IntFilter<"TransferOrderProduct"> | number
  createdAt?: Prisma.DateTimeFilter<"TransferOrderProduct"> | Date | string
  transferOrder?: Prisma.XOR<Prisma.TransferOrderScalarRelationFilter, Prisma.TransferOrderWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type TransferOrderProductOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  transferOrderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.TransferOrderProductCountOrderByAggregateInput
  _avg?: Prisma.TransferOrderProductAvgOrderByAggregateInput
  _max?: Prisma.TransferOrderProductMaxOrderByAggregateInput
  _min?: Prisma.TransferOrderProductMinOrderByAggregateInput
  _sum?: Prisma.TransferOrderProductSumOrderByAggregateInput
}

export type TransferOrderProductScalarWhereWithAggregatesInput = {
  AND?: Prisma.TransferOrderProductScalarWhereWithAggregatesInput | Prisma.TransferOrderProductScalarWhereWithAggregatesInput[]
  OR?: Prisma.TransferOrderProductScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TransferOrderProductScalarWhereWithAggregatesInput | Prisma.TransferOrderProductScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TransferOrderProduct"> | string
  transferOrderId?: Prisma.StringWithAggregatesFilter<"TransferOrderProduct"> | string
  productId?: Prisma.StringWithAggregatesFilter<"TransferOrderProduct"> | string
  quantity?: Prisma.IntWithAggregatesFilter<"TransferOrderProduct"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TransferOrderProduct"> | Date | string
}

export type TransferOrderProductCreateInput = {
  id?: string
  quantity?: number
  createdAt?: Date | string
  transferOrder: Prisma.TransferOrderCreateNestedOneWithoutProductsInput
  product: Prisma.ProductCreateNestedOneWithoutTransferOrderProductsInput
}

export type TransferOrderProductUncheckedCreateInput = {
  id?: string
  transferOrderId: string
  productId: string
  quantity?: number
  createdAt?: Date | string
}

export type TransferOrderProductUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transferOrder?: Prisma.TransferOrderUpdateOneRequiredWithoutProductsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutTransferOrderProductsNestedInput
}

export type TransferOrderProductUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  transferOrderId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderProductCreateManyInput = {
  id?: string
  transferOrderId: string
  productId: string
  quantity?: number
  createdAt?: Date | string
}

export type TransferOrderProductUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderProductUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  transferOrderId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderProductListRelationFilter = {
  every?: Prisma.TransferOrderProductWhereInput
  some?: Prisma.TransferOrderProductWhereInput
  none?: Prisma.TransferOrderProductWhereInput
}

export type TransferOrderProductOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TransferOrderProductCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transferOrderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TransferOrderProductAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type TransferOrderProductMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transferOrderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TransferOrderProductMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  transferOrderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TransferOrderProductSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type TransferOrderProductCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutProductInput, Prisma.TransferOrderProductUncheckedCreateWithoutProductInput> | Prisma.TransferOrderProductCreateWithoutProductInput[] | Prisma.TransferOrderProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.TransferOrderProductCreateOrConnectWithoutProductInput | Prisma.TransferOrderProductCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.TransferOrderProductCreateManyProductInputEnvelope
  connect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
}

export type TransferOrderProductUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutProductInput, Prisma.TransferOrderProductUncheckedCreateWithoutProductInput> | Prisma.TransferOrderProductCreateWithoutProductInput[] | Prisma.TransferOrderProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.TransferOrderProductCreateOrConnectWithoutProductInput | Prisma.TransferOrderProductCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.TransferOrderProductCreateManyProductInputEnvelope
  connect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
}

export type TransferOrderProductUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutProductInput, Prisma.TransferOrderProductUncheckedCreateWithoutProductInput> | Prisma.TransferOrderProductCreateWithoutProductInput[] | Prisma.TransferOrderProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.TransferOrderProductCreateOrConnectWithoutProductInput | Prisma.TransferOrderProductCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.TransferOrderProductUpsertWithWhereUniqueWithoutProductInput | Prisma.TransferOrderProductUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.TransferOrderProductCreateManyProductInputEnvelope
  set?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  disconnect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  delete?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  connect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  update?: Prisma.TransferOrderProductUpdateWithWhereUniqueWithoutProductInput | Prisma.TransferOrderProductUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.TransferOrderProductUpdateManyWithWhereWithoutProductInput | Prisma.TransferOrderProductUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.TransferOrderProductScalarWhereInput | Prisma.TransferOrderProductScalarWhereInput[]
}

export type TransferOrderProductUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutProductInput, Prisma.TransferOrderProductUncheckedCreateWithoutProductInput> | Prisma.TransferOrderProductCreateWithoutProductInput[] | Prisma.TransferOrderProductUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.TransferOrderProductCreateOrConnectWithoutProductInput | Prisma.TransferOrderProductCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.TransferOrderProductUpsertWithWhereUniqueWithoutProductInput | Prisma.TransferOrderProductUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.TransferOrderProductCreateManyProductInputEnvelope
  set?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  disconnect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  delete?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  connect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  update?: Prisma.TransferOrderProductUpdateWithWhereUniqueWithoutProductInput | Prisma.TransferOrderProductUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.TransferOrderProductUpdateManyWithWhereWithoutProductInput | Prisma.TransferOrderProductUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.TransferOrderProductScalarWhereInput | Prisma.TransferOrderProductScalarWhereInput[]
}

export type TransferOrderProductCreateNestedManyWithoutTransferOrderInput = {
  create?: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutTransferOrderInput, Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput> | Prisma.TransferOrderProductCreateWithoutTransferOrderInput[] | Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput[]
  connectOrCreate?: Prisma.TransferOrderProductCreateOrConnectWithoutTransferOrderInput | Prisma.TransferOrderProductCreateOrConnectWithoutTransferOrderInput[]
  createMany?: Prisma.TransferOrderProductCreateManyTransferOrderInputEnvelope
  connect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
}

export type TransferOrderProductUncheckedCreateNestedManyWithoutTransferOrderInput = {
  create?: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutTransferOrderInput, Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput> | Prisma.TransferOrderProductCreateWithoutTransferOrderInput[] | Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput[]
  connectOrCreate?: Prisma.TransferOrderProductCreateOrConnectWithoutTransferOrderInput | Prisma.TransferOrderProductCreateOrConnectWithoutTransferOrderInput[]
  createMany?: Prisma.TransferOrderProductCreateManyTransferOrderInputEnvelope
  connect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
}

export type TransferOrderProductUpdateManyWithoutTransferOrderNestedInput = {
  create?: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutTransferOrderInput, Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput> | Prisma.TransferOrderProductCreateWithoutTransferOrderInput[] | Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput[]
  connectOrCreate?: Prisma.TransferOrderProductCreateOrConnectWithoutTransferOrderInput | Prisma.TransferOrderProductCreateOrConnectWithoutTransferOrderInput[]
  upsert?: Prisma.TransferOrderProductUpsertWithWhereUniqueWithoutTransferOrderInput | Prisma.TransferOrderProductUpsertWithWhereUniqueWithoutTransferOrderInput[]
  createMany?: Prisma.TransferOrderProductCreateManyTransferOrderInputEnvelope
  set?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  disconnect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  delete?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  connect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  update?: Prisma.TransferOrderProductUpdateWithWhereUniqueWithoutTransferOrderInput | Prisma.TransferOrderProductUpdateWithWhereUniqueWithoutTransferOrderInput[]
  updateMany?: Prisma.TransferOrderProductUpdateManyWithWhereWithoutTransferOrderInput | Prisma.TransferOrderProductUpdateManyWithWhereWithoutTransferOrderInput[]
  deleteMany?: Prisma.TransferOrderProductScalarWhereInput | Prisma.TransferOrderProductScalarWhereInput[]
}

export type TransferOrderProductUncheckedUpdateManyWithoutTransferOrderNestedInput = {
  create?: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutTransferOrderInput, Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput> | Prisma.TransferOrderProductCreateWithoutTransferOrderInput[] | Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput[]
  connectOrCreate?: Prisma.TransferOrderProductCreateOrConnectWithoutTransferOrderInput | Prisma.TransferOrderProductCreateOrConnectWithoutTransferOrderInput[]
  upsert?: Prisma.TransferOrderProductUpsertWithWhereUniqueWithoutTransferOrderInput | Prisma.TransferOrderProductUpsertWithWhereUniqueWithoutTransferOrderInput[]
  createMany?: Prisma.TransferOrderProductCreateManyTransferOrderInputEnvelope
  set?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  disconnect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  delete?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  connect?: Prisma.TransferOrderProductWhereUniqueInput | Prisma.TransferOrderProductWhereUniqueInput[]
  update?: Prisma.TransferOrderProductUpdateWithWhereUniqueWithoutTransferOrderInput | Prisma.TransferOrderProductUpdateWithWhereUniqueWithoutTransferOrderInput[]
  updateMany?: Prisma.TransferOrderProductUpdateManyWithWhereWithoutTransferOrderInput | Prisma.TransferOrderProductUpdateManyWithWhereWithoutTransferOrderInput[]
  deleteMany?: Prisma.TransferOrderProductScalarWhereInput | Prisma.TransferOrderProductScalarWhereInput[]
}

export type TransferOrderProductCreateWithoutProductInput = {
  id?: string
  quantity?: number
  createdAt?: Date | string
  transferOrder: Prisma.TransferOrderCreateNestedOneWithoutProductsInput
}

export type TransferOrderProductUncheckedCreateWithoutProductInput = {
  id?: string
  transferOrderId: string
  quantity?: number
  createdAt?: Date | string
}

export type TransferOrderProductCreateOrConnectWithoutProductInput = {
  where: Prisma.TransferOrderProductWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutProductInput, Prisma.TransferOrderProductUncheckedCreateWithoutProductInput>
}

export type TransferOrderProductCreateManyProductInputEnvelope = {
  data: Prisma.TransferOrderProductCreateManyProductInput | Prisma.TransferOrderProductCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type TransferOrderProductUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.TransferOrderProductWhereUniqueInput
  update: Prisma.XOR<Prisma.TransferOrderProductUpdateWithoutProductInput, Prisma.TransferOrderProductUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutProductInput, Prisma.TransferOrderProductUncheckedCreateWithoutProductInput>
}

export type TransferOrderProductUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.TransferOrderProductWhereUniqueInput
  data: Prisma.XOR<Prisma.TransferOrderProductUpdateWithoutProductInput, Prisma.TransferOrderProductUncheckedUpdateWithoutProductInput>
}

export type TransferOrderProductUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.TransferOrderProductScalarWhereInput
  data: Prisma.XOR<Prisma.TransferOrderProductUpdateManyMutationInput, Prisma.TransferOrderProductUncheckedUpdateManyWithoutProductInput>
}

export type TransferOrderProductScalarWhereInput = {
  AND?: Prisma.TransferOrderProductScalarWhereInput | Prisma.TransferOrderProductScalarWhereInput[]
  OR?: Prisma.TransferOrderProductScalarWhereInput[]
  NOT?: Prisma.TransferOrderProductScalarWhereInput | Prisma.TransferOrderProductScalarWhereInput[]
  id?: Prisma.StringFilter<"TransferOrderProduct"> | string
  transferOrderId?: Prisma.StringFilter<"TransferOrderProduct"> | string
  productId?: Prisma.StringFilter<"TransferOrderProduct"> | string
  quantity?: Prisma.IntFilter<"TransferOrderProduct"> | number
  createdAt?: Prisma.DateTimeFilter<"TransferOrderProduct"> | Date | string
}

export type TransferOrderProductCreateWithoutTransferOrderInput = {
  id?: string
  quantity?: number
  createdAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutTransferOrderProductsInput
}

export type TransferOrderProductUncheckedCreateWithoutTransferOrderInput = {
  id?: string
  productId: string
  quantity?: number
  createdAt?: Date | string
}

export type TransferOrderProductCreateOrConnectWithoutTransferOrderInput = {
  where: Prisma.TransferOrderProductWhereUniqueInput
  create: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutTransferOrderInput, Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput>
}

export type TransferOrderProductCreateManyTransferOrderInputEnvelope = {
  data: Prisma.TransferOrderProductCreateManyTransferOrderInput | Prisma.TransferOrderProductCreateManyTransferOrderInput[]
  skipDuplicates?: boolean
}

export type TransferOrderProductUpsertWithWhereUniqueWithoutTransferOrderInput = {
  where: Prisma.TransferOrderProductWhereUniqueInput
  update: Prisma.XOR<Prisma.TransferOrderProductUpdateWithoutTransferOrderInput, Prisma.TransferOrderProductUncheckedUpdateWithoutTransferOrderInput>
  create: Prisma.XOR<Prisma.TransferOrderProductCreateWithoutTransferOrderInput, Prisma.TransferOrderProductUncheckedCreateWithoutTransferOrderInput>
}

export type TransferOrderProductUpdateWithWhereUniqueWithoutTransferOrderInput = {
  where: Prisma.TransferOrderProductWhereUniqueInput
  data: Prisma.XOR<Prisma.TransferOrderProductUpdateWithoutTransferOrderInput, Prisma.TransferOrderProductUncheckedUpdateWithoutTransferOrderInput>
}

export type TransferOrderProductUpdateManyWithWhereWithoutTransferOrderInput = {
  where: Prisma.TransferOrderProductScalarWhereInput
  data: Prisma.XOR<Prisma.TransferOrderProductUpdateManyMutationInput, Prisma.TransferOrderProductUncheckedUpdateManyWithoutTransferOrderInput>
}

export type TransferOrderProductCreateManyProductInput = {
  id?: string
  transferOrderId: string
  quantity?: number
  createdAt?: Date | string
}

export type TransferOrderProductUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  transferOrder?: Prisma.TransferOrderUpdateOneRequiredWithoutProductsNestedInput
}

export type TransferOrderProductUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  transferOrderId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderProductUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  transferOrderId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderProductCreateManyTransferOrderInput = {
  id?: string
  productId: string
  quantity?: number
  createdAt?: Date | string
}

export type TransferOrderProductUpdateWithoutTransferOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutTransferOrderProductsNestedInput
}

export type TransferOrderProductUncheckedUpdateWithoutTransferOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TransferOrderProductUncheckedUpdateManyWithoutTransferOrderInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type TransferOrderProductSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transferOrderId?: boolean
  productId?: boolean
  quantity?: boolean
  createdAt?: boolean
  transferOrder?: boolean | Prisma.TransferOrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transferOrderProduct"]>

export type TransferOrderProductSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transferOrderId?: boolean
  productId?: boolean
  quantity?: boolean
  createdAt?: boolean
  transferOrder?: boolean | Prisma.TransferOrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transferOrderProduct"]>

export type TransferOrderProductSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  transferOrderId?: boolean
  productId?: boolean
  quantity?: boolean
  createdAt?: boolean
  transferOrder?: boolean | Prisma.TransferOrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transferOrderProduct"]>

export type TransferOrderProductSelectScalar = {
  id?: boolean
  transferOrderId?: boolean
  productId?: boolean
  quantity?: boolean
  createdAt?: boolean
}

export type TransferOrderProductOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "transferOrderId" | "productId" | "quantity" | "createdAt", ExtArgs["result"]["transferOrderProduct"]>
export type TransferOrderProductInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transferOrder?: boolean | Prisma.TransferOrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type TransferOrderProductIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transferOrder?: boolean | Prisma.TransferOrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type TransferOrderProductIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transferOrder?: boolean | Prisma.TransferOrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $TransferOrderProductPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TransferOrderProduct"
  objects: {
    transferOrder: Prisma.$TransferOrderPayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    transferOrderId: string
    productId: string
    quantity: number
    createdAt: Date
  }, ExtArgs["result"]["transferOrderProduct"]>
  composites: {}
}

export type TransferOrderProductGetPayload<S extends boolean | null | undefined | TransferOrderProductDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload, S>

export type TransferOrderProductCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TransferOrderProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TransferOrderProductCountAggregateInputType | true
  }

export interface TransferOrderProductDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransferOrderProduct'], meta: { name: 'TransferOrderProduct' } }
  /**
   * Find zero or one TransferOrderProduct that matches the filter.
   * @param {TransferOrderProductFindUniqueArgs} args - Arguments to find a TransferOrderProduct
   * @example
   * // Get one TransferOrderProduct
   * const transferOrderProduct = await prisma.transferOrderProduct.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransferOrderProductFindUniqueArgs>(args: Prisma.SelectSubset<T, TransferOrderProductFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TransferOrderProductClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TransferOrderProduct that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransferOrderProductFindUniqueOrThrowArgs} args - Arguments to find a TransferOrderProduct
   * @example
   * // Get one TransferOrderProduct
   * const transferOrderProduct = await prisma.transferOrderProduct.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransferOrderProductFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TransferOrderProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransferOrderProductClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransferOrderProduct that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderProductFindFirstArgs} args - Arguments to find a TransferOrderProduct
   * @example
   * // Get one TransferOrderProduct
   * const transferOrderProduct = await prisma.transferOrderProduct.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransferOrderProductFindFirstArgs>(args?: Prisma.SelectSubset<T, TransferOrderProductFindFirstArgs<ExtArgs>>): Prisma.Prisma__TransferOrderProductClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransferOrderProduct that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderProductFindFirstOrThrowArgs} args - Arguments to find a TransferOrderProduct
   * @example
   * // Get one TransferOrderProduct
   * const transferOrderProduct = await prisma.transferOrderProduct.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransferOrderProductFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TransferOrderProductFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransferOrderProductClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TransferOrderProducts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderProductFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TransferOrderProducts
   * const transferOrderProducts = await prisma.transferOrderProduct.findMany()
   * 
   * // Get first 10 TransferOrderProducts
   * const transferOrderProducts = await prisma.transferOrderProduct.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const transferOrderProductWithIdOnly = await prisma.transferOrderProduct.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TransferOrderProductFindManyArgs>(args?: Prisma.SelectSubset<T, TransferOrderProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TransferOrderProduct.
   * @param {TransferOrderProductCreateArgs} args - Arguments to create a TransferOrderProduct.
   * @example
   * // Create one TransferOrderProduct
   * const TransferOrderProduct = await prisma.transferOrderProduct.create({
   *   data: {
   *     // ... data to create a TransferOrderProduct
   *   }
   * })
   * 
   */
  create<T extends TransferOrderProductCreateArgs>(args: Prisma.SelectSubset<T, TransferOrderProductCreateArgs<ExtArgs>>): Prisma.Prisma__TransferOrderProductClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TransferOrderProducts.
   * @param {TransferOrderProductCreateManyArgs} args - Arguments to create many TransferOrderProducts.
   * @example
   * // Create many TransferOrderProducts
   * const transferOrderProduct = await prisma.transferOrderProduct.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TransferOrderProductCreateManyArgs>(args?: Prisma.SelectSubset<T, TransferOrderProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TransferOrderProducts and returns the data saved in the database.
   * @param {TransferOrderProductCreateManyAndReturnArgs} args - Arguments to create many TransferOrderProducts.
   * @example
   * // Create many TransferOrderProducts
   * const transferOrderProduct = await prisma.transferOrderProduct.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TransferOrderProducts and only return the `id`
   * const transferOrderProductWithIdOnly = await prisma.transferOrderProduct.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TransferOrderProductCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TransferOrderProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TransferOrderProduct.
   * @param {TransferOrderProductDeleteArgs} args - Arguments to delete one TransferOrderProduct.
   * @example
   * // Delete one TransferOrderProduct
   * const TransferOrderProduct = await prisma.transferOrderProduct.delete({
   *   where: {
   *     // ... filter to delete one TransferOrderProduct
   *   }
   * })
   * 
   */
  delete<T extends TransferOrderProductDeleteArgs>(args: Prisma.SelectSubset<T, TransferOrderProductDeleteArgs<ExtArgs>>): Prisma.Prisma__TransferOrderProductClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TransferOrderProduct.
   * @param {TransferOrderProductUpdateArgs} args - Arguments to update one TransferOrderProduct.
   * @example
   * // Update one TransferOrderProduct
   * const transferOrderProduct = await prisma.transferOrderProduct.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TransferOrderProductUpdateArgs>(args: Prisma.SelectSubset<T, TransferOrderProductUpdateArgs<ExtArgs>>): Prisma.Prisma__TransferOrderProductClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TransferOrderProducts.
   * @param {TransferOrderProductDeleteManyArgs} args - Arguments to filter TransferOrderProducts to delete.
   * @example
   * // Delete a few TransferOrderProducts
   * const { count } = await prisma.transferOrderProduct.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TransferOrderProductDeleteManyArgs>(args?: Prisma.SelectSubset<T, TransferOrderProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransferOrderProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderProductUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TransferOrderProducts
   * const transferOrderProduct = await prisma.transferOrderProduct.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TransferOrderProductUpdateManyArgs>(args: Prisma.SelectSubset<T, TransferOrderProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransferOrderProducts and returns the data updated in the database.
   * @param {TransferOrderProductUpdateManyAndReturnArgs} args - Arguments to update many TransferOrderProducts.
   * @example
   * // Update many TransferOrderProducts
   * const transferOrderProduct = await prisma.transferOrderProduct.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TransferOrderProducts and only return the `id`
   * const transferOrderProductWithIdOnly = await prisma.transferOrderProduct.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TransferOrderProductUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TransferOrderProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TransferOrderProduct.
   * @param {TransferOrderProductUpsertArgs} args - Arguments to update or create a TransferOrderProduct.
   * @example
   * // Update or create a TransferOrderProduct
   * const transferOrderProduct = await prisma.transferOrderProduct.upsert({
   *   create: {
   *     // ... data to create a TransferOrderProduct
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TransferOrderProduct we want to update
   *   }
   * })
   */
  upsert<T extends TransferOrderProductUpsertArgs>(args: Prisma.SelectSubset<T, TransferOrderProductUpsertArgs<ExtArgs>>): Prisma.Prisma__TransferOrderProductClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TransferOrderProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderProductCountArgs} args - Arguments to filter TransferOrderProducts to count.
   * @example
   * // Count the number of TransferOrderProducts
   * const count = await prisma.transferOrderProduct.count({
   *   where: {
   *     // ... the filter for the TransferOrderProducts we want to count
   *   }
   * })
  **/
  count<T extends TransferOrderProductCountArgs>(
    args?: Prisma.Subset<T, TransferOrderProductCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TransferOrderProductCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TransferOrderProduct.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TransferOrderProductAggregateArgs>(args: Prisma.Subset<T, TransferOrderProductAggregateArgs>): Prisma.PrismaPromise<GetTransferOrderProductAggregateType<T>>

  /**
   * Group by TransferOrderProduct.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransferOrderProductGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TransferOrderProductGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransferOrderProductGroupByArgs['orderBy'] }
      : { orderBy?: TransferOrderProductGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TransferOrderProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransferOrderProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TransferOrderProduct model
 */
readonly fields: TransferOrderProductFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TransferOrderProduct.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransferOrderProductClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  transferOrder<T extends Prisma.TransferOrderDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TransferOrderDefaultArgs<ExtArgs>>): Prisma.Prisma__TransferOrderClient<runtime.Types.Result.GetResult<Prisma.$TransferOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TransferOrderProduct model
 */
export interface TransferOrderProductFieldRefs {
  readonly id: Prisma.FieldRef<"TransferOrderProduct", 'String'>
  readonly transferOrderId: Prisma.FieldRef<"TransferOrderProduct", 'String'>
  readonly productId: Prisma.FieldRef<"TransferOrderProduct", 'String'>
  readonly quantity: Prisma.FieldRef<"TransferOrderProduct", 'Int'>
  readonly createdAt: Prisma.FieldRef<"TransferOrderProduct", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TransferOrderProduct findUnique
 */
export type TransferOrderProductFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrderProduct to fetch.
   */
  where: Prisma.TransferOrderProductWhereUniqueInput
}

/**
 * TransferOrderProduct findUniqueOrThrow
 */
export type TransferOrderProductFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrderProduct to fetch.
   */
  where: Prisma.TransferOrderProductWhereUniqueInput
}

/**
 * TransferOrderProduct findFirst
 */
export type TransferOrderProductFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrderProduct to fetch.
   */
  where?: Prisma.TransferOrderProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransferOrderProducts to fetch.
   */
  orderBy?: Prisma.TransferOrderProductOrderByWithRelationInput | Prisma.TransferOrderProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransferOrderProducts.
   */
  cursor?: Prisma.TransferOrderProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransferOrderProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransferOrderProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransferOrderProducts.
   */
  distinct?: Prisma.TransferOrderProductScalarFieldEnum | Prisma.TransferOrderProductScalarFieldEnum[]
}

/**
 * TransferOrderProduct findFirstOrThrow
 */
export type TransferOrderProductFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrderProduct to fetch.
   */
  where?: Prisma.TransferOrderProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransferOrderProducts to fetch.
   */
  orderBy?: Prisma.TransferOrderProductOrderByWithRelationInput | Prisma.TransferOrderProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransferOrderProducts.
   */
  cursor?: Prisma.TransferOrderProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransferOrderProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransferOrderProducts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransferOrderProducts.
   */
  distinct?: Prisma.TransferOrderProductScalarFieldEnum | Prisma.TransferOrderProductScalarFieldEnum[]
}

/**
 * TransferOrderProduct findMany
 */
export type TransferOrderProductFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * Filter, which TransferOrderProducts to fetch.
   */
  where?: Prisma.TransferOrderProductWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransferOrderProducts to fetch.
   */
  orderBy?: Prisma.TransferOrderProductOrderByWithRelationInput | Prisma.TransferOrderProductOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TransferOrderProducts.
   */
  cursor?: Prisma.TransferOrderProductWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransferOrderProducts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransferOrderProducts.
   */
  skip?: number
  distinct?: Prisma.TransferOrderProductScalarFieldEnum | Prisma.TransferOrderProductScalarFieldEnum[]
}

/**
 * TransferOrderProduct create
 */
export type TransferOrderProductCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * The data needed to create a TransferOrderProduct.
   */
  data: Prisma.XOR<Prisma.TransferOrderProductCreateInput, Prisma.TransferOrderProductUncheckedCreateInput>
}

/**
 * TransferOrderProduct createMany
 */
export type TransferOrderProductCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TransferOrderProducts.
   */
  data: Prisma.TransferOrderProductCreateManyInput | Prisma.TransferOrderProductCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TransferOrderProduct createManyAndReturn
 */
export type TransferOrderProductCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * The data used to create many TransferOrderProducts.
   */
  data: Prisma.TransferOrderProductCreateManyInput | Prisma.TransferOrderProductCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TransferOrderProduct update
 */
export type TransferOrderProductUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * The data needed to update a TransferOrderProduct.
   */
  data: Prisma.XOR<Prisma.TransferOrderProductUpdateInput, Prisma.TransferOrderProductUncheckedUpdateInput>
  /**
   * Choose, which TransferOrderProduct to update.
   */
  where: Prisma.TransferOrderProductWhereUniqueInput
}

/**
 * TransferOrderProduct updateMany
 */
export type TransferOrderProductUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TransferOrderProducts.
   */
  data: Prisma.XOR<Prisma.TransferOrderProductUpdateManyMutationInput, Prisma.TransferOrderProductUncheckedUpdateManyInput>
  /**
   * Filter which TransferOrderProducts to update
   */
  where?: Prisma.TransferOrderProductWhereInput
  /**
   * Limit how many TransferOrderProducts to update.
   */
  limit?: number
}

/**
 * TransferOrderProduct updateManyAndReturn
 */
export type TransferOrderProductUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * The data used to update TransferOrderProducts.
   */
  data: Prisma.XOR<Prisma.TransferOrderProductUpdateManyMutationInput, Prisma.TransferOrderProductUncheckedUpdateManyInput>
  /**
   * Filter which TransferOrderProducts to update
   */
  where?: Prisma.TransferOrderProductWhereInput
  /**
   * Limit how many TransferOrderProducts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TransferOrderProduct upsert
 */
export type TransferOrderProductUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * The filter to search for the TransferOrderProduct to update in case it exists.
   */
  where: Prisma.TransferOrderProductWhereUniqueInput
  /**
   * In case the TransferOrderProduct found by the `where` argument doesn't exist, create a new TransferOrderProduct with this data.
   */
  create: Prisma.XOR<Prisma.TransferOrderProductCreateInput, Prisma.TransferOrderProductUncheckedCreateInput>
  /**
   * In case the TransferOrderProduct was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TransferOrderProductUpdateInput, Prisma.TransferOrderProductUncheckedUpdateInput>
}

/**
 * TransferOrderProduct delete
 */
export type TransferOrderProductDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
  /**
   * Filter which TransferOrderProduct to delete.
   */
  where: Prisma.TransferOrderProductWhereUniqueInput
}

/**
 * TransferOrderProduct deleteMany
 */
export type TransferOrderProductDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransferOrderProducts to delete
   */
  where?: Prisma.TransferOrderProductWhereInput
  /**
   * Limit how many TransferOrderProducts to delete.
   */
  limit?: number
}

/**
 * TransferOrderProduct without action
 */
export type TransferOrderProductDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransferOrderProduct
   */
  select?: Prisma.TransferOrderProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransferOrderProduct
   */
  omit?: Prisma.TransferOrderProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransferOrderProductInclude<ExtArgs> | null
}
