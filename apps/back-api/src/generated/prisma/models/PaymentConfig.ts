
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PaymentConfig` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PaymentConfig
 * 
 */
export type PaymentConfigModel = runtime.Types.Result.DefaultSelection<Prisma.$PaymentConfigPayload>

export type AggregatePaymentConfig = {
  _count: PaymentConfigCountAggregateOutputType | null
  _min: PaymentConfigMinAggregateOutputType | null
  _max: PaymentConfigMaxAggregateOutputType | null
}

export type PaymentConfigMinAggregateOutputType = {
  id: string | null
  businessId: string | null
  mtnCode: string | null
  airtelCode: string | null
  orangeCode: string | null
  mpesaCode: string | null
  bankAccount: string | null
  mobileMoneyEnabled: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PaymentConfigMaxAggregateOutputType = {
  id: string | null
  businessId: string | null
  mtnCode: string | null
  airtelCode: string | null
  orangeCode: string | null
  mpesaCode: string | null
  bankAccount: string | null
  mobileMoneyEnabled: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PaymentConfigCountAggregateOutputType = {
  id: number
  businessId: number
  mtnCode: number
  airtelCode: number
  orangeCode: number
  mpesaCode: number
  bankAccount: number
  mobileMoneyEnabled: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PaymentConfigMinAggregateInputType = {
  id?: true
  businessId?: true
  mtnCode?: true
  airtelCode?: true
  orangeCode?: true
  mpesaCode?: true
  bankAccount?: true
  mobileMoneyEnabled?: true
  createdAt?: true
  updatedAt?: true
}

export type PaymentConfigMaxAggregateInputType = {
  id?: true
  businessId?: true
  mtnCode?: true
  airtelCode?: true
  orangeCode?: true
  mpesaCode?: true
  bankAccount?: true
  mobileMoneyEnabled?: true
  createdAt?: true
  updatedAt?: true
}

export type PaymentConfigCountAggregateInputType = {
  id?: true
  businessId?: true
  mtnCode?: true
  airtelCode?: true
  orangeCode?: true
  mpesaCode?: true
  bankAccount?: true
  mobileMoneyEnabled?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PaymentConfigAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentConfig to aggregate.
   */
  where?: Prisma.PaymentConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentConfigs to fetch.
   */
  orderBy?: Prisma.PaymentConfigOrderByWithRelationInput | Prisma.PaymentConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PaymentConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PaymentConfigs
  **/
  _count?: true | PaymentConfigCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PaymentConfigMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PaymentConfigMaxAggregateInputType
}

export type GetPaymentConfigAggregateType<T extends PaymentConfigAggregateArgs> = {
      [P in keyof T & keyof AggregatePaymentConfig]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePaymentConfig[P]>
    : Prisma.GetScalarType<T[P], AggregatePaymentConfig[P]>
}




export type PaymentConfigGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentConfigWhereInput
  orderBy?: Prisma.PaymentConfigOrderByWithAggregationInput | Prisma.PaymentConfigOrderByWithAggregationInput[]
  by: Prisma.PaymentConfigScalarFieldEnum[] | Prisma.PaymentConfigScalarFieldEnum
  having?: Prisma.PaymentConfigScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PaymentConfigCountAggregateInputType | true
  _min?: PaymentConfigMinAggregateInputType
  _max?: PaymentConfigMaxAggregateInputType
}

export type PaymentConfigGroupByOutputType = {
  id: string
  businessId: string
  mtnCode: string | null
  airtelCode: string | null
  orangeCode: string | null
  mpesaCode: string | null
  bankAccount: string | null
  mobileMoneyEnabled: boolean
  createdAt: Date
  updatedAt: Date
  _count: PaymentConfigCountAggregateOutputType | null
  _min: PaymentConfigMinAggregateOutputType | null
  _max: PaymentConfigMaxAggregateOutputType | null
}

type GetPaymentConfigGroupByPayload<T extends PaymentConfigGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PaymentConfigGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PaymentConfigGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PaymentConfigGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PaymentConfigGroupByOutputType[P]>
      }
    >
  >



export type PaymentConfigWhereInput = {
  AND?: Prisma.PaymentConfigWhereInput | Prisma.PaymentConfigWhereInput[]
  OR?: Prisma.PaymentConfigWhereInput[]
  NOT?: Prisma.PaymentConfigWhereInput | Prisma.PaymentConfigWhereInput[]
  id?: Prisma.StringFilter<"PaymentConfig"> | string
  businessId?: Prisma.StringFilter<"PaymentConfig"> | string
  mtnCode?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  airtelCode?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  orangeCode?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  mpesaCode?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  bankAccount?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  mobileMoneyEnabled?: Prisma.BoolFilter<"PaymentConfig"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PaymentConfig"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentConfig"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
}

export type PaymentConfigOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  mtnCode?: Prisma.SortOrderInput | Prisma.SortOrder
  airtelCode?: Prisma.SortOrderInput | Prisma.SortOrder
  orangeCode?: Prisma.SortOrderInput | Prisma.SortOrder
  mpesaCode?: Prisma.SortOrderInput | Prisma.SortOrder
  bankAccount?: Prisma.SortOrderInput | Prisma.SortOrder
  mobileMoneyEnabled?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  business?: Prisma.BusinessOrderByWithRelationInput
}

export type PaymentConfigWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  businessId?: string
  AND?: Prisma.PaymentConfigWhereInput | Prisma.PaymentConfigWhereInput[]
  OR?: Prisma.PaymentConfigWhereInput[]
  NOT?: Prisma.PaymentConfigWhereInput | Prisma.PaymentConfigWhereInput[]
  mtnCode?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  airtelCode?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  orangeCode?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  mpesaCode?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  bankAccount?: Prisma.StringNullableFilter<"PaymentConfig"> | string | null
  mobileMoneyEnabled?: Prisma.BoolFilter<"PaymentConfig"> | boolean
  createdAt?: Prisma.DateTimeFilter<"PaymentConfig"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PaymentConfig"> | Date | string
  business?: Prisma.XOR<Prisma.BusinessScalarRelationFilter, Prisma.BusinessWhereInput>
}, "id" | "businessId">

export type PaymentConfigOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  mtnCode?: Prisma.SortOrderInput | Prisma.SortOrder
  airtelCode?: Prisma.SortOrderInput | Prisma.SortOrder
  orangeCode?: Prisma.SortOrderInput | Prisma.SortOrder
  mpesaCode?: Prisma.SortOrderInput | Prisma.SortOrder
  bankAccount?: Prisma.SortOrderInput | Prisma.SortOrder
  mobileMoneyEnabled?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PaymentConfigCountOrderByAggregateInput
  _max?: Prisma.PaymentConfigMaxOrderByAggregateInput
  _min?: Prisma.PaymentConfigMinOrderByAggregateInput
}

export type PaymentConfigScalarWhereWithAggregatesInput = {
  AND?: Prisma.PaymentConfigScalarWhereWithAggregatesInput | Prisma.PaymentConfigScalarWhereWithAggregatesInput[]
  OR?: Prisma.PaymentConfigScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PaymentConfigScalarWhereWithAggregatesInput | Prisma.PaymentConfigScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PaymentConfig"> | string
  businessId?: Prisma.StringWithAggregatesFilter<"PaymentConfig"> | string
  mtnCode?: Prisma.StringNullableWithAggregatesFilter<"PaymentConfig"> | string | null
  airtelCode?: Prisma.StringNullableWithAggregatesFilter<"PaymentConfig"> | string | null
  orangeCode?: Prisma.StringNullableWithAggregatesFilter<"PaymentConfig"> | string | null
  mpesaCode?: Prisma.StringNullableWithAggregatesFilter<"PaymentConfig"> | string | null
  bankAccount?: Prisma.StringNullableWithAggregatesFilter<"PaymentConfig"> | string | null
  mobileMoneyEnabled?: Prisma.BoolWithAggregatesFilter<"PaymentConfig"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentConfig"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PaymentConfig"> | Date | string
}

export type PaymentConfigCreateInput = {
  id?: string
  mtnCode?: string | null
  airtelCode?: string | null
  orangeCode?: string | null
  mpesaCode?: string | null
  bankAccount?: string | null
  mobileMoneyEnabled?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  business: Prisma.BusinessCreateNestedOneWithoutPaymentConfigInput
}

export type PaymentConfigUncheckedCreateInput = {
  id?: string
  businessId: string
  mtnCode?: string | null
  airtelCode?: string | null
  orangeCode?: string | null
  mpesaCode?: string | null
  bankAccount?: string | null
  mobileMoneyEnabled?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentConfigUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mtnCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  airtelCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orangeCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mpesaCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccount?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mobileMoneyEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  business?: Prisma.BusinessUpdateOneRequiredWithoutPaymentConfigNestedInput
}

export type PaymentConfigUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  mtnCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  airtelCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orangeCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mpesaCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccount?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mobileMoneyEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentConfigCreateManyInput = {
  id?: string
  businessId: string
  mtnCode?: string | null
  airtelCode?: string | null
  orangeCode?: string | null
  mpesaCode?: string | null
  bankAccount?: string | null
  mobileMoneyEnabled?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentConfigUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mtnCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  airtelCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orangeCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mpesaCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccount?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mobileMoneyEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentConfigUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  businessId?: Prisma.StringFieldUpdateOperationsInput | string
  mtnCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  airtelCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orangeCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mpesaCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccount?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mobileMoneyEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentConfigNullableScalarRelationFilter = {
  is?: Prisma.PaymentConfigWhereInput | null
  isNot?: Prisma.PaymentConfigWhereInput | null
}

export type PaymentConfigCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  mtnCode?: Prisma.SortOrder
  airtelCode?: Prisma.SortOrder
  orangeCode?: Prisma.SortOrder
  mpesaCode?: Prisma.SortOrder
  bankAccount?: Prisma.SortOrder
  mobileMoneyEnabled?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentConfigMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  mtnCode?: Prisma.SortOrder
  airtelCode?: Prisma.SortOrder
  orangeCode?: Prisma.SortOrder
  mpesaCode?: Prisma.SortOrder
  bankAccount?: Prisma.SortOrder
  mobileMoneyEnabled?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentConfigMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  businessId?: Prisma.SortOrder
  mtnCode?: Prisma.SortOrder
  airtelCode?: Prisma.SortOrder
  orangeCode?: Prisma.SortOrder
  mpesaCode?: Prisma.SortOrder
  bankAccount?: Prisma.SortOrder
  mobileMoneyEnabled?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PaymentConfigCreateNestedOneWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.PaymentConfigCreateWithoutBusinessInput, Prisma.PaymentConfigUncheckedCreateWithoutBusinessInput>
  connectOrCreate?: Prisma.PaymentConfigCreateOrConnectWithoutBusinessInput
  connect?: Prisma.PaymentConfigWhereUniqueInput
}

export type PaymentConfigUncheckedCreateNestedOneWithoutBusinessInput = {
  create?: Prisma.XOR<Prisma.PaymentConfigCreateWithoutBusinessInput, Prisma.PaymentConfigUncheckedCreateWithoutBusinessInput>
  connectOrCreate?: Prisma.PaymentConfigCreateOrConnectWithoutBusinessInput
  connect?: Prisma.PaymentConfigWhereUniqueInput
}

export type PaymentConfigUpdateOneWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentConfigCreateWithoutBusinessInput, Prisma.PaymentConfigUncheckedCreateWithoutBusinessInput>
  connectOrCreate?: Prisma.PaymentConfigCreateOrConnectWithoutBusinessInput
  upsert?: Prisma.PaymentConfigUpsertWithoutBusinessInput
  disconnect?: Prisma.PaymentConfigWhereInput | boolean
  delete?: Prisma.PaymentConfigWhereInput | boolean
  connect?: Prisma.PaymentConfigWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentConfigUpdateToOneWithWhereWithoutBusinessInput, Prisma.PaymentConfigUpdateWithoutBusinessInput>, Prisma.PaymentConfigUncheckedUpdateWithoutBusinessInput>
}

export type PaymentConfigUncheckedUpdateOneWithoutBusinessNestedInput = {
  create?: Prisma.XOR<Prisma.PaymentConfigCreateWithoutBusinessInput, Prisma.PaymentConfigUncheckedCreateWithoutBusinessInput>
  connectOrCreate?: Prisma.PaymentConfigCreateOrConnectWithoutBusinessInput
  upsert?: Prisma.PaymentConfigUpsertWithoutBusinessInput
  disconnect?: Prisma.PaymentConfigWhereInput | boolean
  delete?: Prisma.PaymentConfigWhereInput | boolean
  connect?: Prisma.PaymentConfigWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PaymentConfigUpdateToOneWithWhereWithoutBusinessInput, Prisma.PaymentConfigUpdateWithoutBusinessInput>, Prisma.PaymentConfigUncheckedUpdateWithoutBusinessInput>
}

export type PaymentConfigCreateWithoutBusinessInput = {
  id?: string
  mtnCode?: string | null
  airtelCode?: string | null
  orangeCode?: string | null
  mpesaCode?: string | null
  bankAccount?: string | null
  mobileMoneyEnabled?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentConfigUncheckedCreateWithoutBusinessInput = {
  id?: string
  mtnCode?: string | null
  airtelCode?: string | null
  orangeCode?: string | null
  mpesaCode?: string | null
  bankAccount?: string | null
  mobileMoneyEnabled?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PaymentConfigCreateOrConnectWithoutBusinessInput = {
  where: Prisma.PaymentConfigWhereUniqueInput
  create: Prisma.XOR<Prisma.PaymentConfigCreateWithoutBusinessInput, Prisma.PaymentConfigUncheckedCreateWithoutBusinessInput>
}

export type PaymentConfigUpsertWithoutBusinessInput = {
  update: Prisma.XOR<Prisma.PaymentConfigUpdateWithoutBusinessInput, Prisma.PaymentConfigUncheckedUpdateWithoutBusinessInput>
  create: Prisma.XOR<Prisma.PaymentConfigCreateWithoutBusinessInput, Prisma.PaymentConfigUncheckedCreateWithoutBusinessInput>
  where?: Prisma.PaymentConfigWhereInput
}

export type PaymentConfigUpdateToOneWithWhereWithoutBusinessInput = {
  where?: Prisma.PaymentConfigWhereInput
  data: Prisma.XOR<Prisma.PaymentConfigUpdateWithoutBusinessInput, Prisma.PaymentConfigUncheckedUpdateWithoutBusinessInput>
}

export type PaymentConfigUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mtnCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  airtelCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orangeCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mpesaCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccount?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mobileMoneyEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PaymentConfigUncheckedUpdateWithoutBusinessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mtnCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  airtelCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orangeCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mpesaCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccount?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  mobileMoneyEnabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PaymentConfigSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  mtnCode?: boolean
  airtelCode?: boolean
  orangeCode?: boolean
  mpesaCode?: boolean
  bankAccount?: boolean
  mobileMoneyEnabled?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentConfig"]>

export type PaymentConfigSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  mtnCode?: boolean
  airtelCode?: boolean
  orangeCode?: boolean
  mpesaCode?: boolean
  bankAccount?: boolean
  mobileMoneyEnabled?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentConfig"]>

export type PaymentConfigSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  businessId?: boolean
  mtnCode?: boolean
  airtelCode?: boolean
  orangeCode?: boolean
  mpesaCode?: boolean
  bankAccount?: boolean
  mobileMoneyEnabled?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}, ExtArgs["result"]["paymentConfig"]>

export type PaymentConfigSelectScalar = {
  id?: boolean
  businessId?: boolean
  mtnCode?: boolean
  airtelCode?: boolean
  orangeCode?: boolean
  mpesaCode?: boolean
  bankAccount?: boolean
  mobileMoneyEnabled?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PaymentConfigOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "businessId" | "mtnCode" | "airtelCode" | "orangeCode" | "mpesaCode" | "bankAccount" | "mobileMoneyEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentConfig"]>
export type PaymentConfigInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type PaymentConfigIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}
export type PaymentConfigIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  business?: boolean | Prisma.BusinessDefaultArgs<ExtArgs>
}

export type $PaymentConfigPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PaymentConfig"
  objects: {
    business: Prisma.$BusinessPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    businessId: string
    mtnCode: string | null
    airtelCode: string | null
    orangeCode: string | null
    mpesaCode: string | null
    bankAccount: string | null
    mobileMoneyEnabled: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["paymentConfig"]>
  composites: {}
}

export type PaymentConfigGetPayload<S extends boolean | null | undefined | PaymentConfigDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload, S>

export type PaymentConfigCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PaymentConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PaymentConfigCountAggregateInputType | true
  }

export interface PaymentConfigDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentConfig'], meta: { name: 'PaymentConfig' } }
  /**
   * Find zero or one PaymentConfig that matches the filter.
   * @param {PaymentConfigFindUniqueArgs} args - Arguments to find a PaymentConfig
   * @example
   * // Get one PaymentConfig
   * const paymentConfig = await prisma.paymentConfig.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PaymentConfigFindUniqueArgs>(args: Prisma.SelectSubset<T, PaymentConfigFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PaymentConfigClient<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PaymentConfig that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PaymentConfigFindUniqueOrThrowArgs} args - Arguments to find a PaymentConfig
   * @example
   * // Get one PaymentConfig
   * const paymentConfig = await prisma.paymentConfig.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PaymentConfigFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PaymentConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentConfigClient<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentConfig that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentConfigFindFirstArgs} args - Arguments to find a PaymentConfig
   * @example
   * // Get one PaymentConfig
   * const paymentConfig = await prisma.paymentConfig.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PaymentConfigFindFirstArgs>(args?: Prisma.SelectSubset<T, PaymentConfigFindFirstArgs<ExtArgs>>): Prisma.Prisma__PaymentConfigClient<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PaymentConfig that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentConfigFindFirstOrThrowArgs} args - Arguments to find a PaymentConfig
   * @example
   * // Get one PaymentConfig
   * const paymentConfig = await prisma.paymentConfig.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PaymentConfigFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PaymentConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PaymentConfigClient<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PaymentConfigs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentConfigFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PaymentConfigs
   * const paymentConfigs = await prisma.paymentConfig.findMany()
   * 
   * // Get first 10 PaymentConfigs
   * const paymentConfigs = await prisma.paymentConfig.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const paymentConfigWithIdOnly = await prisma.paymentConfig.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PaymentConfigFindManyArgs>(args?: Prisma.SelectSubset<T, PaymentConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PaymentConfig.
   * @param {PaymentConfigCreateArgs} args - Arguments to create a PaymentConfig.
   * @example
   * // Create one PaymentConfig
   * const PaymentConfig = await prisma.paymentConfig.create({
   *   data: {
   *     // ... data to create a PaymentConfig
   *   }
   * })
   * 
   */
  create<T extends PaymentConfigCreateArgs>(args: Prisma.SelectSubset<T, PaymentConfigCreateArgs<ExtArgs>>): Prisma.Prisma__PaymentConfigClient<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PaymentConfigs.
   * @param {PaymentConfigCreateManyArgs} args - Arguments to create many PaymentConfigs.
   * @example
   * // Create many PaymentConfigs
   * const paymentConfig = await prisma.paymentConfig.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PaymentConfigCreateManyArgs>(args?: Prisma.SelectSubset<T, PaymentConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PaymentConfigs and returns the data saved in the database.
   * @param {PaymentConfigCreateManyAndReturnArgs} args - Arguments to create many PaymentConfigs.
   * @example
   * // Create many PaymentConfigs
   * const paymentConfig = await prisma.paymentConfig.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PaymentConfigs and only return the `id`
   * const paymentConfigWithIdOnly = await prisma.paymentConfig.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PaymentConfigCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PaymentConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PaymentConfig.
   * @param {PaymentConfigDeleteArgs} args - Arguments to delete one PaymentConfig.
   * @example
   * // Delete one PaymentConfig
   * const PaymentConfig = await prisma.paymentConfig.delete({
   *   where: {
   *     // ... filter to delete one PaymentConfig
   *   }
   * })
   * 
   */
  delete<T extends PaymentConfigDeleteArgs>(args: Prisma.SelectSubset<T, PaymentConfigDeleteArgs<ExtArgs>>): Prisma.Prisma__PaymentConfigClient<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PaymentConfig.
   * @param {PaymentConfigUpdateArgs} args - Arguments to update one PaymentConfig.
   * @example
   * // Update one PaymentConfig
   * const paymentConfig = await prisma.paymentConfig.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PaymentConfigUpdateArgs>(args: Prisma.SelectSubset<T, PaymentConfigUpdateArgs<ExtArgs>>): Prisma.Prisma__PaymentConfigClient<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PaymentConfigs.
   * @param {PaymentConfigDeleteManyArgs} args - Arguments to filter PaymentConfigs to delete.
   * @example
   * // Delete a few PaymentConfigs
   * const { count } = await prisma.paymentConfig.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PaymentConfigDeleteManyArgs>(args?: Prisma.SelectSubset<T, PaymentConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentConfigUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PaymentConfigs
   * const paymentConfig = await prisma.paymentConfig.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PaymentConfigUpdateManyArgs>(args: Prisma.SelectSubset<T, PaymentConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PaymentConfigs and returns the data updated in the database.
   * @param {PaymentConfigUpdateManyAndReturnArgs} args - Arguments to update many PaymentConfigs.
   * @example
   * // Update many PaymentConfigs
   * const paymentConfig = await prisma.paymentConfig.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PaymentConfigs and only return the `id`
   * const paymentConfigWithIdOnly = await prisma.paymentConfig.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PaymentConfigUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PaymentConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PaymentConfig.
   * @param {PaymentConfigUpsertArgs} args - Arguments to update or create a PaymentConfig.
   * @example
   * // Update or create a PaymentConfig
   * const paymentConfig = await prisma.paymentConfig.upsert({
   *   create: {
   *     // ... data to create a PaymentConfig
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PaymentConfig we want to update
   *   }
   * })
   */
  upsert<T extends PaymentConfigUpsertArgs>(args: Prisma.SelectSubset<T, PaymentConfigUpsertArgs<ExtArgs>>): Prisma.Prisma__PaymentConfigClient<runtime.Types.Result.GetResult<Prisma.$PaymentConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PaymentConfigs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentConfigCountArgs} args - Arguments to filter PaymentConfigs to count.
   * @example
   * // Count the number of PaymentConfigs
   * const count = await prisma.paymentConfig.count({
   *   where: {
   *     // ... the filter for the PaymentConfigs we want to count
   *   }
   * })
  **/
  count<T extends PaymentConfigCountArgs>(
    args?: Prisma.Subset<T, PaymentConfigCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PaymentConfigCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PaymentConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PaymentConfigAggregateArgs>(args: Prisma.Subset<T, PaymentConfigAggregateArgs>): Prisma.PrismaPromise<GetPaymentConfigAggregateType<T>>

  /**
   * Group by PaymentConfig.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PaymentConfigGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PaymentConfigGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PaymentConfigGroupByArgs['orderBy'] }
      : { orderBy?: PaymentConfigGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PaymentConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PaymentConfig model
 */
readonly fields: PaymentConfigFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PaymentConfig.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PaymentConfigClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  business<T extends Prisma.BusinessDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.BusinessDefaultArgs<ExtArgs>>): Prisma.Prisma__BusinessClient<runtime.Types.Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PaymentConfig model
 */
export interface PaymentConfigFieldRefs {
  readonly id: Prisma.FieldRef<"PaymentConfig", 'String'>
  readonly businessId: Prisma.FieldRef<"PaymentConfig", 'String'>
  readonly mtnCode: Prisma.FieldRef<"PaymentConfig", 'String'>
  readonly airtelCode: Prisma.FieldRef<"PaymentConfig", 'String'>
  readonly orangeCode: Prisma.FieldRef<"PaymentConfig", 'String'>
  readonly mpesaCode: Prisma.FieldRef<"PaymentConfig", 'String'>
  readonly bankAccount: Prisma.FieldRef<"PaymentConfig", 'String'>
  readonly mobileMoneyEnabled: Prisma.FieldRef<"PaymentConfig", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"PaymentConfig", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PaymentConfig", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PaymentConfig findUnique
 */
export type PaymentConfigFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * Filter, which PaymentConfig to fetch.
   */
  where: Prisma.PaymentConfigWhereUniqueInput
}

/**
 * PaymentConfig findUniqueOrThrow
 */
export type PaymentConfigFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * Filter, which PaymentConfig to fetch.
   */
  where: Prisma.PaymentConfigWhereUniqueInput
}

/**
 * PaymentConfig findFirst
 */
export type PaymentConfigFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * Filter, which PaymentConfig to fetch.
   */
  where?: Prisma.PaymentConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentConfigs to fetch.
   */
  orderBy?: Prisma.PaymentConfigOrderByWithRelationInput | Prisma.PaymentConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentConfigs.
   */
  cursor?: Prisma.PaymentConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentConfigs.
   */
  distinct?: Prisma.PaymentConfigScalarFieldEnum | Prisma.PaymentConfigScalarFieldEnum[]
}

/**
 * PaymentConfig findFirstOrThrow
 */
export type PaymentConfigFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * Filter, which PaymentConfig to fetch.
   */
  where?: Prisma.PaymentConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentConfigs to fetch.
   */
  orderBy?: Prisma.PaymentConfigOrderByWithRelationInput | Prisma.PaymentConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PaymentConfigs.
   */
  cursor?: Prisma.PaymentConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentConfigs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PaymentConfigs.
   */
  distinct?: Prisma.PaymentConfigScalarFieldEnum | Prisma.PaymentConfigScalarFieldEnum[]
}

/**
 * PaymentConfig findMany
 */
export type PaymentConfigFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * Filter, which PaymentConfigs to fetch.
   */
  where?: Prisma.PaymentConfigWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PaymentConfigs to fetch.
   */
  orderBy?: Prisma.PaymentConfigOrderByWithRelationInput | Prisma.PaymentConfigOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PaymentConfigs.
   */
  cursor?: Prisma.PaymentConfigWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PaymentConfigs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PaymentConfigs.
   */
  skip?: number
  distinct?: Prisma.PaymentConfigScalarFieldEnum | Prisma.PaymentConfigScalarFieldEnum[]
}

/**
 * PaymentConfig create
 */
export type PaymentConfigCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * The data needed to create a PaymentConfig.
   */
  data: Prisma.XOR<Prisma.PaymentConfigCreateInput, Prisma.PaymentConfigUncheckedCreateInput>
}

/**
 * PaymentConfig createMany
 */
export type PaymentConfigCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PaymentConfigs.
   */
  data: Prisma.PaymentConfigCreateManyInput | Prisma.PaymentConfigCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PaymentConfig createManyAndReturn
 */
export type PaymentConfigCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * The data used to create many PaymentConfigs.
   */
  data: Prisma.PaymentConfigCreateManyInput | Prisma.PaymentConfigCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PaymentConfig update
 */
export type PaymentConfigUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * The data needed to update a PaymentConfig.
   */
  data: Prisma.XOR<Prisma.PaymentConfigUpdateInput, Prisma.PaymentConfigUncheckedUpdateInput>
  /**
   * Choose, which PaymentConfig to update.
   */
  where: Prisma.PaymentConfigWhereUniqueInput
}

/**
 * PaymentConfig updateMany
 */
export type PaymentConfigUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PaymentConfigs.
   */
  data: Prisma.XOR<Prisma.PaymentConfigUpdateManyMutationInput, Prisma.PaymentConfigUncheckedUpdateManyInput>
  /**
   * Filter which PaymentConfigs to update
   */
  where?: Prisma.PaymentConfigWhereInput
  /**
   * Limit how many PaymentConfigs to update.
   */
  limit?: number
}

/**
 * PaymentConfig updateManyAndReturn
 */
export type PaymentConfigUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * The data used to update PaymentConfigs.
   */
  data: Prisma.XOR<Prisma.PaymentConfigUpdateManyMutationInput, Prisma.PaymentConfigUncheckedUpdateManyInput>
  /**
   * Filter which PaymentConfigs to update
   */
  where?: Prisma.PaymentConfigWhereInput
  /**
   * Limit how many PaymentConfigs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PaymentConfig upsert
 */
export type PaymentConfigUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * The filter to search for the PaymentConfig to update in case it exists.
   */
  where: Prisma.PaymentConfigWhereUniqueInput
  /**
   * In case the PaymentConfig found by the `where` argument doesn't exist, create a new PaymentConfig with this data.
   */
  create: Prisma.XOR<Prisma.PaymentConfigCreateInput, Prisma.PaymentConfigUncheckedCreateInput>
  /**
   * In case the PaymentConfig was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PaymentConfigUpdateInput, Prisma.PaymentConfigUncheckedUpdateInput>
}

/**
 * PaymentConfig delete
 */
export type PaymentConfigDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
  /**
   * Filter which PaymentConfig to delete.
   */
  where: Prisma.PaymentConfigWhereUniqueInput
}

/**
 * PaymentConfig deleteMany
 */
export type PaymentConfigDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PaymentConfigs to delete
   */
  where?: Prisma.PaymentConfigWhereInput
  /**
   * Limit how many PaymentConfigs to delete.
   */
  limit?: number
}

/**
 * PaymentConfig without action
 */
export type PaymentConfigDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PaymentConfig
   */
  select?: Prisma.PaymentConfigSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PaymentConfig
   */
  omit?: Prisma.PaymentConfigOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentConfigInclude<ExtArgs> | null
}
