# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChatMessageEntity {
  id: String!
  chatId: String!
  content: String!
  senderType: String!
  senderId: String
  sender: ChatUserInfo
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ChatParticipantEntity {
  id: String!
  chatId: String!
  clientId: String
  client: ClientEntity
  businessId: String
  business: BusinessEntity
  workerId: String
  worker: WorkerEntity
  createdAt: DateTime!
}

type ChatProductInfo {
  id: String!
  title: String!
  price: Float!
  businessId: String
  isPhysical: Boolean
}

type ChatUserInfo {
  id: String!
  fullName: String
  name: String
  avatar: String
}

type chatNotification {
  id: String!
  chatId: String!
  userId: String!
  lastReadAt: DateTime!
  unreadCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ChatEntity {
  id: String!
  status: ChatStatus!
  isSecure: Boolean!
  negotiationType: NegotiationType
  productId: String
  product: ChatProductInfo
  serviceId: String
  service: FreelanceServiceEntity
  clientId: String
  client: ChatUserInfo
  businessId: String
  business: ChatUserInfo
  workerId: String
  worker: ChatUserInfo
  participants: [ChatParticipantEntity!]!
  messages: [ChatMessageEntity!]!
  unreadCount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ChatStatus {
  PENDING
  ACTIVE
  CLOSED
}

enum NegotiationType {
  REOWNERSHIP
  FREELANCEORDER
  PURCHASE
  GENERAL
}

type KnowYourCustomerEntity {
  id: String!
  status: String!
  documentUrl: String!
  submittedAt: DateTime!
  verifiedAt: DateTime
  businessId: String
  clientId: String
  workerId: String
  business: BusinessEntity
  client: ClientEntity
  worker: WorkerEntity
}

type WorkerEntity {
  id: String
  email: String
  fullName: String
  role: String
  isVerified: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  business: BusinessEntity
  kyc: KnowYourCustomerEntity
  freelanceServices: [FreelanceServiceEntity!]
  chats: [ChatEntity!]
}

type FreelanceServiceEntity {
  id: String!
  title: String!
  description: String
  isHourly: Boolean!
  rate: Float!
  category: FreelanceServiceCategory!
  createdAt: DateTime!
  updatedAt: DateTime!
  business: BusinessEntity!
  workerServiceAssignments: [WorkerServiceAssignmentEntity!]!
}

enum FreelanceServiceCategory {
  PLUMBER
  ELECTRICIAN
  CARPENTER
  MECHANIC
  TUTOR
  CLEANER
  OTHER
}

type WorkerServiceAssignmentEntity {
  id: String!
  serviceId: String!
  workerId: String!
  worker: WorkerEntity!
  role: String
  assignedAt: DateTime!
}

type PaginatedFreelanceServicesResponse {
  items: [FreelanceServiceEntity!]!
  total: Int!
  page: Int!
  limit: Int!
}

type AdEntity {
  id: String!
  businessId: String!
  productId: String!
  price: Float!
  periodDays: Int!
  createdAt: DateTime!
  endedAt: DateTime
  business: BusinessEntity!
  product: ProductEntity!
}

type CategoryEntity {
  id: String!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [ProductEntity!]
}

type MediaEntity {
  id: String!
  url: String!
  type: String!
  productId: String!
  createdAt: DateTime!
  product: ProductEntity!
}

type ShippingEntity {
  id: String!
  reOwnedProductId: String!
  status: String!
  trackingNumber: String
  carrier: String
  shippedAt: DateTime
  deliveredAt: DateTime
  createdAt: DateTime!
}

type ReOwnedProductEntity {
  id: String!
  newProductId: String!
  newProduct: ProductEntity!
  originalProductId: String!
  originalProduct: ProductEntity!
  oldOwnerId: String!
  newOwnerId: String!
  quantity: Int!
  oldPrice: Float!
  newPrice: Float!
  markupPercentage: Float!
  agreedViaChatId: String!
  agreementDate: DateTime!
  isOriginalApproved: Boolean!
  isNewOwnerApproved: Boolean!
  shippingId: String
  shipping: ShippingEntity
  createdAt: DateTime!
}

type RepostedProductEntity {
  id: String!
  productId: String!
  product: ProductEntity!
  businessId: String!
  business: BusinessEntity!
  markupPercentage: Float!
  createdAt: DateTime!
}

type ReviewEntity {
  id: String!
  clientId: String!
  productId: String!
  rating: Int!
  comment: String
  createdAt: DateTime!
  client: ClientEntity!
  product: ProductEntity!
}

type PurchaseOrderProductEntity {
  id: String!
  productId: String!
  quantity: Int!
  product: ProductEntity!
  createdAt: DateTime!
}

type PurchaseOrderEntity {
  id: String
  businessId: String
  business: BusinessEntity
  storeId: String
  store: StoreEntity
  supplierId: String
  status: PurchaseOrderStatus
  expectedDelivery: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  products: [PurchaseOrderProductEntity!]
}

enum PurchaseOrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

type PaginatedPurchaseOrderResponse {
  items: [PurchaseOrderEntity!]!
  total: Int!
  page: Int!
  limit: Int!
}

type InventoryEntity {
  id: String
  productId: String
  product: ProductEntity
  storeId: String
  store: StoreEntity
  quantity: Int
  minQuantity: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type InventoryAdjustmentEntity {
  id: String
  productId: String
  product: ProductEntity
  storeId: String
  store: StoreEntity
  adjustmentType: AdjustmentType
  quantity: Int
  reason: String
  createdAt: DateTime
}

enum AdjustmentType {
  ADD
  REMOVE
}

type PaginatedInventoryResponse {
  items: [InventoryEntity!]!
  total: Int!
  page: Int!
  limit: Int!
}

type TransferOrderProductEntity {
  id: String!
  productId: String!
  quantity: Int!
  product: ProductEntity!
  createdAt: DateTime!
}

type TransferOrderEntity {
  id: String
  fromStoreId: String
  fromStore: StoreEntity
  toStoreId: String
  toStore: StoreEntity
  status: TransferOrderStatus
  createdAt: DateTime
  updatedAt: DateTime
  products: [TransferOrderProductEntity!]
}

enum TransferOrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

type PaginatedTransferOrderResponse {
  items: [TransferOrderEntity!]!
  total: Int!
  page: Int!
  limit: Int!
}

type SaleProductEntity {
  id: String!
  quantity: Int!
  saleId: String!
  productId: String!
  price: Float!
  description: String
  modifiers: JSON
  createdAt: DateTime!
  product: ProductEntity!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type ReturnEntity {
  id: String!
  saleId: String!
  reason: String
  status: SaleStatus!
  createdAt: DateTime!
  sale: SaleEntity!
}

enum SaleStatus {
  OPEN
  CLOSED
  REFUNDED
}

type SaleEntity {
  id: String
  storeId: String
  store: StoreEntity
  workerId: String
  worker: WorkerEntity
  clientId: String
  client: ClientEntity
  totalAmount: Float
  discount: Float
  paymentMethod: PaymentMethod
  status: SaleStatus
  createdAt: DateTime
  updatedAt: DateTime
  saleProducts: [SaleProductEntity!]
  returns: [ReturnEntity!]
}

enum PaymentMethod {
  TOKEN
  MOBILE_MONEY
  CASH
  CARD
}

type ShiftEntity {
  id: String
  workerId: String
  worker: WorkerEntity
  storeId: String
  store: StoreEntity
  startTime: DateTime
  endTime: DateTime
  sales: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type StoreEntity {
  id: String!
  businessId: String!
  name: String!
  address: String
  createdAt: DateTime!
  updatedAt: DateTime!
  business: BusinessEntity!
  transferOrdersFrom: [TransferOrderEntity!]
  transferOrdersTo: [TransferOrderEntity!]
  inventoryAdjustments: [InventoryAdjustmentEntity!]
  purchaseOrders: [PurchaseOrderEntity!]
  sales: [SaleEntity!]
  shifts: [ShiftEntity!]
  products: [ProductEntity!]
}

type ProductEntity {
  id: String!
  title: String!
  description: String
  price: Float!
  quantity: Int!
  businessId: String!
  storeId: String
  isPhysical: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  featured: Boolean!
  approvedForSale: Boolean!
  medias: [MediaEntity!]
  business: BusinessEntity
  store: StoreEntity
  category: CategoryEntity
  reviews: [ReviewEntity!]!
  orders: [OrderProductEntity!]!
  chats: [ChatEntity!]!
  reposts: [RepostedProductEntity!]!
  reowns: [ReOwnedProductEntity!]!
  ads: [AdEntity!]!
}

type OrderProductEntity {
  id: String!
  orderId: String!
  productId: String!
  quantity: Int!
  order: OrderEntity!
  product: ProductEntity!
}

type OrderEntity {
  id: String!
  deliveryFee: Float!
  deliveryAddress: String
  qrCode: String
  createdAt: DateTime!
  updatedAt: DateTime!
  clientId: String!
  client: ClientEntity!
  payment: PaymentTransactionEntity
  products: [OrderProductEntity!]
  status: String
  totalAmount: Float
}

type PaginatedOrdersResponse {
  items: [OrderEntity!]!
  total: Int!
  page: Int!
  limit: Int!
}

type PaymentTransactionEntity {
  id: String!
  amount: Float!
  method: String!
  status: String!
  transactionDate: DateTime!
  qrCode: String
  createdAt: DateTime!
  order: OrderEntity!
  PostTransaction: [PostTransactionEntity!]
}

type PostTransactionEntity {
  id: String!
  amount: Float!
  status: String!
  createdAt: DateTime!
}

type FreelanceOrderEntity {
  id: String!
  serviceId: String!
  service: FreelanceServiceEntity!
  clientId: String!
  client: ClientEntity!
  quantity: Int!
  totalAmount: Float!
  escrowAmount: Float!
  platformCommissionPercentage: Float!
  status: FreelanceStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  paymentTransaction: PaymentTransactionEntity
}

enum FreelanceStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

type PaginatedFreelanceOrdersResponse {
  items: [FreelanceOrderEntity!]!
  total: Int!
  page: Int!
  limit: Int!
}

type ClientEntity {
  id: String
  username: String
  email: String
  fullName: String
  address: String
  phone: String
  avatar: String
  password: String
  isVerified: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  orders: [OrderEntity!]
  reviews: [ReviewEntity!]
  recharges: [AccountRechargeEntity!]
  freelanceOrders: [FreelanceOrderEntity!]
  referralsMade: [ReferralEntity!]
  referralsReceived: [ReferralEntity!]
}

type TokenTransactionEntity {
  id: String!
  businessId: String!
  business: BusinessEntity!
  reOwnedProductId: String
  reOwnedProduct: ReOwnedProductEntity
  repostedProductId: String
  repostedProduct: RepostedProductEntity
  amount: Float!
  type: TokenTransactionType!
  isRedeemed: Boolean!
  isReleased: Boolean!
  createdAt: DateTime!
}

enum TokenTransactionType {
  RELEASE
  PROFIT_SHARE
  REPOST_COMMISSION
}

type AccountRechargeEntity {
  id: String!
  amount: Float!
  method: RechargeMethod!
  origin: Country!
  businessId: String
  business: BusinessEntity
  clientId: String
  client: ClientEntity
  tokenTransactionId: String
  tokenTransaction: TokenTransactionEntity
  createdAt: DateTime!
}

enum RechargeMethod {
  MTN_MONEY
  AIRTEL_MONEY
  ORANGE_MONEY
  MPESA
  TOKEN
}

enum Country {
  DRC
  KENYA
  UGANDA
  RWANDA
  BURUNDI
  TANZANIA
}

type PostOfSaleEntity {
  id: String!
  title: String!
  description: String
  price: Float!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BusinessEntity {
  id: String!
  name: String!
  email: String!
  description: String
  address: String
  phone: String
  avatar: String
  coverImage: String
  isVerified: Boolean!
  kycStatus: KycStatus!
  totalProductsSold: Int!
  hasAgreedToTerms: Boolean!
  isB2BEnabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [ProductEntity!]!
  workers: [WorkerEntity!]!
  repostedItems: [RepostedProductEntity!]!
  reownedItems: [ReOwnedProductEntity!]!
  recharges: [AccountRechargeEntity!]!
  ads: [AdEntity!]!
  freelanceServices: [FreelanceServiceEntity!]!
  freelanceOrders: [FreelanceOrderEntity!]!
  referralsMade: [ReferralEntity!]!
  referralsReceived: [ReferralEntity!]!
  chats: [ChatEntity!]!
  postOfSales: [PostOfSaleEntity!]
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

type ReferralEntity {
  id: String!
  affiliateBusinessId: String
  affiliateClientId: String
  referredBusinessId: String
  referredClientId: String
  verifiedPurchase: Boolean!
  createdAt: DateTime!
  affiliateBusiness: BusinessEntity
  affiliateClient: ClientEntity
  referredBusiness: BusinessEntity
  referredClient: ClientEntity
}

type PaginatedChatsResponse {
  items: [ChatEntity!]!
  total: Float!
  page: Float!
  limit: Float!
}

type PaginatedMessagesResponse {
  items: [ChatMessageEntity!]!
  hasMore: Boolean!
  cursor: String
}

type UnreadCountResponse {
  totalUnread: Float!
  chatsWithUnread: [ChatUnreadInfo!]!
}

type ChatUnreadInfo {
  chatId: String!
  unreadCount: Float!
}

type MarkAsReadResponse {
  success: Boolean!
  unreadCount: Float!
}

type DashboardStats {
  totalRevenue: Float!
  revenueChange: Int!
  totalOrders: Int!
  ordersChange: Int!
  totalProducts: Int!
  lowStockProducts: Int!
  unreadMessages: Int!
  totalMessages: Int!
}

type SalesDataPoint {
  date: String!
  sales: Int!
}

type DashboardClientDto {
  id: ID!
  fullName: String!
}

type RecentOrder {
  id: String!
  client: DashboardClientDto!
  createdAt: DateTime!
  totalAmount: Int!
  status: String!
}

type BusinessDashboardResponse {
  stats: DashboardStats!
  salesData: [SalesDataPoint!]!
  recentOrders: [RecentOrder!]!
}

type AuthPayload {
  id: String!
  role: String!
  email: String
}

type UserPayload {
  role: String!
}

type AuthPayloadClient {
  id: String!
  email: String!
  fullname: String!
  phone: String!
  avatar: String
  accessToken: String!
  refreshToken: String!
}

type AuthPayloadWorker {
  id: String!
  email: String!
  fullname: String!
  phone: String!
  accessToken: String!
  refreshToken: String!
}

type AuthPayloadBusiness {
  id: String!
  email: String!
  name: String!
  phone: String!
  avatar: String
  coverImage: String
  accessToken: String!
  refreshToken: String!
}

type ReceiptEntity {
  filePath: String!
  emailSent: Boolean
}

type PaginatedSalesResponse {
  items: [SaleEntity!]!
  total: Int!
  page: Int!
  limit: Int!
}

type TopProduct {
  id: String!
  title: String!
  quantitySold: Int!
}

type PaymentMethodStat {
  method: String!
  count: Int!
  amount: Float!
}

type ChartDataPoint {
  name: String!
  sales: Float!
  transactions: Int!
}

type SalesDashboard {
  totalSales: Int!
  totalRevenue: Float!
  averageTicket: Float!
  topProducts: [TopProduct!]!
  paymentMethods: [PaymentMethodStat!]!
  chartData: [ChartDataPoint!]!
}

type DeleteResponse {
  id: String!
}

type SalesStats {
  total: Int!
  monthly: Int!
  weekly: Int!
}

type ProductStats {
  total: Int!
  lowStock: Int!
}

type RevenueStats {
  total: Float!
  monthly: Float!
  weekly: Float!
}

type StoreStatistics {
  sales: SalesStats!
  revenue: RevenueStats!
  products: ProductStats!
}

type PointsTransactionEntity {
  id: String!
  clientId: String!
  client: ClientEntity!
  loyaltyProgramId: String!
  loyaltyProgram: LoyaltyProgramEntity!
  points: Float!
  createdAt: DateTime!
}

type LoyaltyProgramEntity {
  id: String!
  businessId: String!
  business: BusinessEntity!
  name: String!
  description: String
  pointsPerPurchase: Float!
  minimumPointsToRedeem: Float
  pointsTransactions: [PointsTransactionEntity!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClientPointsBalanceEntity {
  clientId: String!
  client: ClientEntity!
  totalPoints: Float!
}

type TopCustomerEntity {
  clientId: String!
  clientName: String!
  totalPoints: Float!
  totalSpent: Float!
}

type PointsByDayEntity {
  date: String!
  earned: Float!
  redeemed: Float!
}

type LoyaltyAnalyticsEntity {
  totalMembers: Int!
  activeMembers: Int!
  pointsEarned: Float!
  pointsRedeemed: Float!
  redemptionRate: Float!
  topCustomers: [TopCustomerEntity!]!
  pointsByDay: [PointsByDayEntity!]!
}

type PointsTransactionSummaryEntity {
  id: String!
  points: Float!
  createdAt: DateTime!
  type: String!
}

type CustomerPointsEntity {
  totalPoints: Float!
  program: LoyaltyProgramEntity!
  transactions: [PointsTransactionSummaryEntity!]!
}

type BulkImportResultEntity {
  success: Boolean!
  count: Int!
}

type LowStockAlertEntity {
  productId: String!
  product: ProductEntity!
  storeId: String!
  store: StoreEntity!
  quantity: Int!
  threshold: Int!
}

type Query {
  """Retrieves all products with their relations."""
  products: [ProductEntity!]!

  """Retrieves all featured products with their relations."""
  featuredProducts: [ProductEntity!]!

  """Retrieves all featured products with their relations."""
  relatedProducts(category: String!): [ProductEntity!]!

  """Retrieves a single product by ID."""
  product(id: String!): ProductEntity!

  """Retrieves products by name."""
  productsByName(storeId: String!, title: String!): [ProductEntity!]!

  """Retrieves searched products."""
  searchedProducts(title: String!): [ProductEntity!]!

  """Retrieves orders."""
  orders: [OrderEntity!]!

  """Retrieves a single order by ID."""
  order(id: String!): OrderEntity!

  """Retrieves orders for a business."""
  businessOrders(businessId: String!, page: Int! = 1, limit: Int! = 20, search: String, status: String, date: String): PaginatedOrdersResponse!

  """Retrieves orders for a client."""
  clientOrders(clientId: String!, page: Int! = 1, limit: Int! = 20): PaginatedOrdersResponse!

  """Retrieves token transactions for a business."""
  tokenTransactions: [TokenTransactionEntity!]!

  """Retrieves a single token transaction by ID."""
  tokenTransaction(id: String!): TokenTransactionEntity!

  """Retrieves account recharges for a user."""
  accountRecharges: [AccountRechargeEntity!]!

  """Retrieves a single account recharge by ID."""
  accountRecharge(id: String!): AccountRechargeEntity!

  """Retrieves the account balance for a user."""
  accountBalance: Float!

  """Retrieves all businesses with their relations."""
  businesses: [BusinessEntity!]!

  """Retrieves a single business by ID."""
  business(id: String!): BusinessEntity!
  businessDashboard: BusinessDashboardResponse!

  """Retrieves all clients with their relations."""
  clients: [ClientEntity!]!

  """Retrieves a single client by ID."""
  client(id: String!): ClientEntity!

  """Find client by email."""
  clientByEmail(email: String!): ClientEntity

  """Search clients by query."""
  searchClients(query: String!): [ClientEntity!]!

  """Retrieves all workers with their relations."""
  workers(storeId: String): [WorkerEntity!]!

  """Retrieves a single worker by ID."""
  worker(id: String!): WorkerEntity!

  """Retrieves chats for the user with pagination."""
  chats(productId: String, clientId: String, businessId: String, workerId: String, status: String, search: String, page: Float! = 1, limit: Float! = 20): PaginatedChatsResponse!

  """Retrieves a single chat by ID."""
  chat(id: String!): ChatEntity!

  """Retrieves messages for a chat."""
  chatMessages(chatId: String!, after: String, before: String, limit: Int! = 20): PaginatedMessagesResponse!

  """Gets unread message count for user."""
  unreadChatCount(userId: String!): UnreadCountResponse!

  """Gets chats by participant ID."""
  chatsByParticipant(participantId: String!): [ChatEntity!]!

  """Gets chat notifications for user."""
  chatNotifications(userId: String!): [chatNotification!]!

  """Retrieves reposted products for a business."""
  repostedProducts: [RepostedProductEntity!]!

  """Retrieves a single reposted product by ID."""
  repostedProduct(id: String!): RepostedProductEntity!

  """Retrieves re-owned products for a business."""
  reOwnedProducts: [ReOwnedProductEntity!]!

  """Retrieves a single re-owned product by ID."""
  reOwnedProduct(id: String!): ReOwnedProductEntity!

  """Retrieves payment transactions based on user role."""
  paymentTransactions: [PaymentTransactionEntity!]!

  """Retrieves a single payment transaction by ID."""
  paymentTransaction(id: String!): PaymentTransactionEntity!

  """Retrieves freelance services with pagination and filters."""
  freelanceServices(category: String, minRate: Float, maxRate: Float, isHourly: Boolean, businessId: String, search: String, page: Int! = 1, limit: Int! = 20): PaginatedFreelanceServicesResponse!

  """Retrieves a single freelance service by ID."""
  freelanceService(id: String!): FreelanceServiceEntity!

  """Get worker assignments for a service or worker."""
  workerServiceAssignments(workerId: String!, serviceId: String): [WorkerServiceAssignmentEntity!]!

  """Retrieves freelance orders with pagination and filters."""
  freelanceOrders(serviceId: String, clientId: String, businessId: String, status: FreelanceStatus, page: Int! = 1, limit: Int! = 20): PaginatedFreelanceOrdersResponse!

  """Retrieves a single freelance order by ID."""
  freelanceOrder(id: String!): FreelanceOrderEntity!
  whatIsUserRole(SignInInput: SignInInput!): UserPayload!
  verifyCurrentUser: AuthPayload!
  postOfSale(id: Int!): PostOfSaleEntity!

  """Retrieves all categories with their products."""
  categories: [CategoryEntity!]!

  """Retrieves a single category by ID."""
  category(id: String!): CategoryEntity!

  """Retrieves active sales for a store in a business."""
  activeSales(storeId: String!): [SaleEntity!]!
  sale(id: String!): SaleEntity!

  """Retrieves sales for a store in a business."""
  salesHistory(storeId: String, workerId: String, startDate: DateTime, endDate: DateTime, status: String, page: Float! = 1, limit: Float! = 20): PaginatedSalesResponse!
  salesDashboard(storeId: String!, period: String! = "day"): SalesDashboard!

  """Retrieves stores for a business."""
  stores: [StoreEntity!]!

  """Retrieves a single store by ID."""
  store(id: String!): StoreEntity!

  """Retrieves statistics for a store."""
  storeStatistics(storeId: String!): StoreStatistics!

  """Retrieves points transactions for a client."""
  pointsTransactionsByClient(clientId: String!): [PointsTransactionEntity!]!

  """Retrieves points transactions for a loyalty program."""
  pointsTransactionsByProgram(loyaltyProgramId: String!): [PointsTransactionEntity!]!

  """Retrieves total points for a client."""
  clientPointsBalance(clientId: String!): ClientPointsBalanceEntity!

  """Retrieves loyalty programs for a business."""
  loyaltyPrograms(businessId: String!): [LoyaltyProgramEntity!]!

  """Retrieves a loyalty program by ID."""
  loyaltyProgram(id: String!): LoyaltyProgramEntity!

  """Retrieves customer points and transactions."""
  customerPoints(businessId: String!, clientId: String!): CustomerPointsEntity!

  """Retrieves loyalty program analytics."""
  loyaltyAnalytics(businessId: String!, period: String! = "month"): LoyaltyAnalyticsEntity!

  """Retrieves inventory for a store."""
  inventory(storeId: String, productId: String, lowStockOnly: Boolean, page: Float! = 1, limit: Float! = 20): PaginatedInventoryResponse!

  """Retrieves purchase orders for a business."""
  purchaseOrders(businessId: String!, storeId: String, status: String, startDate: DateTime, endDate: DateTime, page: Float! = 1, limit: Float! = 20): PaginatedPurchaseOrderResponse!

  """Retrieves transfer orders."""
  transferOrders(fromStoreId: String, toStoreId: String, status: String, startDate: DateTime, endDate: DateTime, page: Float! = 1, limit: Float! = 20): PaginatedTransferOrderResponse!

  """Retrieves low stock alerts for a store."""
  lowStockAlerts(lowStockAlertInput: LowStockAlertInput!): [LowStockAlertEntity!]!

  """Exports products for a store."""
  bulkExportProducts(storeId: String!): [PurchaseOrderProductEntity!]!

  """Retrieves a single shift."""
  shift(id: String!): ShiftEntity!

  """Retrieves shifts for a store."""
  shiftsByStore(storeId: String!): [ShiftEntity!]!

  """Retrieves shifts for a worker."""
  shiftsByWorker(workerId: String!): [ShiftEntity!]!
}

input SignInInput {
  email: String!
  password: String!
}

input LowStockAlertInput {
  storeId: String!
  threshold: Int!
}

type Mutation {
  """Creates a new product for a business."""
  createProduct(input: CreateProductInput!, mediaInput: AddMediaInput): ProductEntity!

  """Updates a product's details."""
  updateProduct(id: String!, input: UpdateProductInput!): ProductEntity!

  """Deletes a product."""
  deleteProduct(id: String!): ProductEntity!

  """Adds media to a product."""
  addProductMedia(productId: String!, input: AddMediaInput!): MediaEntity!

  """Removes media from a product."""
  removeProductMedia(mediaId: String!): MediaEntity!

  """Creates an order for a product."""
  createOrder(createOrderInput: CreateOrderInput!): OrderEntity!

  """Updates an order."""
  updateOrder(id: String!, updateOrderInput: UpdateOrderInput!): OrderEntity!

  """Deletes an order."""
  deleteOrder(id: String!): OrderEntity!

  """Process payment for an order."""
  processOrderPayment(orderId: String!, input: ProcessPaymentInput!): OrderEntity!

  """Creates a token transaction."""
  createTokenTransaction(createTokenTransactionInput: CreateTokenTransactionInput!): TokenTransactionEntity!

  """Redeems a token transaction."""
  redeemTokenTransaction(redeemTokenTransactionInput: RedeemTokenTransactionInput!): TokenTransactionEntity!

  """Releases a token transaction."""
  releaseTokenTransaction(releaseTokenTransactionInput: ReleaseTokenTransactionInput!): TokenTransactionEntity!

  """Creates an account recharge."""
  createAccountRecharge(createAccountRechargeInput: CreateAccountRechargeInput!): AccountRechargeEntity!

  """Updates an account recharge."""
  updateAccountRecharge(id: String!, updateAccountRechargeInput: UpdateAccountRechargeInput!): AccountRechargeEntity!

  """Deletes an account recharge."""
  deleteAccountRecharge(id: String!): AccountRechargeEntity!

  """Creates a new business with hashed password."""
  createBusiness(createBusinessInput: CreateBusinessInput!): BusinessEntity!

  """Updates a business’s details."""
  updateBusiness(id: String!, updateBusinessInput: UpdateBusinessInput!): BusinessEntity!

  """Deletes a business."""
  deleteBusiness(id: String!): BusinessEntity!

  """Creates a new client with hashed password."""
  createClient(createClientInput: CreateClientInput!): ClientEntity!

  """Creates a new client for POS with minimal info."""
  createClientForPOS(createClientInput: CreateClientForPOSInput!): ClientEntity!

  """Updates a client’s details."""
  updateClient(id: String!, updateClientInput: UpdateClientInput!): ClientEntity!

  """Deletes a client."""
  deleteClient(id: String!): ClientEntity!

  """Creates a new worker with hashed password."""
  createWorker(createWorkerInput: CreateWorkerInput!): WorkerEntity!

  """Updates a worker’s details."""
  updateWorker(id: String!, updateWorkerInput: UpdateWorkerInput!): WorkerEntity!

  """Deletes a worker."""
  deleteWorker(id: String!): WorkerEntity!

  """Creates a new chat with dynamic participants."""
  createChat(createChatInput: CreateChatInput!): ChatEntity!

  """Sends a message in a chat."""
  createChatMessage(createChatMessageInput: CreateChatMessageInput!): ChatMessageEntity!

  """Updates a chat’s status or properties."""
  updateChat(id: String!, updateChatInput: UpdateChatInput!): ChatEntity!

  """Deletes a chat."""
  deleteChat(id: String!): ChatEntity!

  """Sends a message in a chat."""
  sendMessage(input: SendMessageInput!): ChatMessageEntity!

  """Marks messages as read."""
  markMessagesAsRead(chatId: String!, userId: String!): MarkAsReadResponse!

  """Updates chat status."""
  updateChatStatus(id: String!, status: String!): ChatEntity!

  """Starts a negotiation chat."""
  startNegotiation(input: StartNegotiationInput!): ChatEntity!

  """Accepts a negotiation."""
  acceptNegotiation(negotiationId: String!): ChatEntity!

  """Creates a reposted product."""
  createRepostedProduct(createRepostedProductInput: CreateRepostedProductInput!): RepostedProductEntity!

  """Deletes a reposted product."""
  deleteRepostedProduct(id: String!): RepostedProductEntity!

  """Initiates a re-ownership request."""
  createReOwnedProduct(createReOwnedProductInput: CreateReOwnedProductInput!): ReOwnedProductEntity!

  """Approves or rejects a re-ownership request."""
  approveReOwnedProduct(approveReOwnedProductInput: ApproveReOwnedProductInput!): ReOwnedProductEntity!

  """Creates shipping details for a re-owned product."""
  createShipping(createShippingInput: CreateShippingInput!): ShippingEntity!

  """Creates a new payment transaction."""
  createPaymentTransaction(createPaymentTransactionInput: CreatePaymentTransactionInput!): PaymentTransactionEntity!

  """Updates a payment transaction’s status or QR code."""
  updatePaymentTransaction(id: String!, updatePaymentTransactionInput: UpdatePaymentTransactionInput!): PaymentTransactionEntity!

  """Deletes a payment transaction."""
  deletePaymentTransaction(id: String!): PaymentTransactionEntity!

  """Creates a new freelance service."""
  createFreelanceService(input: CreateFreelanceServiceInput!): FreelanceServiceEntity!

  """Updates a freelance service."""
  updateFreelanceService(id: String!, input: UpdateFreelanceServiceInput!): FreelanceServiceEntity!

  """Assigns a worker to a freelance service."""
  assignWorkerToService(input: AssignWorkerToServiceInput!): WorkerServiceAssignmentEntity!

  """Deletes a freelance service."""
  deleteFreelanceService(id: String!): FreelanceServiceEntity!

  """Creates a new freelance order."""
  createFreelanceOrder(input: CreateFreelanceOrderInput!): FreelanceOrderEntity!

  """Updates a freelance order."""
  updateFreelanceOrder(id: String!, input: UpdateFreelanceOrderInput!): FreelanceOrderEntity!

  """Complete a freelance order."""
  completeFreelanceOrder(id: String!): FreelanceOrderEntity!

  """Release escrow for a freelance order."""
  releaseEscrow(orderId: String!): FreelanceOrderEntity!
  signClientIn(SignInInput: SignInInput!): AuthPayloadClient!
  signBusinessIn(SignInInput: SignInInput!): AuthPayloadBusiness!
  signWorkerIn(SignInInput: SignInInput!): AuthPayloadWorker!
  refreshToken(refreshToken: String!): AuthPayloadClient!
  createPostOfSale(createPostOfSaleInput: CreatePostOfSaleInput!): PostOfSaleEntity!
  updatePostOfSale(updatePostOfSaleInput: UpdatePostOfSaleInput!): PostOfSaleEntity!
  removePostOfSale(id: Int!): PostOfSaleEntity!

  """Creates a new category."""
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryEntity!

  """Updates a category's details."""
  updateCategory(id: String!, updateCategoryInput: UpdateCategoryInput!): CategoryEntity!

  """Deletes a category."""
  deleteCategory(id: String!): CategoryEntity!
  createSale(input: CreateSaleInput!): SaleEntity!
  updateSale(id: String!, input: UpdateSaleInput!): SaleEntity!
  closeSale(input: CloseSaleInput!): SaleEntity!
  completeSale(id: String!, paymentMethod: String!, paymentDetails: PaymentDetailsInput): SaleEntity!
  addSaleProduct(input: AddSaleProductInput!): SaleProductEntity!
  updateSaleProduct(id: String!, input: UpdateSaleProductInput!): SaleProductEntity!
  removeSaleProduct(id: String!): DeleteResponse!

  """Processes a return for a POS sale."""
  createReturn(createReturnInput: CreateReturnInput!): ReturnEntity!

  """Generates a PDF receipt and optionally emails it."""
  generateReceipt(generateReceiptInput: GenerateReceiptInput!): ReceiptEntity!

  """Generates a PDF receipt using pdfkit and optionally emails it."""
  generateReceiptWithPDFKit(generateReceiptInput: GenerateReceiptInput!): ReceiptEntity!

  """Creates a new store for a business."""
  createStore(createStoreInput: CreateStoreInput!): StoreEntity!

  """Updates an existing store."""
  updateStore(id: String!, updateStoreInput: UpdateStoreInput!): StoreEntity!

  """Deletes a store."""
  deleteStore(id: String!): StoreEntity!

  """Creates a new loyalty program."""
  createLoyaltyProgram(input: CreateLoyaltyProgramInput!): LoyaltyProgramEntity!

  """Updates a loyalty program."""
  updateLoyaltyProgram(id: String!, input: UpdateLoyaltyProgramInput!): LoyaltyProgramEntity!

  """Creates a points transaction."""
  createPointsTransaction(createPointsTransactionInput: CreatePointsTransactionInput!): PointsTransactionEntity!

  """Awards points to a customer."""
  earnPoints(input: EarnPointsInput!): PointsTransactionEntity!

  """Redeems points for a customer."""
  redeemPoints(input: RedeemPointsInput!): PointsTransactionEntity!

  """Deletes a loyalty program."""
  deleteLoyaltyProgram(id: String!): Boolean!

  """Creates a new purchase order."""
  createPurchaseOrder(input: CreatePurchaseOrderInput!): PurchaseOrderEntity!

  """Updates a purchase order."""
  updatePurchaseOrder(id: String!, input: UpdatePurchaseOrderInput!): PurchaseOrderEntity!

  """Creates a new transfer order."""
  createTransferOrder(input: CreateTransferOrderInput!): TransferOrderEntity!

  """Updates a transfer order."""
  updateTransferOrder(id: String!, input: UpdateTransferOrderInput!): TransferOrderEntity!

  """Creates an inventory adjustment."""
  createInventoryAdjustment(input: CreateInventoryAdjustmentInput!): InventoryAdjustmentEntity!

  """Imports products in bulk."""
  bulkImportProducts(storeId: String!, products: [PurchaseOrderProductInput!]!): BulkImportResultEntity!

  """Starts a new shift for a worker."""
  createShift(createShiftInput: CreateShiftInput!): ShiftEntity!

  """Ends a shift and calculates sales."""
  endShift(endShiftInput: EndShiftInput!): ShiftEntity!

  """Updates shift details (business only)."""
  updateShift(id: String!, updateShiftInput: UpdateShiftInput!): ShiftEntity!
}

input CreateProductInput {
  title: String!
  description: String
  price: Float!
  quantity: Int!
  storeId: String
  isPhysical: Boolean!
  businessId: String!
  categoryId: String!
  image: String
  featured: Boolean! = false
  approvedForSale: Boolean! = true
}

input AddMediaInput {
  url: String!
  type: String!
  size: Int
  pathname: String
}

input UpdateProductInput {
  title: String
  description: String
  price: Float
  quantity: Int
  storeId: String
  isPhysical: Boolean
  businessId: String
  categoryId: String
  image: String
  featured: Boolean = false
  approvedForSale: Boolean = true
  id: String!
}

input CreateOrderInput {
  clientId: String!
  deliveryFee: Float!
  deliveryAddress: String
  qrCode: String
  orderProducts: [CreateOrderProductInput!]!
  payment: CreatePaymentTransactionInput!
}

input CreateOrderProductInput {
  productId: String!
  quantity: Int!
}

input CreatePaymentTransactionInput {
  orderId: String
  amount: Float
  method: PaymentMethod!
  status: PaymentStatus!
  qrCode: String
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

input UpdateOrderInput {
  deliveryAddress: String
  qrCode: String
  deliveryFee: Float
}

input ProcessPaymentInput {
  status: String
  transactionId: String
  method: String
}

input CreateTokenTransactionInput {
  businessId: String!
  reOwnedProductId: String
  repostedProductId: String
  amount: Float!
  type: TokenTransactionType!
}

input RedeemTokenTransactionInput {
  tokenTransactionId: String!
  isRedeemed: Boolean!
}

input ReleaseTokenTransactionInput {
  tokenTransactionId: String!
  isReleased: Boolean!
}

input CreateAccountRechargeInput {
  amount: Float!
  method: RechargeMethod!
  origin: Country!
  clientId: String
  businessId: String
  tokenTransactionId: String
}

input UpdateAccountRechargeInput {
  amount: Float
  method: RechargeMethod
  origin: Country
}

input CreateBusinessInput {
  name: String!
  email: String!
  description: String
  avatar: String
  coverImage: String
  address: String
  phone: String
  password: String!
  isVerified: Boolean! = false
}

input UpdateBusinessInput {
  name: String
  email: String
  description: String
  avatar: String
  coverImage: String
  address: String
  phone: String
  password: String
  isVerified: Boolean
  kycId: String
  kycStatus: KycStatus!
  totalProductsSold: Int
  hasAgreedToTerms: Boolean
  isB2BEnabled: Boolean
}

input CreateClientInput {
  username: String!
  email: String!
  fullName: String
  address: String
  phone: String
  password: String!
  isVerified: Boolean!
}

input CreateClientForPOSInput {
  email: String!
  fullName: String
  phone: String
  address: String
}

input UpdateClientInput {
  username: String
  email: String
  fullName: String
  address: String
  phone: String
  password: String
  isVerified: Boolean
  id: Int!
  kycId: String
}

input CreateWorkerInput {
  email: String!
  fullName: String
  role: WorkerRole!
  password: String!
  isVerified: Boolean! = false
  businessId: String
  kycId: String
}

enum WorkerRole {
  ADMIN
  STAFF
  MANAGER
  FREELANCER
}

input UpdateWorkerInput {
  email: String
  fullName: String
  role: WorkerRole
  password: String
  isVerified: Boolean = false
  businessId: String
  kycId: String
  id: String!
}

input CreateChatInput {
  productId: String
  serviceId: String
  participantIds: [String!]!
  isSecure: Boolean! = false
  negotiationType: NegotiationType
}

input CreateChatMessageInput {
  chatId: String!
  message: String!
}

input UpdateChatInput {
  id: String!
  status: ChatStatus
  isSecure: Boolean
  negotiationType: NegotiationType
}

input SendMessageInput {
  chatId: String!
  content: String!
  senderType: String!
  senderId: String!
}

input StartNegotiationInput {
  productId: String
  serviceId: String
  participantIds: [String!]!
  negotiationType: NegotiationType! = GENERAL
}

input CreateRepostedProductInput {
  productId: String!
  businessId: String!
  markupPercentage: Float! = 0.02
}

input CreateReOwnedProductInput {
  originalProductId: String!
  newOwnerId: String!
  quantity: Int!
  newPrice: Float!
  markupPercentage: Float!
}

input ApproveReOwnedProductInput {
  reOwnedProductId: String!
  chatId: String!
  isApproved: Boolean!
}

input CreateShippingInput {
  reOwnedProductId: String!
  trackingNumber: String!
  carrier: String!
}

input UpdatePaymentTransactionInput {
  status: PaymentStatus
  qrCode: String
}

input CreateFreelanceServiceInput {
  title: String!
  description: String
  isHourly: Boolean! = true
  category: FreelanceServiceCategory!
  rate: Float!
  workerIds: [String!]
}

input UpdateFreelanceServiceInput {
  id: String!
  title: String
  description: String
  isHourly: Boolean
  rate: Float
  workerIds: [String!]
}

input AssignWorkerToServiceInput {
  serviceId: String!
  workerId: String!
  role: String
}

input CreateFreelanceOrderInput {
  serviceId: String!
  clientId: String!
  quantity: Int! = 1
  businessIds: [String!]
  paymentMethod: PaymentMethod! = TOKEN
}

input UpdateFreelanceOrderInput {
  status: FreelanceStatus
  escrowStatus: EscrowStatus
  commissionPercent: Float
}

enum EscrowStatus {
  HELD
  RELEASED
  DISPUTED
}

input CreatePostOfSaleInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdatePostOfSaleInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateCategoryInput {
  name: String!
  description: String
}

input UpdateCategoryInput {
  name: String
  description: String
  id: String!
}

input CreateSaleInput {
  storeId: String!
  workerId: String
  clientId: String
  totalAmount: Float
  discount: Float
  paymentMethod: PaymentMethod
  saleProducts: [SaleProductInput!]
}

input SaleProductInput {
  productId: String!
  quantity: Int!
  price: Float
  modifiers: JSON
}

input UpdateSaleInput {
  clientId: String
  totalAmount: Float
  discount: Float
  paymentMethod: PaymentMethod
  saleProducts: [SaleProductInput!]
}

input CloseSaleInput {
  saleId: String!
  paymentMethod: PaymentMethod!
  status: SaleStatus
  paymentDetails: PaymentDetailsInput
}

input PaymentDetailsInput {
  mobileMoneyMethod: RechargeMethod
  country: Country
  operatorTransactionId: String
  screenshotUrl: String
  cardNumber: String
  cardHolderName: String
  expiryDate: String
  cvv: String
  tokenAmount: String
}

input AddSaleProductInput {
  saleId: String!
  productId: String!
  quantity: Float!
  modifiers: JSON
}

input UpdateSaleProductInput {
  quantity: Float
  modifiers: JSON
}

input CreateReturnInput {
  saleId: String!
  reason: String!
}

input GenerateReceiptInput {
  saleId: String!
  email: String
}

input CreateStoreInput {
  businessId: String!
  name: String!
  address: String
}

input UpdateStoreInput {
  name: String
  address: String
}

input CreateLoyaltyProgramInput {
  businessId: String!
  name: String!
  description: String
  pointsPerPurchase: Float!
  minimumPointsToRedeem: Float
}

input UpdateLoyaltyProgramInput {
  name: String
  description: String
  pointsPerPurchase: Float
  minimumPointsToRedeem: Float
}

input CreatePointsTransactionInput {
  clientId: String!
  loyaltyProgramId: String!
  points: Float!
}

input EarnPointsInput {
  clientId: String!
  loyaltyProgramId: String!
  points: Float!
  orderId: String
}

input RedeemPointsInput {
  clientId: String!
  loyaltyProgramId: String!
  points: Float!
  rewardDescription: String
}

input CreatePurchaseOrderInput {
  businessId: String!
  storeId: String!
  supplierId: String
  expectedDelivery: DateTime
  products: [PurchaseOrderProductInput!]!
}

input PurchaseOrderProductInput {
  productId: String!
  quantity: Int!
}

input UpdatePurchaseOrderInput {
  supplierId: String
  expectedDelivery: DateTime
  status: PurchaseOrderStatus
  products: [PurchaseOrderProductInput!]
}

input CreateTransferOrderInput {
  fromStoreId: String!
  toStoreId: String!
  products: [TransferOrderProductInput!]!
}

input TransferOrderProductInput {
  productId: String!
  quantity: Int!
}

input UpdateTransferOrderInput {
  status: TransferOrderStatus
  products: [TransferOrderProductInput!]
}

input CreateInventoryAdjustmentInput {
  productId: String!
  storeId: String!
  adjustmentType: AdjustmentType!
  quantity: Int!
  reason: String
}

input CreateShiftInput {
  storeId: String!
  startTime: DateTime!
}

input EndShiftInput {
  shiftId: String!
  endTime: DateTime!
}

input UpdateShiftInput {
  startTime: DateTime
  endTime: DateTime
}

type Subscription {
  productCreated(businessId: String!): ProductEntity!
  productUpdated(businessId: String!): ProductEntity!
  orderCreated(clientId: String!, businessId: String!): OrderEntity!
  orderUpdated(clientId: String!, businessId: String!): OrderEntity!
  orderPaymentProcessed(orderId: String!): OrderEntity!
  messageReceived(chatId: String!): ChatMessageEntity!
  chatCreated(userId: String!): ChatEntity!
  chatStatusUpdated(userId: String!): ChatEntity!
  freelanceServiceCreated(businessId: String!): FreelanceServiceEntity!
  freelanceServiceUpdated(businessId: String!): FreelanceServiceEntity!
  freelanceOrderCreated(clientId: String!): FreelanceOrderEntity!
  freelanceOrderUpdated(businessId: String!): FreelanceOrderEntity!
  saleCreated(storeId: String!): SaleEntity!
  saleUpdated(storeId: String!): SaleEntity!
  loyaltyProgramCreated(businessId: String!): LoyaltyProgramEntity!
  loyaltyProgramUpdated(businessId: String!): LoyaltyProgramEntity!
  pointsEarned(businessId: String!): PointsTransactionEntity!
  pointsRedeemed(businessId: String!): PointsTransactionEntity!
  purchaseOrderCreated(storeId: String!, businessId: String!): PurchaseOrderEntity!
  purchaseOrderUpdated(storeId: String!, businessId: String!): PurchaseOrderEntity!
  transferOrderCreated(fromStoreId: String!, toStoreId: String!): TransferOrderEntity!
  transferOrderUpdated(fromStoreId: String!): TransferOrderEntity!
}