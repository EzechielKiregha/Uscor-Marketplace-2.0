# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ChatMessageEntity {
  id: String!
  chatId: String!
  message: String!
  senderId: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AdEntity {
  id: String!
  businessId: String!
  productId: String!
  price: Float!
  periodDays: Int!
  createdAt: DateTime!
  endedAt: DateTime
  business: BusinessEntity!
  product: ProductEntity!
}

type CategoryEntity {
  id: String!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [ProductEntity!]
}

type MediaEntity {
  id: String!
  url: String!
  type: String!
  productId: String!
  createdAt: DateTime!
  product: ProductEntity!
}

type PaymentTransactionEntity {
  id: String!
  amount: Float!
  method: String!
  status: String!
  transactionDate: DateTime!
  qrCode: String
  createdAt: DateTime!
  order: OrderEntity!
  PostTransaction: [PostTransactionEntity!]
}

type PostTransactionEntity {
  id: String!
  amount: Float!
  status: String!
  createdAt: DateTime!
}

type OrderEntity {
  id: String!
  deliveryFee: Float!
  deliveryAddress: String
  qrCode: String
  createdAt: DateTime!
  updatedAt: DateTime!
  clientId: String!
  client: ClientEntity!
  payment: PaymentTransactionEntity
  products: [OrderProductEntity!]
}

type OrderProductEntity {
  id: String!
  orderId: String!
  productId: String!
  quantity: Int!
  order: OrderEntity!
  product: ProductEntity!
}

type ShippingEntity {
  id: String!
  reOwnedProductId: String!
  status: String!
  trackingNumber: String
  carrier: String
  shippedAt: DateTime
  deliveredAt: DateTime
  createdAt: DateTime!
}

type ReOwnedProductEntity {
  id: String!
  newProductId: String!
  newProduct: ProductEntity!
  originalProductId: String!
  originalProduct: ProductEntity!
  oldOwnerId: String!
  newOwnerId: String!
  quantity: Int!
  oldPrice: Float!
  newPrice: Float!
  markupPercentage: Float!
  agreedViaChatId: String!
  agreementDate: DateTime!
  isOriginalApproved: Boolean!
  isNewOwnerApproved: Boolean!
  shippingId: String
  shipping: ShippingEntity
  createdAt: DateTime!
}

type RepostedProductEntity {
  id: String!
  productId: String!
  product: ProductEntity!
  businessId: String!
  business: BusinessEntity!
  markupPercentage: Float!
  createdAt: DateTime!
}

type ReviewEntity {
  id: String!
  clientId: String!
  productId: String!
  rating: Int!
  comment: String
  createdAt: DateTime!
  client: ClientEntity!
  product: ProductEntity!
}

type StoreEntity {
  id: String!
  businessId: String!
  business: BusinessEntity!
  name: String!
  address: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProductEntity {
  id: String!
  title: String!
  description: String
  price: Float!
  quantity: Int!
  businessId: String!
  storeId: String
  isPhysical: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  featured: Boolean!
  approvedForSale: Boolean!
  medias: [MediaEntity!]!
  business: BusinessEntity
  store: StoreEntity
  category: CategoryEntity
  reviews: [ReviewEntity!]!
  orders: [OrderProductEntity!]!
  chats: [ChatEntity!]!
  reposts: [RepostedProductEntity!]!
  reowns: [ReOwnedProductEntity!]!
  ads: [AdEntity!]!
}

type KnowYourCustomerEntity {
  id: String!
  status: String!
  documentUrl: String!
  submittedAt: DateTime!
  verifiedAt: DateTime
  businessId: String
  clientId: String
  workerId: String
  business: BusinessEntity
  client: ClientEntity
  worker: WorkerEntity
}

type WorkerEntity {
  id: String!
  email: String!
  fullName: String
  role: String
  isVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  business: BusinessEntity
  kyc: KnowYourCustomerEntity
  freelanceServices: [FreelanceServiceEntity!]
  chats: [ChatEntity!]!
}

type FreelanceServiceEntity {
  id: String!
  title: String!
  description: String
  isHourly: Boolean!
  rate: Float!
  category: FreelanceServiceCategory!
  createdAt: DateTime!
  updatedAt: DateTime!
  business: BusinessEntity!
  workerServiceAssignments: [WorkerServiceAssignmentEntity!]!
}

enum FreelanceServiceCategory {
  PLUMBER
  ELECTRICIAN
  CARPENTER
  MECHANIC
  TUTOR
  CLEANER
  OTHER
}

type WorkerServiceAssignmentEntity {
  id: String!
  worker: WorkerEntity!
  role: String!
  assignedAt: DateTime!
}

type ChatParticipantEntity {
  id: String!
  chatId: String!
  clientId: String
  client: ClientEntity
  businessId: String
  business: BusinessEntity
  workerId: String
  worker: WorkerEntity
  createdAt: DateTime!
}

type ChatEntity {
  id: String!
  status: ChatStatus!
  isSecure: Boolean!
  negotiationType: NegotiationType
  productId: String
  product: ProductEntity
  serviceId: String
  service: FreelanceServiceEntity
  participants: [ChatParticipantEntity!]!
  messages: [ChatMessageEntity!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ChatStatus {
  PENDING
  ACTIVE
  CLOSED
}

enum NegotiationType {
  REOWNERSHIP
  FREELANCEORDER
  PURCHASE
  GENERAL
}

type FreelanceOrderEntity {
  id: String!
  status: FreelanceStatus!
  quantity: Int!
  totalAmount: Float!
  escrowAmount: Float!
  commissionPercent: Float!
  escrowStatus: EscrowStatus
  createdAt: DateTime!
  escrowReleasedAt: DateTime!
  client: ClientEntity!
  service: FreelanceServiceEntity!
  freelanceOrderBusiness: [FreelanceOrderBusinessEntity!]!
  payment: PaymentTransactionEntity
}

enum FreelanceStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EscrowStatus {
  HELD
  RELEASED
  DISPUTED
}

type FreelanceOrderBusinessEntity {
  id: String!
  business: BusinessEntity!
  role: String!
  assignedAt: DateTime!
}

type ClientEntity {
  id: String!
  username: String!
  email: String!
  fullName: String
  address: String
  phone: String
  password: String!
  isVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  orders: [OrderEntity!]!
  reviews: [ReviewEntity!]!
  chats: [ChatEntity!]!
  recharges: [AccountRechargeEntity!]!
  freelanceOrders: [FreelanceOrderEntity!]!
  referralsMade: [ReferralEntity!]!
  referralsReceived: [ReferralEntity!]!
}

type TokenTransactionEntity {
  id: String!
  businessId: String!
  business: BusinessEntity!
  reOwnedProductId: String
  reOwnedProduct: ReOwnedProductEntity
  repostedProductId: String
  repostedProduct: RepostedProductEntity
  amount: Float!
  type: TokenTransactionType!
  isRedeemed: Boolean!
  isReleased: Boolean!
  createdAt: DateTime!
}

enum TokenTransactionType {
  RELEASE
  PROFIT_SHARE
  REPOST_COMMISSION
}

type AccountRechargeEntity {
  id: String!
  amount: Float!
  method: RechargeMethod!
  origin: Country!
  businessId: String
  business: BusinessEntity
  clientId: String
  client: ClientEntity
  tokenTransactionId: String
  tokenTransaction: TokenTransactionEntity
  createdAt: DateTime!
}

enum RechargeMethod {
  MTN_MONEY
  AIRTEL_MONEY
  ORANGE_MONEY
  MPESA
  TOKEN
}

enum Country {
  DRC
  KENYA
  UGANDA
  RWANDA
  BURUNDI
  TANZANIA
}

type PostOfSaleEntity {
  id: String!
  title: String!
  description: String
  price: Float!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BusinessEntity {
  id: String!
  name: String!
  email: String!
  description: String
  address: String
  phone: String
  avatar: String
  coverImage: String
  password: String!
  isVerified: Boolean!
  kycStatus: KycStatus!
  totalProductsSold: Int!
  hasAgreedToTerms: Boolean!
  isB2BEnabled: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [ProductEntity!]!
  workers: [WorkerEntity!]!
  repostedItems: [RepostedProductEntity!]!
  reownedItems: [ReOwnedProductEntity!]!
  recharges: [AccountRechargeEntity!]!
  ads: [AdEntity!]!
  freelanceServices: [FreelanceServiceEntity!]!
  freelanceOrders: [FreelanceOrderEntity!]!
  referralsMade: [ReferralEntity!]!
  referralsReceived: [ReferralEntity!]!
  chats: [ChatEntity!]!
  postOfSales: [PostOfSaleEntity!]
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

type ReferralEntity {
  id: String!
  affiliateBusinessId: String
  affiliateClientId: String
  referredBusinessId: String
  referredClientId: String
  verifiedPurchase: Boolean!
  createdAt: DateTime!
  affiliateBusiness: BusinessEntity
  affiliateClient: ClientEntity
  referredBusiness: BusinessEntity
  referredClient: ClientEntity
}

type AuthPayloadClient {
  id: String!
  email: String!
  fullname: String!
  phone: String!
  avatar: String
  accessToken: String!
  refreshToken: String!
}

type AuthPayloadWorker {
  id: String!
  email: String!
  fullname: String!
  phone: String!
  accessToken: String!
  refreshToken: String!
}

type AuthPayloadBusiness {
  id: String!
  email: String!
  name: String!
  phone: String!
  avatar: String
  coverImage: String
  accessToken: String!
  refreshToken: String!
}

type SaleProductEntity {
  id: String!
  quantity: Int!
  price: Float!
  modifiers: JSON
  createdAt: DateTime!
  product: ProductEntity!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type ReturnEntity {
  id: String!
  saleId: String!
  reason: String
  status: SaleStatus!
  createdAt: DateTime!
  sale: SaleEntity!
}

enum SaleStatus {
  OPEN
  CLOSED
  REFUNDED
}

type SaleEntity {
  id: String!
  storeId: String!
  store: StoreEntity!
  workerId: String!
  worker: WorkerEntity!
  clientId: String
  client: ClientEntity
  totalAmount: Float!
  discount: Float!
  paymentMethod: PaymentMethod!
  status: SaleStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  saleProducts: [SaleProductEntity!]!
  returns: [ReturnEntity!]!
}

enum PaymentMethod {
  TOKEN
  MOBILE_MONEY
  CASH
  CARD
}

type ReceiptEntity {
  filePath: String!
  emailSent: Boolean
}

type LoyaltyProgramEntity {
  id: String!
  businessId: String!
  business: BusinessEntity!
  name: String!
  pointsPerPurchase: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PointsTransactionEntity {
  id: String!
  clientId: String!
  client: ClientEntity!
  loyaltyProgramId: String!
  loyaltyProgram: LoyaltyProgramEntity!
  points: Float!
  createdAt: DateTime!
}

type ClientPointsBalanceEntity {
  clientId: String!
  client: ClientEntity!
  totalPoints: Float!
}

type InventoryAdjustmentEntity {
  id: String!
  productId: String!
  product: ProductEntity!
  storeId: String!
  store: StoreEntity!
  adjustmentType: AdjustmentType!
  quantity: Int!
  reason: String
  createdAt: DateTime!
}

enum AdjustmentType {
  ADD
  REMOVE
}

type PurchaseOrderProductEntity {
  id: String!
  productId: String!
  quantity: Int!
  product: ProductEntity!
  createdAt: DateTime!
}

type BulkImportResultEntity {
  success: Boolean!
  count: Int!
}

type LowStockAlertEntity {
  productId: String!
  product: ProductEntity!
  storeId: String!
  store: StoreEntity!
  quantity: Int!
  threshold: Int!
}

type TransferOrderProductEntity {
  id: String!
  productId: String!
  quantity: Int!
  product: ProductEntity!
  createdAt: DateTime!
}

type TransferOrderEntity {
  id: String!
  fromStoreId: String!
  fromStore: StoreEntity!
  toStoreId: String!
  toStore: StoreEntity!
  status: TransferOrderStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [TransferOrderProductEntity!]!
}

enum TransferOrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

type PurchaseOrderEntity {
  id: String!
  businessId: String!
  business: BusinessEntity!
  storeId: String!
  store: StoreEntity!
  supplierId: String
  status: PurchaseOrderStatus!
  expectedDelivery: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [PurchaseOrderProductEntity!]!
}

enum PurchaseOrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

type ShiftEntity {
  id: String!
  workerId: String!
  worker: WorkerEntity!
  storeId: String!
  store: StoreEntity!
  startTime: DateTime!
  endTime: DateTime
  sales: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  """Retrieves all products with their relations."""
  products: [ProductEntity!]!

  """Retrieves all featured products with their relations."""
  featuredProducts: [ProductEntity!]!

  """Retrieves all featured products with their relations."""
  relatedProducts(category: String!): [ProductEntity!]!

  """Retrieves a single product by ID."""
  product(id: String!): ProductEntity!

  """Retrieves orders."""
  orders: [OrderEntity!]!

  """Retrieves a single order by ID."""
  order(id: String!): OrderEntity!

  """Retrieves token transactions for a business."""
  tokenTransactions: [TokenTransactionEntity!]!

  """Retrieves a single token transaction by ID."""
  tokenTransaction(id: String!): TokenTransactionEntity!

  """Retrieves account recharges for a user."""
  accountRecharges: [AccountRechargeEntity!]!

  """Retrieves a single account recharge by ID."""
  accountRecharge(id: String!): AccountRechargeEntity!

  """Retrieves the account balance for a user."""
  accountBalance: Float!

  """Retrieves all businesses with their relations."""
  businesses: [BusinessEntity!]!

  """Retrieves a single business by ID."""
  business(id: String!): BusinessEntity!

  """Retrieves all clients with their relations."""
  clients: [ClientEntity!]!

  """Retrieves a single client by ID."""
  client(id: String!): ClientEntity!

  """Retrieves all workers with their relations."""
  workers: [WorkerEntity!]!

  """Retrieves a single worker by ID."""
  worker(id: String!): WorkerEntity!

  """Retrieves chats for the user."""
  chats: [ChatEntity!]!

  """Retrieves a single chat by ID."""
  chat(id: String!): ChatEntity!

  """Retrieves reposted products for a business."""
  repostedProducts: [RepostedProductEntity!]!

  """Retrieves a single reposted product by ID."""
  repostedProduct(id: String!): RepostedProductEntity!

  """Retrieves re-owned products for a business."""
  reOwnedProducts: [ReOwnedProductEntity!]!

  """Retrieves a single re-owned product by ID."""
  reOwnedProduct(id: String!): ReOwnedProductEntity!

  """Retrieves payment transactions based on user role."""
  paymentTransactions: [PaymentTransactionEntity!]!

  """Retrieves a single payment transaction by ID."""
  paymentTransaction(id: String!): PaymentTransactionEntity!

  """Retrieves freelance services, optionally filtered by category."""
  freelanceServices(category: FreelanceCategory): [FreelanceServiceEntity!]!

  """Retrieves a single freelance service by ID."""
  freelanceService(id: String!): FreelanceServiceEntity!

  """Retrieves freelance orders based on user role."""
  freelanceOrders: [FreelanceOrderEntity!]!

  """Retrieves a single freelance order by ID."""
  freelanceOrder(id: String!): FreelanceOrderEntity!
  postOfSale(id: Int!): PostOfSaleEntity!

  """Retrieves all categories with their products."""
  categories: [CategoryEntity!]!

  """Retrieves a single category by ID."""
  category(id: String!): CategoryEntity!

  """Retrieves sales for a store."""
  sales(storeId: String!): [SaleEntity!]!

  """Retrieves a single sale by ID."""
  sale(id: String!): SaleEntity!

  """Retrieves stores for a business."""
  stores: [StoreEntity!]!

  """Retrieves a single store by ID."""
  store(id: String!): StoreEntity!

  """Retrieves points transactions for a client."""
  pointsTransactionsByClient(clientId: String!): [PointsTransactionEntity!]!

  """Retrieves points transactions for a loyalty program."""
  pointsTransactionsByProgram(loyaltyProgramId: String!): [PointsTransactionEntity!]!

  """Retrieves total points for a client."""
  clientPointsBalance(clientId: String!): ClientPointsBalanceEntity!

  """Retrieves low stock alerts for a store."""
  lowStockAlerts(lowStockAlertInput: LowStockAlertInput!): [LowStockAlertEntity!]!

  """Exports products for a store."""
  bulkExportProducts(storeId: String!): [PurchaseOrderProductEntity!]!

  """Retrieves a single shift."""
  shift(id: String!): ShiftEntity!

  """Retrieves shifts for a store."""
  shiftsByStore(storeId: String!): [ShiftEntity!]!

  """Retrieves shifts for a worker."""
  shiftsByWorker(workerId: String!): [ShiftEntity!]!
}

enum FreelanceCategory {
  PLUMBER
  ELECTRICIAN
  CARPENTER
  MECHANIC
  TUTOR
  CLEANER
  OTHER
}

input LowStockAlertInput {
  storeId: String!
  threshold: Int!
}

type Mutation {
  """Creates a new product for a business."""
  createProduct(createProductInput: CreateProductInput!): ProductEntity!

  """Updates a product’s details."""
  updateProduct(id: String!, updateProductInput: UpdateProductInput!): ProductEntity!

  """Deletes a product."""
  deleteProduct(id: String!): ProductEntity!

  """Creates an order for a product."""
  createOrder(createOrderInput: CreateOrderInput!): OrderEntity!

  """Updates an order."""
  updateOrder(id: String!, updateOrderInput: UpdateOrderInput!): OrderEntity!

  """Deletes an order."""
  deleteOrder(id: String!): OrderEntity!

  """Creates a token transaction."""
  createTokenTransaction(createTokenTransactionInput: CreateTokenTransactionInput!): TokenTransactionEntity!

  """Redeems a token transaction."""
  redeemTokenTransaction(redeemTokenTransactionInput: RedeemTokenTransactionInput!): TokenTransactionEntity!

  """Releases a token transaction."""
  releaseTokenTransaction(releaseTokenTransactionInput: ReleaseTokenTransactionInput!): TokenTransactionEntity!

  """Creates an account recharge."""
  createAccountRecharge(createAccountRechargeInput: CreateAccountRechargeInput!): AccountRechargeEntity!

  """Updates an account recharge."""
  updateAccountRecharge(id: String!, updateAccountRechargeInput: UpdateAccountRechargeInput!): AccountRechargeEntity!

  """Deletes an account recharge."""
  deleteAccountRecharge(id: String!): AccountRechargeEntity!

  """Creates a new business with hashed password."""
  createBusiness(createBusinessInput: CreateBusinessInput!): BusinessEntity!

  """Updates a business’s details."""
  updateBusiness(id: String!, updateBusinessInput: UpdateBusinessInput!): BusinessEntity!

  """Deletes a business."""
  deleteBusiness(id: String!): BusinessEntity!

  """Creates a new client with hashed password."""
  createClient(createClientInput: CreateClientInput!): ClientEntity!

  """Updates a client’s details."""
  updateClient(id: String!, updateClientInput: UpdateClientInput!): ClientEntity!

  """Deletes a client."""
  deleteClient(id: String!): ClientEntity!

  """Creates a new worker with hashed password."""
  createWorker(createWorkerInput: CreateWorkerInput!): WorkerEntity!

  """Updates a worker’s details."""
  updateWorker(id: String!, updateWorkerInput: UpdateWorkerInput!): WorkerEntity!

  """Deletes a worker."""
  deleteWorker(id: String!): WorkerEntity!

  """Creates a new chat with dynamic participants."""
  createChat(createChatInput: CreateChatInput!): ChatEntity!

  """Sends a message in a chat."""
  createChatMessage(createChatMessageInput: CreateChatMessageInput!): ChatMessageEntity!

  """Updates a chat’s status or properties."""
  updateChat(id: String!, updateChatInput: UpdateChatInput!): ChatEntity!

  """Deletes a chat."""
  deleteChat(id: String!): ChatEntity!

  """Creates a reposted product."""
  createRepostedProduct(createRepostedProductInput: CreateRepostedProductInput!): RepostedProductEntity!

  """Deletes a reposted product."""
  deleteRepostedProduct(id: String!): RepostedProductEntity!

  """Initiates a re-ownership request."""
  createReOwnedProduct(createReOwnedProductInput: CreateReOwnedProductInput!): ReOwnedProductEntity!

  """Approves or rejects a re-ownership request."""
  approveReOwnedProduct(approveReOwnedProductInput: ApproveReOwnedProductInput!): ReOwnedProductEntity!

  """Creates shipping details for a re-owned product."""
  createShipping(createShippingInput: CreateShippingInput!): ShippingEntity!

  """Creates a new payment transaction."""
  createPaymentTransaction(createPaymentTransactionInput: CreatePaymentTransactionInput!): PaymentTransactionEntity!

  """Updates a payment transaction’s status or QR code."""
  updatePaymentTransaction(id: String!, updatePaymentTransactionInput: UpdatePaymentTransactionInput!): PaymentTransactionEntity!

  """Deletes a payment transaction."""
  deletePaymentTransaction(id: String!): PaymentTransactionEntity!

  """Creates a new freelance service."""
  createFreelanceService(createFreelanceServiceInput: CreateFreelanceServiceInput!): FreelanceServiceEntity!

  """Updates a freelance service."""
  updateFreelanceService(id: String!, updateFreelanceServiceInput: UpdateFreelanceServiceInput!): FreelanceServiceEntity!

  """Assigns workers to a freelance service."""
  assignWorkersToService(assignWorkersInput: AssignWorkersInput!): FreelanceServiceEntity!

  """Deletes a freelance service."""
  deleteFreelanceService(id: String!): FreelanceServiceEntity!

  """Creates a new freelance order."""
  createFreelanceOrder(createFreelanceOrderInput: CreateFreelanceOrderInput!): FreelanceOrderEntity!

  """Updates a freelance order’s status or escrow status."""
  updateFreelanceOrder(id: String!, updateFreelanceOrderInput: UpdateFreelanceOrderInput!): FreelanceOrderEntity!

  """Assigns businesses to a freelance order."""
  assignBusinessesToOrder(assignBusinessesInput: AssignBusinessesInput!): FreelanceOrderEntity!

  """Deletes a freelance order."""
  deleteFreelanceOrder(id: String!): FreelanceOrderEntity!
  signIn(SignInInput: SignInInput!): AuthPayloadClient!
  signBusinessIn(SignInInput: SignInInput!): AuthPayloadBusiness!
  signWorkerIn(SignInInput: SignInInput!): AuthPayloadWorker!
  refreshToken(refreshToken: String!): AuthPayloadClient!
  createPostOfSale(createPostOfSaleInput: CreatePostOfSaleInput!): PostOfSaleEntity!
  updatePostOfSale(updatePostOfSaleInput: UpdatePostOfSaleInput!): PostOfSaleEntity!
  removePostOfSale(id: Int!): PostOfSaleEntity!

  """Creates a new category."""
  createCategory(createCategoryInput: CreateCategoryInput!): CategoryEntity!

  """Updates a category’s details."""
  updateCategory(id: String!, updateCategoryInput: UpdateCategoryInput!): CategoryEntity!

  """Deletes a category."""
  deleteCategory(id: String!): CategoryEntity!

  """Creates a new POS sale."""
  createSale(createSaleInput: CreateSaleInput!): SaleEntity!

  """Updates an existing POS sale."""
  updateSale(id: String!, updateSaleInput: UpdateSaleInput!): SaleEntity!

  """Closes a POS sale."""
  closeSale(closeSaleInput: CloseSaleInput!): SaleEntity!

  """Processes a return for a POS sale."""
  createReturn(createReturnInput: CreateReturnInput!): ReturnEntity!

  """Generates a PDF receipt and optionally emails it."""
  generateReceipt(generateReceiptInput: GenerateReceiptInput!): ReceiptEntity!

  """Generates a PDF receipt using pdfkit and optionally emails it."""
  generateReceiptWithPDFKit(generateReceiptInput: GenerateReceiptInput!): ReceiptEntity!

  """Creates a new store for a business."""
  createStore(createStoreInput: CreateStoreInput!): StoreEntity!

  """Updates an existing store."""
  updateStore(id: String!, updateStoreInput: UpdateStoreInput!): StoreEntity!

  """Deletes a store."""
  deleteStore(id: String!): StoreEntity!

  """Creates a new loyalty program."""
  createLoyaltyProgram(createLoyaltyProgramInput: CreateLoyaltyProgramInput!): LoyaltyProgramEntity!

  """Updates a loyalty program."""
  updateLoyaltyProgram(id: String!, updateLoyaltyProgramInput: UpdateLoyaltyProgramInput!): LoyaltyProgramEntity!

  """Creates a points transaction."""
  createPointsTransaction(createPointsTransactionInput: CreatePointsTransactionInput!): PointsTransactionEntity!

  """Creates a new purchase order."""
  createPurchaseOrder(createPurchaseOrderInput: CreatePurchaseOrderInput!): PurchaseOrderEntity!

  """Updates a purchase order."""
  updatePurchaseOrder(id: String!, updatePurchaseOrderInput: UpdatePurchaseOrderInput!): PurchaseOrderEntity!

  """Creates a new transfer order."""
  createTransferOrder(createTransferOrderInput: CreateTransferOrderInput!): TransferOrderEntity!

  """Updates a transfer order."""
  updateTransferOrder(id: String!, updateTransferOrderInput: UpdateTransferOrderInput!): TransferOrderEntity!

  """Creates an inventory adjustment."""
  createInventoryAdjustment(createInventoryAdjustmentInput: CreateInventoryAdjustmentInput!): InventoryAdjustmentEntity!

  """Imports products in bulk."""
  bulkImportProducts(storeId: String!, products: [PurchaseOrderProductInput!]!): BulkImportResultEntity!

  """Starts a new shift for a worker."""
  createShift(createShiftInput: CreateShiftInput!): ShiftEntity!

  """Ends a shift and calculates sales."""
  endShift(endShiftInput: EndShiftInput!): ShiftEntity!

  """Updates shift details (business only)."""
  updateShift(id: String!, updateShiftInput: UpdateShiftInput!): ShiftEntity!
}

input CreateProductInput {
  title: String!
  description: String
  price: Float!
  quantity: Int!
  storeId: String
  isPhysical: Boolean!
  businessId: String!
  categoryId: String!
  featured: Boolean! = false
  approvedForSale: Boolean! = true
}

input UpdateProductInput {
  title: String
  description: String
  price: Float
  quantity: Int
  storeId: String
  isPhysical: Boolean
  businessId: String
  categoryId: String
  featured: Boolean = false
  approvedForSale: Boolean = true
  id: String!
}

input CreateOrderInput {
  clientId: String!
  deliveryFee: Float!
  deliveryAddress: String
  qrCode: String
  orderProducts: [CreateOrderProductInput!]!
  payment: CreatePaymentTransactionInput!
}

input CreateOrderProductInput {
  productId: String!
  quantity: Int!
}

input CreatePaymentTransactionInput {
  orderId: String
  amount: Float
  method: PaymentMethod!
  status: PaymentStatus!
  qrCode: String
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

input UpdateOrderInput {
  deliveryAddress: String
  qrCode: String
  deliveryFee: Float
}

input CreateTokenTransactionInput {
  businessId: String!
  reOwnedProductId: String
  repostedProductId: String
  amount: Float!
  type: TokenTransactionType!
}

input RedeemTokenTransactionInput {
  tokenTransactionId: String!
  isRedeemed: Boolean!
}

input ReleaseTokenTransactionInput {
  tokenTransactionId: String!
  isReleased: Boolean!
}

input CreateAccountRechargeInput {
  amount: Float!
  method: RechargeMethod!
  origin: Country!
  clientId: String
  businessId: String
  tokenTransactionId: String
}

input UpdateAccountRechargeInput {
  amount: Float
  method: RechargeMethod
  origin: Country
}

input CreateBusinessInput {
  name: String!
  email: String!
  description: String
  avatar: String
  coverImage: String
  address: String
  phone: String
  password: String!
  isVerified: Boolean! = false
}

input UpdateBusinessInput {
  name: String
  email: String
  description: String
  avatar: String
  coverImage: String
  address: String
  phone: String
  password: String
  isVerified: Boolean
  kycId: String
  kycStatus: KycStatus!
  totalProductsSold: Int
  hasAgreedToTerms: Boolean
  isB2BEnabled: Boolean
}

input CreateClientInput {
  username: String!
  email: String!
  fullName: String
  address: String
  phone: String
  password: String!
  isVerified: Boolean!
}

input UpdateClientInput {
  username: String
  email: String
  fullName: String
  address: String
  phone: String
  password: String
  isVerified: Boolean
  id: Int!
  kycId: String
}

input CreateWorkerInput {
  email: String!
  fullName: String
  role: WorkerRole!
  password: String!
  isVerified: Boolean! = false
  businessId: String
  kycId: String
}

enum WorkerRole {
  ADMIN
  STAFF
  MANAGER
  FREELANCER
}

input UpdateWorkerInput {
  email: String
  fullName: String
  role: WorkerRole
  password: String
  isVerified: Boolean = false
  businessId: String
  kycId: String
  id: String!
}

input CreateChatInput {
  productId: String
  serviceId: String
  participantIds: [String!]!
  isSecure: Boolean! = false
  negotiationType: NegotiationType
}

input CreateChatMessageInput {
  chatId: String!
  message: String!
}

input UpdateChatInput {
  id: String!
  status: ChatStatus
  isSecure: Boolean
  negotiationType: NegotiationType
}

input CreateRepostedProductInput {
  productId: String!
  businessId: String!
  markupPercentage: Float! = 0.02
}

input CreateReOwnedProductInput {
  originalProductId: String!
  newOwnerId: String!
  quantity: Int!
  newPrice: Float!
  markupPercentage: Float!
}

input ApproveReOwnedProductInput {
  reOwnedProductId: String!
  chatId: String!
  isApproved: Boolean!
}

input CreateShippingInput {
  reOwnedProductId: String!
  trackingNumber: String!
  carrier: String!
}

input UpdatePaymentTransactionInput {
  status: PaymentStatus
  qrCode: String
}

input CreateFreelanceServiceInput {
  title: String!
  description: String
  isHourly: Boolean! = true
  category: FreelanceServiceCategory!
  rate: Float!
  workerIds: [String!]
}

input UpdateFreelanceServiceInput {
  id: String!
  title: String
  description: String
  isHourly: Boolean
  rate: Float
  workerIds: [String!]
}

input AssignWorkersInput {
  serviceId: String!
  workerIds: [String!]!
}

input CreateFreelanceOrderInput {
  serviceId: String!
  clientId: String!
  quantity: Int! = 1
  businessIds: [String!]
  paymentMethod: PaymentMethod! = TOKEN
}

input UpdateFreelanceOrderInput {
  status: FreelanceStatus
  escrowStatus: EscrowStatus
  commissionPercent: Float
}

input AssignBusinessesInput {
  orderId: String!
  businessIds: [String!]!
}

input SignInInput {
  email: String!
  password: String!
}

input CreatePostOfSaleInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdatePostOfSaleInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateCategoryInput {
  name: String!
  description: String
}

input UpdateCategoryInput {
  name: String
  description: String
  id: String!
}

input CreateSaleInput {
  storeId: String!
  workerId: String!
  clientId: String
  totalAmount: Float
  discount: Float
  paymentMethod: PaymentMethod!
  saleProducts: [SaleProductInput!]!
}

input SaleProductInput {
  productId: String!
  quantity: Int!
  price: Float
  modifiers: JSON
}

input UpdateSaleInput {
  clientId: String
  totalAmount: Float
  discount: Float
  paymentMethod: PaymentMethod
  saleProducts: [SaleProductInput!]
}

input CloseSaleInput {
  saleId: String!
  paymentMethod: PaymentMethod!
  status: SaleStatus
}

input CreateReturnInput {
  saleId: String!
  reason: String!
}

input GenerateReceiptInput {
  saleId: String!
  email: String
}

input CreateStoreInput {
  businessId: String!
  name: String!
  address: String
}

input UpdateStoreInput {
  name: String
  address: String
}

input CreateLoyaltyProgramInput {
  businessId: String!
  name: String!
  pointsPerPurchase: Float!
}

input UpdateLoyaltyProgramInput {
  name: String
  pointsPerPurchase: Float
}

input CreatePointsTransactionInput {
  clientId: String!
  loyaltyProgramId: String!
  points: Float!
}

input CreatePurchaseOrderInput {
  businessId: String!
  storeId: String!
  supplierId: String
  expectedDelivery: DateTime
  products: [PurchaseOrderProductInput!]!
}

input PurchaseOrderProductInput {
  productId: String!
  quantity: Int!
}

input UpdatePurchaseOrderInput {
  supplierId: String
  expectedDelivery: DateTime
  status: PurchaseOrderStatus
  products: [PurchaseOrderProductInput!]
}

input CreateTransferOrderInput {
  fromStoreId: String!
  toStoreId: String!
  products: [TransferOrderProductInput!]!
}

input TransferOrderProductInput {
  productId: String!
  quantity: Int!
}

input UpdateTransferOrderInput {
  status: TransferOrderStatus
  products: [TransferOrderProductInput!]
}

input CreateInventoryAdjustmentInput {
  productId: String!
  storeId: String!
  adjustmentType: AdjustmentType!
  quantity: Int!
  reason: String
}

input CreateShiftInput {
  storeId: String!
  startTime: DateTime!
}

input EndShiftInput {
  shiftId: String!
  endTime: DateTime!
}

input UpdateShiftInput {
  startTime: DateTime
  endTime: DateTime
}